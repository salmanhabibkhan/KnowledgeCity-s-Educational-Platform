{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "yaml": "1.10.2"
  },
  "dependencies": {
    "aws-cdk-lib": "^2.187.0",
    "constructs": "^10.0.0"
  },
  "dependencyClosure": {
    "@aws-cdk/asset-awscli-v1": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.AwsCliV1",
          "packageId": "Amazon.CDK.Asset.AwsCliV1"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-awscli-go",
          "packageName": "awscliv1"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-awscli-v1",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.awscli.v1"
        },
        "js": {
          "npm": "@aws-cdk/asset-awscli-v1"
        },
        "python": {
          "distName": "aws-cdk.asset-awscli-v1",
          "module": "aws_cdk.asset_awscli_v1"
        }
      }
    },
    "@aws-cdk/asset-node-proxy-agent-v6": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.NodeProxyAgentV6",
          "packageId": "Amazon.CDK.Asset.NodeProxyAgentV6"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-node-proxy-agent-go",
          "packageName": "nodeproxyagentv6"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-node-proxy-agent-v6",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.node.proxy.agent.v6"
        },
        "js": {
          "npm": "@aws-cdk/asset-node-proxy-agent-v6"
        },
        "python": {
          "distName": "aws-cdk.asset-node-proxy-agent-v6",
          "module": "aws_cdk.asset_node_proxy_agent_v6"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "go": {
          "moduleName": "github.com/cdklabs/cloud-assembly-schema-go"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 2"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "aws-cdk-lib": {
      "submodules": {
        "aws-cdk-lib.alexa_ask": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Alexa.Ask"
            },
            "java": {
              "package": "software.amazon.awscdk.alexa.ask"
            },
            "python": {
              "module": "aws_cdk.alexa_ask"
            }
          }
        },
        "aws-cdk-lib.assertions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assertions"
            },
            "java": {
              "package": "software.amazon.awscdk.assertions"
            },
            "python": {
              "module": "aws_cdk.assertions"
            }
          }
        },
        "aws-cdk-lib.assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.assets"
            },
            "python": {
              "module": "aws_cdk.assets"
            }
          }
        },
        "aws-cdk-lib.aws_accessanalyzer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AccessAnalyzer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.accessanalyzer"
            },
            "python": {
              "module": "aws_cdk.aws_accessanalyzer"
            }
          }
        },
        "aws-cdk-lib.aws_acmpca": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ACMPCA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.acmpca"
            },
            "python": {
              "module": "aws_cdk.aws_acmpca"
            }
          }
        },
        "aws-cdk-lib.aws_amazonmq": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmazonMQ"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amazonmq"
            },
            "python": {
              "module": "aws_cdk.aws_amazonmq"
            }
          }
        },
        "aws-cdk-lib.aws_amplify": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Amplify"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplify"
            },
            "python": {
              "module": "aws_cdk.aws_amplify"
            }
          }
        },
        "aws-cdk-lib.aws_amplifyuibuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmplifyUIBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplifyuibuilder"
            },
            "python": {
              "module": "aws_cdk.aws_amplifyuibuilder"
            }
          }
        },
        "aws-cdk-lib.aws_apigateway": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APIGateway"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigateway"
            },
            "python": {
              "module": "aws_cdk.aws_apigateway"
            }
          }
        },
        "aws-cdk-lib.aws_apigatewayv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Apigatewayv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigatewayv2"
            },
            "python": {
              "module": "aws_cdk.aws_apigatewayv2"
            }
          }
        },
        "aws-cdk-lib.aws_apigatewayv2_authorizers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AwsApigatewayv2Authorizers"
            },
            "java": {
              "package": "software.amazon.awscdk.aws_apigatewayv2_authorizers"
            },
            "python": {
              "module": "aws_cdk.aws_apigatewayv2_authorizers"
            }
          }
        },
        "aws-cdk-lib.aws_apigatewayv2_integrations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AwsApigatewayv2Integrations"
            },
            "java": {
              "package": "software.amazon.awscdk.aws_apigatewayv2_integrations"
            },
            "python": {
              "module": "aws_cdk.aws_apigatewayv2_integrations"
            }
          }
        },
        "aws-cdk-lib.aws_appconfig": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppConfig"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appconfig"
            },
            "python": {
              "module": "aws_cdk.aws_appconfig"
            }
          }
        },
        "aws-cdk-lib.aws_appflow": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppFlow"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appflow"
            },
            "python": {
              "module": "aws_cdk.aws_appflow"
            }
          }
        },
        "aws-cdk-lib.aws_appintegrations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppIntegrations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appintegrations"
            },
            "python": {
              "module": "aws_cdk.aws_appintegrations"
            }
          }
        },
        "aws-cdk-lib.aws_applicationautoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationautoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_applicationautoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_applicationinsights": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationInsights"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationinsights"
            },
            "python": {
              "module": "aws_cdk.aws_applicationinsights"
            }
          }
        },
        "aws-cdk-lib.aws_applicationsignals": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.ApplicationSignals"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationsignals"
            },
            "python": {
              "module": "aws_cdk.aws_applicationsignals"
            }
          }
        },
        "aws-cdk-lib.aws_appmesh": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppMesh"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appmesh"
            },
            "python": {
              "module": "aws_cdk.aws_appmesh"
            }
          }
        },
        "aws-cdk-lib.aws_apprunner": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppRunner"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apprunner"
            },
            "python": {
              "module": "aws_cdk.aws_apprunner"
            }
          }
        },
        "aws-cdk-lib.aws_appstream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppStream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appstream"
            },
            "python": {
              "module": "aws_cdk.aws_appstream"
            }
          }
        },
        "aws-cdk-lib.aws_appsync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appsync"
            },
            "python": {
              "module": "aws_cdk.aws_appsync"
            }
          }
        },
        "aws-cdk-lib.aws_apptest": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.AppTest"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apptest"
            },
            "python": {
              "module": "aws_cdk.aws_apptest"
            }
          }
        },
        "aws-cdk-lib.aws_aps": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.aps"
            },
            "python": {
              "module": "aws_cdk.aws_aps"
            }
          }
        },
        "aws-cdk-lib.aws_arczonalshift": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.ARCZonalShift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.arczonalshift"
            },
            "python": {
              "module": "aws_cdk.aws_arczonalshift"
            }
          }
        },
        "aws-cdk-lib.aws_athena": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Athena"
            },
            "java": {
              "package": "software.amazon.awscdk.services.athena"
            },
            "python": {
              "module": "aws_cdk.aws_athena"
            }
          }
        },
        "aws-cdk-lib.aws_auditmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AuditManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.auditmanager"
            },
            "python": {
              "module": "aws_cdk.aws_auditmanager"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_common": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.Common"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.common"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_common"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_hooktargets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_hooktargets"
            }
          }
        },
        "aws-cdk-lib.aws_autoscalingplans": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScalingPlans"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscalingplans"
            },
            "python": {
              "module": "aws_cdk.aws_autoscalingplans"
            }
          }
        },
        "aws-cdk-lib.aws_b2bi": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.B2BI"
            },
            "java": {
              "package": "software.amazon.awscdk.services.b2bi"
            },
            "python": {
              "module": "aws_cdk.aws_b2bi"
            }
          }
        },
        "aws-cdk-lib.aws_backup": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Backup"
            },
            "java": {
              "package": "software.amazon.awscdk.services.backup"
            },
            "python": {
              "module": "aws_cdk.aws_backup"
            }
          }
        },
        "aws-cdk-lib.aws_backupgateway": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.BackupGateway"
            },
            "java": {
              "package": "software.amazon.awscdk.services.backupgateway"
            },
            "python": {
              "module": "aws_cdk.aws_backupgateway"
            }
          }
        },
        "aws-cdk-lib.aws_batch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Batch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.batch"
            },
            "python": {
              "module": "aws_cdk.aws_batch"
            }
          }
        },
        "aws-cdk-lib.aws_bcmdataexports": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.BCMDataExports"
            },
            "java": {
              "package": "software.amazon.awscdk.services.bcmdataexports"
            },
            "python": {
              "module": "aws_cdk.aws_bcmdataexports"
            }
          }
        },
        "aws-cdk-lib.aws_bedrock": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Bedrock"
            },
            "java": {
              "package": "software.amazon.awscdk.services.bedrock"
            },
            "python": {
              "module": "aws_cdk.aws_bedrock"
            }
          }
        },
        "aws-cdk-lib.aws_billingconductor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.BillingConductor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.billingconductor"
            },
            "python": {
              "module": "aws_cdk.aws_billingconductor"
            }
          }
        },
        "aws-cdk-lib.aws_budgets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Budgets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.budgets"
            },
            "python": {
              "module": "aws_cdk.aws_budgets"
            }
          }
        },
        "aws-cdk-lib.aws_cassandra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cassandra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cassandra"
            },
            "python": {
              "module": "aws_cdk.aws_cassandra"
            }
          }
        },
        "aws-cdk-lib.aws_ce": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CE"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ce"
            },
            "python": {
              "module": "aws_cdk.aws_ce"
            }
          }
        },
        "aws-cdk-lib.aws_certificatemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CertificateManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.certificatemanager"
            },
            "python": {
              "module": "aws_cdk.aws_certificatemanager"
            }
          }
        },
        "aws-cdk-lib.aws_chatbot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Chatbot"
            },
            "java": {
              "package": "software.amazon.awscdk.services.chatbot"
            },
            "python": {
              "module": "aws_cdk.aws_chatbot"
            }
          }
        },
        "aws-cdk-lib.aws_cleanrooms": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.CleanRooms"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cleanrooms"
            },
            "python": {
              "module": "aws_cdk.aws_cleanrooms"
            }
          }
        },
        "aws-cdk-lib.aws_cleanroomsml": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.CleanRoomsML"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cleanroomsml"
            },
            "python": {
              "module": "aws_cdk.aws_cleanroomsml"
            }
          }
        },
        "aws-cdk-lib.aws_cloud9": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cloud9"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloud9"
            },
            "python": {
              "module": "aws_cdk.aws_cloud9"
            }
          }
        },
        "aws-cdk-lib.aws_cloudformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudformation"
            },
            "python": {
              "module": "aws_cdk.aws_cloudformation"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront.experimental": {},
        "aws-cdk-lib.aws_cloudfront_origins": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront.Origins"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront.origins"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront_origins"
            }
          }
        },
        "aws-cdk-lib.aws_cloudtrail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudTrail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudtrail"
            },
            "python": {
              "module": "aws_cdk.aws_cloudtrail"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch.actions"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codeartifact": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeArtifact"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeartifact"
            },
            "python": {
              "module": "aws_cdk.aws_codeartifact"
            }
          }
        },
        "aws-cdk-lib.aws_codebuild": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeBuild"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codebuild"
            },
            "python": {
              "module": "aws_cdk.aws_codebuild"
            }
          }
        },
        "aws-cdk-lib.aws_codecommit": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeCommit"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codecommit"
            },
            "python": {
              "module": "aws_cdk.aws_codecommit"
            }
          }
        },
        "aws-cdk-lib.aws_codeconnections": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.CodeConnections"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeconnections"
            },
            "python": {
              "module": "aws_cdk.aws_codeconnections"
            }
          }
        },
        "aws-cdk-lib.aws_codedeploy": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeDeploy"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codedeploy"
            },
            "python": {
              "module": "aws_cdk.aws_codedeploy"
            }
          }
        },
        "aws-cdk-lib.aws_codeguruprofiler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruProfiler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeguruprofiler"
            },
            "python": {
              "module": "aws_cdk.aws_codeguruprofiler"
            }
          }
        },
        "aws-cdk-lib.aws_codegurureviewer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruReviewer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codegurureviewer"
            },
            "python": {
              "module": "aws_cdk.aws_codegurureviewer"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline.actions"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codestar": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Codestar"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestar"
            },
            "python": {
              "module": "aws_cdk.aws_codestar"
            }
          }
        },
        "aws-cdk-lib.aws_codestarconnections": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarConnections"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarconnections"
            },
            "python": {
              "module": "aws_cdk.aws_codestarconnections"
            }
          }
        },
        "aws-cdk-lib.aws_codestarnotifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarNotifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarnotifications"
            },
            "python": {
              "module": "aws_cdk.aws_codestarnotifications"
            }
          }
        },
        "aws-cdk-lib.aws_cognito": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cognito"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cognito"
            },
            "python": {
              "module": "aws_cdk.aws_cognito"
            }
          }
        },
        "aws-cdk-lib.aws_cognito_identitypool": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cognito.Identitypool"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cognito.identitypool"
            },
            "python": {
              "module": "aws_cdk.aws_cognito_identitypool"
            }
          }
        },
        "aws-cdk-lib.aws_comprehend": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Comprehend"
            },
            "java": {
              "package": "software.amazon.awscdk.services.comprehend"
            },
            "python": {
              "module": "aws_cdk.aws_comprehend"
            }
          }
        },
        "aws-cdk-lib.aws_config": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Config"
            },
            "java": {
              "package": "software.amazon.awscdk.services.config"
            },
            "python": {
              "module": "aws_cdk.aws_config"
            }
          }
        },
        "aws-cdk-lib.aws_connect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Connect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connect"
            },
            "python": {
              "module": "aws_cdk.aws_connect"
            }
          }
        },
        "aws-cdk-lib.aws_connectcampaigns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ConnectCampaigns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connectcampaigns"
            },
            "python": {
              "module": "aws_cdk.aws_connectcampaigns"
            }
          }
        },
        "aws-cdk-lib.aws_connectcampaignsv2": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.ConnectCampaignsV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connectcampaignsv2"
            },
            "python": {
              "module": "aws_cdk.aws_connectcampaignsv2"
            }
          }
        },
        "aws-cdk-lib.aws_controltower": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ControlTower"
            },
            "java": {
              "package": "software.amazon.awscdk.services.controltower"
            },
            "python": {
              "module": "aws_cdk.aws_controltower"
            }
          }
        },
        "aws-cdk-lib.aws_cur": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CUR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cur"
            },
            "python": {
              "module": "aws_cdk.aws_cur"
            }
          }
        },
        "aws-cdk-lib.aws_customerprofiles": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CustomerProfiles"
            },
            "java": {
              "package": "software.amazon.awscdk.services.customerprofiles"
            },
            "python": {
              "module": "aws_cdk.aws_customerprofiles"
            }
          }
        },
        "aws-cdk-lib.aws_databrew": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataBrew"
            },
            "java": {
              "package": "software.amazon.awscdk.services.databrew"
            },
            "python": {
              "module": "aws_cdk.aws_databrew"
            }
          }
        },
        "aws-cdk-lib.aws_datapipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataPipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datapipeline"
            },
            "python": {
              "module": "aws_cdk.aws_datapipeline"
            }
          }
        },
        "aws-cdk-lib.aws_datasync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datasync"
            },
            "python": {
              "module": "aws_cdk.aws_datasync"
            }
          }
        },
        "aws-cdk-lib.aws_datazone": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.DataZone"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datazone"
            },
            "python": {
              "module": "aws_cdk.aws_datazone"
            }
          }
        },
        "aws-cdk-lib.aws_dax": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DAX"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dax"
            },
            "python": {
              "module": "aws_cdk.aws_dax"
            }
          }
        },
        "aws-cdk-lib.aws_deadline": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Deadline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.deadline"
            },
            "python": {
              "module": "aws_cdk.aws_deadline"
            }
          }
        },
        "aws-cdk-lib.aws_detective": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Detective"
            },
            "java": {
              "package": "software.amazon.awscdk.services.detective"
            },
            "python": {
              "module": "aws_cdk.aws_detective"
            }
          }
        },
        "aws-cdk-lib.aws_devicefarm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DeviceFarm"
            },
            "java": {
              "package": "software.amazon.awscdk.services.devicefarm"
            },
            "python": {
              "module": "aws_cdk.aws_devicefarm"
            }
          }
        },
        "aws-cdk-lib.aws_devopsguru": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DevOpsGuru"
            },
            "java": {
              "package": "software.amazon.awscdk.services.devopsguru"
            },
            "python": {
              "module": "aws_cdk.aws_devopsguru"
            }
          }
        },
        "aws-cdk-lib.aws_directoryservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DirectoryService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.directoryservice"
            },
            "python": {
              "module": "aws_cdk.aws_directoryservice"
            }
          }
        },
        "aws-cdk-lib.aws_dlm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DLM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dlm"
            },
            "python": {
              "module": "aws_cdk.aws_dlm"
            }
          }
        },
        "aws-cdk-lib.aws_dms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dms"
            },
            "python": {
              "module": "aws_cdk.aws_dms"
            }
          }
        },
        "aws-cdk-lib.aws_docdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdb"
            },
            "python": {
              "module": "aws_cdk.aws_docdb"
            }
          }
        },
        "aws-cdk-lib.aws_docdbelastic": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDBElastic"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdbelastic"
            },
            "python": {
              "module": "aws_cdk.aws_docdbelastic"
            }
          }
        },
        "aws-cdk-lib.aws_dynamodb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DynamoDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dynamodb"
            },
            "python": {
              "module": "aws_cdk.aws_dynamodb"
            }
          }
        },
        "aws-cdk-lib.aws_ec2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EC2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ec2"
            },
            "python": {
              "module": "aws_cdk.aws_ec2"
            }
          }
        },
        "aws-cdk-lib.aws_ecr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr"
            },
            "python": {
              "module": "aws_cdk.aws_ecr"
            }
          }
        },
        "aws-cdk-lib.aws_ecr_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ecr.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr.assets"
            },
            "python": {
              "module": "aws_cdk.aws_ecr_assets"
            }
          }
        },
        "aws-cdk-lib.aws_ecs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs"
            },
            "python": {
              "module": "aws_cdk.aws_ecs"
            }
          }
        },
        "aws-cdk-lib.aws_ecs_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_ecs_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_efs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EFS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.efs"
            },
            "python": {
              "module": "aws_cdk.aws_efs"
            }
          }
        },
        "aws-cdk-lib.aws_eks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EKS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eks"
            },
            "python": {
              "module": "aws_cdk.aws_eks"
            }
          }
        },
        "aws-cdk-lib.aws_elasticache": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElastiCache"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticache"
            },
            "python": {
              "module": "aws_cdk.aws_elasticache"
            }
          }
        },
        "aws-cdk-lib.aws_elasticbeanstalk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticBeanstalk"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticbeanstalk"
            },
            "python": {
              "module": "aws_cdk.aws_elasticbeanstalk"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancing": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancing"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancing"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.actions"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_actions"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.targets"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_targets"
            }
          }
        },
        "aws-cdk-lib.aws_elasticsearch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Elasticsearch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticsearch"
            },
            "python": {
              "module": "aws_cdk.aws_elasticsearch"
            }
          }
        },
        "aws-cdk-lib.aws_emr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emr"
            },
            "python": {
              "module": "aws_cdk.aws_emr"
            }
          }
        },
        "aws-cdk-lib.aws_emrcontainers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRContainers"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrcontainers"
            },
            "python": {
              "module": "aws_cdk.aws_emrcontainers"
            }
          }
        },
        "aws-cdk-lib.aws_emrserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrserverless"
            },
            "python": {
              "module": "aws_cdk.aws_emrserverless"
            }
          }
        },
        "aws-cdk-lib.aws_entityresolution": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.EntityResolution"
            },
            "java": {
              "package": "software.amazon.awscdk.services.entityresolution"
            },
            "python": {
              "module": "aws_cdk.aws_entityresolution"
            }
          }
        },
        "aws-cdk-lib.aws_events": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events"
            },
            "python": {
              "module": "aws_cdk.aws_events"
            }
          }
        },
        "aws-cdk-lib.aws_events_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events.targets"
            },
            "python": {
              "module": "aws_cdk.aws_events_targets"
            }
          }
        },
        "aws-cdk-lib.aws_eventschemas": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EventSchemas"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eventschemas"
            },
            "python": {
              "module": "aws_cdk.aws_eventschemas"
            }
          }
        },
        "aws-cdk-lib.aws_evidently": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Evidently"
            },
            "java": {
              "package": "software.amazon.awscdk.services.evidently"
            },
            "python": {
              "module": "aws_cdk.aws_evidently"
            }
          }
        },
        "aws-cdk-lib.aws_finspace": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FinSpace"
            },
            "java": {
              "package": "software.amazon.awscdk.services.finspace"
            },
            "python": {
              "module": "aws_cdk.aws_finspace"
            }
          }
        },
        "aws-cdk-lib.aws_fis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FIS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fis"
            },
            "python": {
              "module": "aws_cdk.aws_fis"
            }
          }
        },
        "aws-cdk-lib.aws_fms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fms"
            },
            "python": {
              "module": "aws_cdk.aws_fms"
            }
          }
        },
        "aws-cdk-lib.aws_forecast": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Forecast"
            },
            "java": {
              "package": "software.amazon.awscdk.services.forecast"
            },
            "python": {
              "module": "aws_cdk.aws_forecast"
            }
          }
        },
        "aws-cdk-lib.aws_frauddetector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FraudDetector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.frauddetector"
            },
            "python": {
              "module": "aws_cdk.aws_frauddetector"
            }
          }
        },
        "aws-cdk-lib.aws_fsx": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FSx"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fsx"
            },
            "python": {
              "module": "aws_cdk.aws_fsx"
            }
          }
        },
        "aws-cdk-lib.aws_gamelift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GameLift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.gamelift"
            },
            "python": {
              "module": "aws_cdk.aws_gamelift"
            }
          }
        },
        "aws-cdk-lib.aws_gameliftstreams": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.GameLiftStreams"
            },
            "java": {
              "package": "software.amazon.awscdk.services.gameliftstreams"
            },
            "python": {
              "module": "aws_cdk.aws_gameliftstreams"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator_endpoints": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator.Endpoints"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator.endpoints"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator_endpoints"
            }
          }
        },
        "aws-cdk-lib.aws_glue": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Glue"
            },
            "java": {
              "package": "software.amazon.awscdk.services.glue"
            },
            "python": {
              "module": "aws_cdk.aws_glue"
            }
          }
        },
        "aws-cdk-lib.aws_grafana": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Grafana"
            },
            "java": {
              "package": "software.amazon.awscdk.services.grafana"
            },
            "python": {
              "module": "aws_cdk.aws_grafana"
            }
          }
        },
        "aws-cdk-lib.aws_greengrass": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Greengrass"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrass"
            },
            "python": {
              "module": "aws_cdk.aws_greengrass"
            }
          }
        },
        "aws-cdk-lib.aws_greengrassv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GreengrassV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrassv2"
            },
            "python": {
              "module": "aws_cdk.aws_greengrassv2"
            }
          }
        },
        "aws-cdk-lib.aws_groundstation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GroundStation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.groundstation"
            },
            "python": {
              "module": "aws_cdk.aws_groundstation"
            }
          }
        },
        "aws-cdk-lib.aws_guardduty": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GuardDuty"
            },
            "java": {
              "package": "software.amazon.awscdk.services.guardduty"
            },
            "python": {
              "module": "aws_cdk.aws_guardduty"
            }
          }
        },
        "aws-cdk-lib.aws_healthimaging": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.HealthImaging"
            },
            "java": {
              "package": "software.amazon.awscdk.services.healthimaging"
            },
            "python": {
              "module": "aws_cdk.aws_healthimaging"
            }
          }
        },
        "aws-cdk-lib.aws_healthlake": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.HealthLake"
            },
            "java": {
              "package": "software.amazon.awscdk.services.healthlake"
            },
            "python": {
              "module": "aws_cdk.aws_healthlake"
            }
          }
        },
        "aws-cdk-lib.aws_iam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iam"
            },
            "python": {
              "module": "aws_cdk.aws_iam"
            }
          }
        },
        "aws-cdk-lib.aws_identitystore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IdentityStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.identitystore"
            },
            "python": {
              "module": "aws_cdk.aws_identitystore"
            }
          }
        },
        "aws-cdk-lib.aws_imagebuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ImageBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.imagebuilder"
            },
            "python": {
              "module": "aws_cdk.aws_imagebuilder"
            }
          }
        },
        "aws-cdk-lib.aws_inspector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Inspector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspector"
            },
            "python": {
              "module": "aws_cdk.aws_inspector"
            }
          }
        },
        "aws-cdk-lib.aws_inspectorv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.InspectorV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspectorv2"
            },
            "python": {
              "module": "aws_cdk.aws_inspectorv2"
            }
          }
        },
        "aws-cdk-lib.aws_internetmonitor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.InternetMonitor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.internetmonitor"
            },
            "python": {
              "module": "aws_cdk.aws_internetmonitor"
            }
          }
        },
        "aws-cdk-lib.aws_invoicing": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Invoicing"
            },
            "java": {
              "package": "software.amazon.awscdk.services.invoicing"
            },
            "python": {
              "module": "aws_cdk.aws_invoicing"
            }
          }
        },
        "aws-cdk-lib.aws_iot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoT"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iot"
            },
            "python": {
              "module": "aws_cdk.aws_iot"
            }
          }
        },
        "aws-cdk-lib.aws_iotanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_iotanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_iotcoredeviceadvisor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTCoreDeviceAdvisor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotcoredeviceadvisor"
            },
            "python": {
              "module": "aws_cdk.aws_iotcoredeviceadvisor"
            }
          }
        },
        "aws-cdk-lib.aws_iotevents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTEvents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotevents"
            },
            "python": {
              "module": "aws_cdk.aws_iotevents"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleethub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleethub"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleethub"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleetwise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleetwise"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleetwise"
            }
          }
        },
        "aws-cdk-lib.aws_iotsitewise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTSiteWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotsitewise"
            },
            "python": {
              "module": "aws_cdk.aws_iotsitewise"
            }
          }
        },
        "aws-cdk-lib.aws_iotthingsgraph": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTThingsGraph"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotthingsgraph"
            },
            "python": {
              "module": "aws_cdk.aws_iotthingsgraph"
            }
          }
        },
        "aws-cdk-lib.aws_iottwinmaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTTwinMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iottwinmaker"
            },
            "python": {
              "module": "aws_cdk.aws_iottwinmaker"
            }
          }
        },
        "aws-cdk-lib.aws_iotwireless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTWireless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotwireless"
            },
            "python": {
              "module": "aws_cdk.aws_iotwireless"
            }
          }
        },
        "aws-cdk-lib.aws_ivs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ivs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ivs"
            },
            "python": {
              "module": "aws_cdk.aws_ivs"
            }
          }
        },
        "aws-cdk-lib.aws_ivschat": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IVSChat"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ivschat"
            },
            "python": {
              "module": "aws_cdk.aws_ivschat"
            }
          }
        },
        "aws-cdk-lib.aws_kafkaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KafkaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kafkaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_kafkaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_kendra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kendra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kendra"
            },
            "python": {
              "module": "aws_cdk.aws_kendra"
            }
          }
        },
        "aws-cdk-lib.aws_kendraranking": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KendraRanking"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kendraranking"
            },
            "python": {
              "module": "aws_cdk.aws_kendraranking"
            }
          }
        },
        "aws-cdk-lib.aws_kinesis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kinesis"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesis"
            },
            "python": {
              "module": "aws_cdk.aws_kinesis"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalyticsv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalyticsV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalyticsv2"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalyticsv2"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisfirehose": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisFirehose"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisfirehose"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisfirehose"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisvideo": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisVideo"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisvideo"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisvideo"
            }
          }
        },
        "aws-cdk-lib.aws_kms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kms"
            },
            "python": {
              "module": "aws_cdk.aws_kms"
            }
          }
        },
        "aws-cdk-lib.aws_lakeformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LakeFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lakeformation"
            },
            "python": {
              "module": "aws_cdk.aws_lakeformation"
            }
          }
        },
        "aws-cdk-lib.aws_lambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda"
            },
            "python": {
              "module": "aws_cdk.aws_lambda"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_event_sources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.EventSources"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.eventsources"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_event_sources"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_nodejs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Nodejs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.nodejs"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_nodejs"
            }
          }
        },
        "aws-cdk-lib.aws_launchwizard": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.LaunchWizard"
            },
            "java": {
              "package": "software.amazon.awscdk.services.launchwizard"
            },
            "python": {
              "module": "aws_cdk.aws_launchwizard"
            }
          }
        },
        "aws-cdk-lib.aws_lex": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lex"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lex"
            },
            "python": {
              "module": "aws_cdk.aws_lex"
            }
          }
        },
        "aws-cdk-lib.aws_licensemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LicenseManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.licensemanager"
            },
            "python": {
              "module": "aws_cdk.aws_licensemanager"
            }
          }
        },
        "aws-cdk-lib.aws_lightsail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lightsail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lightsail"
            },
            "python": {
              "module": "aws_cdk.aws_lightsail"
            }
          }
        },
        "aws-cdk-lib.aws_location": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Location"
            },
            "java": {
              "package": "software.amazon.awscdk.services.location"
            },
            "python": {
              "module": "aws_cdk.aws_location"
            }
          }
        },
        "aws-cdk-lib.aws_logs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs"
            },
            "python": {
              "module": "aws_cdk.aws_logs"
            }
          }
        },
        "aws-cdk-lib.aws_logs_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_logs_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutequipment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutEquipment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutequipment"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutequipment"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutmetrics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutMetrics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutmetrics"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutmetrics"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutvision": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutVision"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutvision"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutvision"
            }
          }
        },
        "aws-cdk-lib.aws_m2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.M2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.m2"
            },
            "python": {
              "module": "aws_cdk.aws_m2"
            }
          }
        },
        "aws-cdk-lib.aws_macie": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Macie"
            },
            "java": {
              "package": "software.amazon.awscdk.services.macie"
            },
            "python": {
              "module": "aws_cdk.aws_macie"
            }
          }
        },
        "aws-cdk-lib.aws_managedblockchain": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ManagedBlockchain"
            },
            "java": {
              "package": "software.amazon.awscdk.services.managedblockchain"
            },
            "python": {
              "module": "aws_cdk.aws_managedblockchain"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconvert": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConvert"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconvert"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconvert"
            }
          }
        },
        "aws-cdk-lib.aws_medialive": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaLive"
            },
            "java": {
              "package": "software.amazon.awscdk.services.medialive"
            },
            "python": {
              "module": "aws_cdk.aws_medialive"
            }
          }
        },
        "aws-cdk-lib.aws_mediapackage": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaPackage"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediapackage"
            },
            "python": {
              "module": "aws_cdk.aws_mediapackage"
            }
          }
        },
        "aws-cdk-lib.aws_mediapackagev2": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.MediaPackageV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediapackagev2"
            },
            "python": {
              "module": "aws_cdk.aws_mediapackagev2"
            }
          }
        },
        "aws-cdk-lib.aws_mediastore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediastore"
            },
            "python": {
              "module": "aws_cdk.aws_mediastore"
            }
          }
        },
        "aws-cdk-lib.aws_mediatailor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaTailor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediatailor"
            },
            "python": {
              "module": "aws_cdk.aws_mediatailor"
            }
          }
        },
        "aws-cdk-lib.aws_memorydb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MemoryDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.memorydb"
            },
            "python": {
              "module": "aws_cdk.aws_memorydb"
            }
          }
        },
        "aws-cdk-lib.aws_msk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MSK"
            },
            "java": {
              "package": "software.amazon.awscdk.services.msk"
            },
            "python": {
              "module": "aws_cdk.aws_msk"
            }
          }
        },
        "aws-cdk-lib.aws_mwaa": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MWAA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mwaa"
            },
            "python": {
              "module": "aws_cdk.aws_mwaa"
            }
          }
        },
        "aws-cdk-lib.aws_neptune": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Neptune"
            },
            "java": {
              "package": "software.amazon.awscdk.services.neptune"
            },
            "python": {
              "module": "aws_cdk.aws_neptune"
            }
          }
        },
        "aws-cdk-lib.aws_neptunegraph": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.NeptuneGraph"
            },
            "java": {
              "package": "software.amazon.awscdk.services.neptunegraph"
            },
            "python": {
              "module": "aws_cdk.aws_neptunegraph"
            }
          }
        },
        "aws-cdk-lib.aws_networkfirewall": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkFirewall"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkfirewall"
            },
            "python": {
              "module": "aws_cdk.aws_networkfirewall"
            }
          }
        },
        "aws-cdk-lib.aws_networkmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkmanager"
            },
            "python": {
              "module": "aws_cdk.aws_networkmanager"
            }
          }
        },
        "aws-cdk-lib.aws_nimblestudio": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NimbleStudio"
            },
            "java": {
              "package": "software.amazon.awscdk.services.nimblestudio"
            },
            "python": {
              "module": "aws_cdk.aws_nimblestudio"
            }
          }
        },
        "aws-cdk-lib.aws_notifications": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Notifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.notifications"
            },
            "python": {
              "module": "aws_cdk.aws_notifications"
            }
          }
        },
        "aws-cdk-lib.aws_notificationscontacts": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.NotificationsContacts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.notificationscontacts"
            },
            "python": {
              "module": "aws_cdk.aws_notificationscontacts"
            }
          }
        },
        "aws-cdk-lib.aws_oam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Oam"
            },
            "java": {
              "package": "software.amazon.awscdk.services.oam"
            },
            "python": {
              "module": "aws_cdk.aws_oam"
            }
          }
        },
        "aws-cdk-lib.aws_omics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Omics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.omics"
            },
            "python": {
              "module": "aws_cdk.aws_omics"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchserverless"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchserverless"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchservice"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchservice"
            }
          }
        },
        "aws-cdk-lib.aws_opsworks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworks"
            },
            "python": {
              "module": "aws_cdk.aws_opsworks"
            }
          }
        },
        "aws-cdk-lib.aws_opsworkscm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorksCM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworkscm"
            },
            "python": {
              "module": "aws_cdk.aws_opsworkscm"
            }
          }
        },
        "aws-cdk-lib.aws_organizations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Organizations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.organizations"
            },
            "python": {
              "module": "aws_cdk.aws_organizations"
            }
          }
        },
        "aws-cdk-lib.aws_osis": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.OSIS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.osis"
            },
            "python": {
              "module": "aws_cdk.aws_osis"
            }
          }
        },
        "aws-cdk-lib.aws_panorama": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Panorama"
            },
            "java": {
              "package": "software.amazon.awscdk.services.panorama"
            },
            "python": {
              "module": "aws_cdk.aws_panorama"
            }
          }
        },
        "aws-cdk-lib.aws_paymentcryptography": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.PaymentCryptography"
            },
            "java": {
              "package": "software.amazon.awscdk.services.paymentcryptography"
            },
            "python": {
              "module": "aws_cdk.aws_paymentcryptography"
            }
          }
        },
        "aws-cdk-lib.aws_pcaconnectorad": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.PCAConnectorAD"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pcaconnectorad"
            },
            "python": {
              "module": "aws_cdk.aws_pcaconnectorad"
            }
          }
        },
        "aws-cdk-lib.aws_pcaconnectorscep": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.PCAConnectorSCEP"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pcaconnectorscep"
            },
            "python": {
              "module": "aws_cdk.aws_pcaconnectorscep"
            }
          }
        },
        "aws-cdk-lib.aws_pcs": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.PCS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pcs"
            },
            "python": {
              "module": "aws_cdk.aws_pcs"
            }
          }
        },
        "aws-cdk-lib.aws_personalize": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Personalize"
            },
            "java": {
              "package": "software.amazon.awscdk.services.personalize"
            },
            "python": {
              "module": "aws_cdk.aws_personalize"
            }
          }
        },
        "aws-cdk-lib.aws_pinpoint": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pinpoint"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpoint"
            },
            "python": {
              "module": "aws_cdk.aws_pinpoint"
            }
          }
        },
        "aws-cdk-lib.aws_pinpointemail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.PinpointEmail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpointemail"
            },
            "python": {
              "module": "aws_cdk.aws_pinpointemail"
            }
          }
        },
        "aws-cdk-lib.aws_pipes": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pipes"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pipes"
            },
            "python": {
              "module": "aws_cdk.aws_pipes"
            }
          }
        },
        "aws-cdk-lib.aws_proton": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Proton"
            },
            "java": {
              "package": "software.amazon.awscdk.services.proton"
            },
            "python": {
              "module": "aws_cdk.aws_proton"
            }
          }
        },
        "aws-cdk-lib.aws_qbusiness": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.QBusiness"
            },
            "java": {
              "package": "software.amazon.awscdk.services.qbusiness"
            },
            "python": {
              "module": "aws_cdk.aws_qbusiness"
            }
          }
        },
        "aws-cdk-lib.aws_qldb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QLDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.qldb"
            },
            "python": {
              "module": "aws_cdk.aws_qldb"
            }
          }
        },
        "aws-cdk-lib.aws_quicksight": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QuickSight"
            },
            "java": {
              "package": "software.amazon.awscdk.services.quicksight"
            },
            "python": {
              "module": "aws_cdk.aws_quicksight"
            }
          }
        },
        "aws-cdk-lib.aws_ram": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ram"
            },
            "python": {
              "module": "aws_cdk.aws_ram"
            }
          }
        },
        "aws-cdk-lib.aws_rbin": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Rbin"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rbin"
            },
            "python": {
              "module": "aws_cdk.aws_rbin"
            }
          }
        },
        "aws-cdk-lib.aws_rds": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RDS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rds"
            },
            "python": {
              "module": "aws_cdk.aws_rds"
            }
          }
        },
        "aws-cdk-lib.aws_redshift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Redshift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshift"
            },
            "python": {
              "module": "aws_cdk.aws_redshift"
            }
          }
        },
        "aws-cdk-lib.aws_redshiftserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RedshiftServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshiftserverless"
            },
            "python": {
              "module": "aws_cdk.aws_redshiftserverless"
            }
          }
        },
        "aws-cdk-lib.aws_refactorspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RefactorSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.refactorspaces"
            },
            "python": {
              "module": "aws_cdk.aws_refactorspaces"
            }
          }
        },
        "aws-cdk-lib.aws_rekognition": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Rekognition"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rekognition"
            },
            "python": {
              "module": "aws_cdk.aws_rekognition"
            }
          }
        },
        "aws-cdk-lib.aws_resiliencehub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResilienceHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resiliencehub"
            },
            "python": {
              "module": "aws_cdk.aws_resiliencehub"
            }
          }
        },
        "aws-cdk-lib.aws_resourceexplorer2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceExplorer2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourceexplorer2"
            },
            "python": {
              "module": "aws_cdk.aws_resourceexplorer2"
            }
          }
        },
        "aws-cdk-lib.aws_resourcegroups": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceGroups"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourcegroups"
            },
            "python": {
              "module": "aws_cdk.aws_resourcegroups"
            }
          }
        },
        "aws-cdk-lib.aws_robomaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RoboMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.robomaker"
            },
            "python": {
              "module": "aws_cdk.aws_robomaker"
            }
          }
        },
        "aws-cdk-lib.aws_rolesanywhere": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RolesAnywhere"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rolesanywhere"
            },
            "python": {
              "module": "aws_cdk.aws_rolesanywhere"
            }
          }
        },
        "aws-cdk-lib.aws_route53": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53"
            },
            "python": {
              "module": "aws_cdk.aws_route53"
            }
          }
        },
        "aws-cdk-lib.aws_route53_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_route53_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_route53_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.targets"
            },
            "python": {
              "module": "aws_cdk.aws_route53_targets"
            }
          }
        },
        "aws-cdk-lib.aws_route53profiles": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Route53Profiles"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53profiles"
            },
            "python": {
              "module": "aws_cdk.aws_route53profiles"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoverycontrol": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryControl"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoverycontrol"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoverycontrol"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoveryreadiness": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryReadiness"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoveryreadiness"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoveryreadiness"
            }
          }
        },
        "aws-cdk-lib.aws_route53resolver": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53Resolver"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53resolver"
            },
            "python": {
              "module": "aws_cdk.aws_route53resolver"
            }
          }
        },
        "aws-cdk-lib.aws_rum": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RUM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rum"
            },
            "python": {
              "module": "aws_cdk.aws_rum"
            }
          }
        },
        "aws-cdk-lib.aws_s3": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3"
            },
            "python": {
              "module": "aws_cdk.aws_s3"
            }
          }
        },
        "aws-cdk-lib.aws_s3_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.assets"
            },
            "python": {
              "module": "aws_cdk.aws_s3_assets"
            }
          }
        },
        "aws-cdk-lib.aws_s3_deployment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Deployment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.deployment"
            },
            "python": {
              "module": "aws_cdk.aws_s3_deployment"
            }
          }
        },
        "aws-cdk-lib.aws_s3_notifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Notifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.notifications"
            },
            "python": {
              "module": "aws_cdk.aws_s3_notifications"
            }
          }
        },
        "aws-cdk-lib.aws_s3express": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.S3Express"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3express"
            },
            "python": {
              "module": "aws_cdk.aws_s3express"
            }
          }
        },
        "aws-cdk-lib.aws_s3objectlambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3ObjectLambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3objectlambda"
            },
            "python": {
              "module": "aws_cdk.aws_s3objectlambda"
            }
          }
        },
        "aws-cdk-lib.aws_s3outposts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3Outposts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3outposts"
            },
            "python": {
              "module": "aws_cdk.aws_s3outposts"
            }
          }
        },
        "aws-cdk-lib.aws_s3tables": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.S3Tables"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3tables"
            },
            "python": {
              "module": "aws_cdk.aws_s3tables"
            }
          }
        },
        "aws-cdk-lib.aws_sagemaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Sagemaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sagemaker"
            },
            "python": {
              "module": "aws_cdk.aws_sagemaker"
            }
          }
        },
        "aws-cdk-lib.aws_sam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sam"
            },
            "python": {
              "module": "aws_cdk.aws_sam"
            }
          }
        },
        "aws-cdk-lib.aws_scheduler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Scheduler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.scheduler"
            },
            "python": {
              "module": "aws_cdk.aws_scheduler"
            }
          }
        },
        "aws-cdk-lib.aws_scheduler_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Scheduler.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.scheduler.targets"
            },
            "python": {
              "module": "aws_cdk.aws_scheduler_targets"
            }
          }
        },
        "aws-cdk-lib.aws_sdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sdb"
            },
            "python": {
              "module": "aws_cdk.aws_sdb"
            }
          }
        },
        "aws-cdk-lib.aws_secretsmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecretsManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.secretsmanager"
            },
            "python": {
              "module": "aws_cdk.aws_secretsmanager"
            }
          }
        },
        "aws-cdk-lib.aws_securityhub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecurityHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.securityhub"
            },
            "python": {
              "module": "aws_cdk.aws_securityhub"
            }
          }
        },
        "aws-cdk-lib.aws_securitylake": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.SecurityLake"
            },
            "java": {
              "package": "software.amazon.awscdk.services.securitylake"
            },
            "python": {
              "module": "aws_cdk.aws_securitylake"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalog": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalog"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalog"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalog"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalogappregistry": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalogappregistry"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalogappregistry"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalogappregistry"
            }
          }
        },
        "aws-cdk-lib.aws_servicediscovery": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ServiceDiscovery"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicediscovery"
            },
            "python": {
              "module": "aws_cdk.aws_servicediscovery"
            }
          }
        },
        "aws-cdk-lib.aws_ses": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses"
            },
            "python": {
              "module": "aws_cdk.aws_ses"
            }
          }
        },
        "aws-cdk-lib.aws_ses_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses.actions"
            },
            "python": {
              "module": "aws_cdk.aws_ses_actions"
            }
          }
        },
        "aws-cdk-lib.aws_shield": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Shield"
            },
            "java": {
              "package": "software.amazon.awscdk.services.shield"
            },
            "python": {
              "module": "aws_cdk.aws_shield"
            }
          }
        },
        "aws-cdk-lib.aws_signer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Signer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.signer"
            },
            "python": {
              "module": "aws_cdk.aws_signer"
            }
          }
        },
        "aws-cdk-lib.aws_simspaceweaver": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SimSpaceWeaver"
            },
            "java": {
              "package": "software.amazon.awscdk.services.simspaceweaver"
            },
            "python": {
              "module": "aws_cdk.aws_simspaceweaver"
            }
          }
        },
        "aws-cdk-lib.aws_sns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns"
            },
            "python": {
              "module": "aws_cdk.aws_sns"
            }
          }
        },
        "aws-cdk-lib.aws_sns_subscriptions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS.Subscriptions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns.subscriptions"
            },
            "python": {
              "module": "aws_cdk.aws_sns_subscriptions"
            }
          }
        },
        "aws-cdk-lib.aws_sqs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SQS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sqs"
            },
            "python": {
              "module": "aws_cdk.aws_sqs"
            }
          }
        },
        "aws-cdk-lib.aws_ssm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssm"
            },
            "python": {
              "module": "aws_cdk.aws_ssm"
            }
          }
        },
        "aws-cdk-lib.aws_ssmcontacts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMContacts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmcontacts"
            },
            "python": {
              "module": "aws_cdk.aws_ssmcontacts"
            }
          }
        },
        "aws-cdk-lib.aws_ssmincidents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMIncidents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmincidents"
            },
            "python": {
              "module": "aws_cdk.aws_ssmincidents"
            }
          }
        },
        "aws-cdk-lib.aws_ssmquicksetup": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.SSMQuickSetup"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmquicksetup"
            },
            "python": {
              "module": "aws_cdk.aws_ssmquicksetup"
            }
          }
        },
        "aws-cdk-lib.aws_sso": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSO"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sso"
            },
            "python": {
              "module": "aws_cdk.aws_sso"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions_tasks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions.Tasks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions.tasks"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions_tasks"
            }
          }
        },
        "aws-cdk-lib.aws_supportapp": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SupportApp"
            },
            "java": {
              "package": "software.amazon.awscdk.services.supportapp"
            },
            "python": {
              "module": "aws_cdk.aws_supportapp"
            }
          }
        },
        "aws-cdk-lib.aws_synthetics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Synthetics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.synthetics"
            },
            "python": {
              "module": "aws_cdk.aws_synthetics"
            }
          }
        },
        "aws-cdk-lib.aws_systemsmanagersap": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SystemsManagerSAP"
            },
            "java": {
              "package": "software.amazon.awscdk.services.systemsmanagersap"
            },
            "python": {
              "module": "aws_cdk.aws_systemsmanagersap"
            }
          }
        },
        "aws-cdk-lib.aws_timestream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Timestream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.timestream"
            },
            "python": {
              "module": "aws_cdk.aws_timestream"
            }
          }
        },
        "aws-cdk-lib.aws_transfer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Transfer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.transfer"
            },
            "python": {
              "module": "aws_cdk.aws_transfer"
            }
          }
        },
        "aws-cdk-lib.aws_verifiedpermissions": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.VerifiedPermissions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.verifiedpermissions"
            },
            "python": {
              "module": "aws_cdk.aws_verifiedpermissions"
            }
          }
        },
        "aws-cdk-lib.aws_voiceid": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.VoiceID"
            },
            "java": {
              "package": "software.amazon.awscdk.services.voiceid"
            },
            "python": {
              "module": "aws_cdk.aws_voiceid"
            }
          }
        },
        "aws-cdk-lib.aws_vpclattice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.VpcLattice"
            },
            "java": {
              "package": "software.amazon.awscdk.services.vpclattice"
            },
            "python": {
              "module": "aws_cdk.aws_vpclattice"
            }
          }
        },
        "aws-cdk-lib.aws_waf": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAF"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf"
            },
            "python": {
              "module": "aws_cdk.aws_waf"
            }
          }
        },
        "aws-cdk-lib.aws_wafregional": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFRegional"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf.regional"
            },
            "python": {
              "module": "aws_cdk.aws_wafregional"
            }
          }
        },
        "aws-cdk-lib.aws_wafv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wafv2"
            },
            "python": {
              "module": "aws_cdk.aws_wafv2"
            }
          }
        },
        "aws-cdk-lib.aws_wisdom": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Wisdom"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wisdom"
            },
            "python": {
              "module": "aws_cdk.aws_wisdom"
            }
          }
        },
        "aws-cdk-lib.aws_workspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WorkSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspaces"
            },
            "python": {
              "module": "aws_cdk.aws_workspaces"
            }
          }
        },
        "aws-cdk-lib.aws_workspacesthinclient": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.WorkSpacesThinClient"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspacesthinclient"
            },
            "python": {
              "module": "aws_cdk.aws_workspacesthinclient"
            }
          }
        },
        "aws-cdk-lib.aws_workspacesweb": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.WorkSpacesWeb"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspacesweb"
            },
            "python": {
              "module": "aws_cdk.aws_workspacesweb"
            }
          }
        },
        "aws-cdk-lib.aws_xray": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.XRay"
            },
            "java": {
              "package": "software.amazon.awscdk.services.xray"
            },
            "python": {
              "module": "aws_cdk.aws_xray"
            }
          }
        },
        "aws-cdk-lib.cloud_assembly_schema": {},
        "aws-cdk-lib.cloudformation_include": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CloudFormation.Include"
            },
            "java": {
              "package": "software.amazon.awscdk.cloudformation.include"
            },
            "python": {
              "module": "aws_cdk.cloudformation_include"
            }
          }
        },
        "aws-cdk-lib.custom_resources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CustomResources"
            },
            "java": {
              "package": "software.amazon.awscdk.customresources"
            },
            "python": {
              "module": "aws_cdk.custom_resources"
            }
          }
        },
        "aws-cdk-lib.cx_api": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CXAPI"
            },
            "java": {
              "package": "software.amazon.awscdk.cxapi"
            },
            "python": {
              "module": "aws_cdk.cx_api"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_awscli": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.AwsCli"
            },
            "java": {
              "package": "software.amazon.awscdk.lambdalayer.awscli"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_awscli"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_node_proxy_agent": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.NodeProxyAgent"
            },
            "java": {
              "package": "software.amazon.awscdk.lambda.layer.node.proxy.agent"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_node_proxy_agent"
            }
          }
        },
        "aws-cdk-lib.pipelines": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Pipelines"
            },
            "java": {
              "package": "software.amazon.awscdk.pipelines"
            },
            "python": {
              "module": "aws_cdk.pipelines"
            }
          }
        },
        "aws-cdk-lib.region_info": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.RegionInfo"
            },
            "java": {
              "package": "software.amazon.awscdk.regioninfo"
            },
            "python": {
              "module": "aws_cdk.region_info"
            }
          }
        },
        "aws-cdk-lib.triggers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Triggers"
            },
            "java": {
              "package": "software.amazon.awscdk.triggers"
            },
            "python": {
              "module": "aws_cdk.triggers"
            }
          }
        }
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK.Lib"
        },
        "go": {
          "moduleName": "github.com/aws/aws-cdk-go",
          "packageName": "awscdk"
        },
        "java": {
          "maven": {
            "artifactId": "aws-cdk-lib",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk"
        },
        "js": {
          "npm": "aws-cdk-lib"
        },
        "python": {
          "distName": "aws-cdk-lib",
          "module": "aws_cdk"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::EKS",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "5.7.10 (build 5114b23)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "AWS::EKS",
    "aws-eks"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-eks-v2-alpha",
  "readme": {
    "markdown": "# Amazon EKS V2 Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nThe eks-v2-alpha module is a rewrite of the existing aws-eks module (https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks-readme.html). This new iteration leverages native L1 CFN resources, replacing the previous custom resource approach for creating EKS clusters and Fargate Profiles.\n\nCompared to the original EKS module, it has the following major changes:\n\n- Use native L1 AWS::EKS::Cluster resource to replace custom resource Custom::AWSCDK-EKS-Cluster\n- Use native L1 AWS::EKS::FargateProfile resource to replace custom resource Custom::AWSCDK-EKS-FargateProfile\n- Kubectl Handler will not be created by default. It will only be created if users specify it.\n- Remove AwsAuth construct. Permissions to the cluster will be managed by Access Entry.\n- Remove the limit of 1 cluster per stack\n- Remove nested stacks\n- API changes to make them more ergonomic.\n\n## Quick start\n\nHere is the minimal example of defining an AWS EKS cluster\n\n```ts\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\n## Architecture\n\n```text\n +-----------------------------------------------+\n | EKS Cluster      | kubectl |  |\n | -----------------|<--------+| Kubectl Handler |\n | AWS::EKS::Cluster             (Optional)      |\n | +--------------------+    +-----------------+ |\n | |                    |    |                 | |\n | | Managed Node Group |    | Fargate Profile | |\n | |                    |    |                 | |\n | +--------------------+    +-----------------+ |\n +-----------------------------------------------+\n    ^\n    | connect self managed capacity\n    +\n +--------------------+\n | Auto Scaling Group |\n +--------------------+\n```\n\nIn a nutshell:\n\n- EKS Cluster - The cluster endpoint created by EKS.\n- Managed Node Group - EC2 worker nodes managed by EKS.\n- Fargate Profile - Fargate worker nodes managed by EKS.\n- Auto Scaling Group - EC2 worker nodes managed by the user.\n- Kubectl Handler (Optional) - Custom resource (i.e Lambda Function) for invoking kubectl commands on the\n  cluster - created by CDK\n\n## Provisioning cluster\n\nCreating a new cluster is done using the `Cluster` constructs. The only required property is the kubernetes version.\n\n```ts\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\nYou can also use `FargateCluster` to provision a cluster that uses only fargate workers.\n\n```ts\nnew eks.FargateCluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\n**Note: Unlike the previous EKS cluster, `Kubectl Handler` will not\nbe created by default. It will only be deployed when `kubectlProviderOptions`\nproperty is used.**\n\n```ts\nimport { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nnew eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n  kubectlProviderOptions: {\n    kubectlLayer: new KubectlV32Layer(this, 'kubectl'),\n  }\n});\n```\n\n## EKS Auto Mode\n\n[Amazon EKS Auto Mode](https://aws.amazon.com/eks/auto-mode/) extends AWS management of Kubernetes clusters beyond the cluster itself, allowing AWS to set up and manage the infrastructure that enables the smooth operation of your workloads.\n\n### Using Auto Mode\n\nWhile `aws-eks` uses `DefaultCapacityType.NODEGROUP` by default, `aws-eks-v2` uses `DefaultCapacityType.AUTOMODE` as the default capacity type.\n\nAuto Mode is enabled by default when creating a new cluster without specifying any capacity-related properties:\n\n```ts\n// Create EKS cluster with Auto Mode implicitly enabled\nconst cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\nYou can also explicitly enable Auto Mode using `defaultCapacityType`:\n\n```ts\n// Create EKS cluster with Auto Mode explicitly enabled\nconst cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n});\n```\n\n### Node Pools\n\nWhen Auto Mode is enabled, the cluster comes with two default node pools:\n\n- `system`: For running system components and add-ons\n- `general-purpose`: For running your application workloads\n\nThese node pools are managed automatically by EKS. You can configure which node pools to enable through the `compute` property:\n\n```ts\nconst cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n  compute: {\n    nodePools: ['system', 'general-purpose'],\n  },\n});\n```\n\nFor more information, see [Create a Node Pool for EKS Auto Mode](https://docs.aws.amazon.com/eks/latest/userguide/create-node-pool.html).\n\n### Disabling Default Node Pools\n\nYou can disable the default node pools entirely by setting an empty array for `nodePools`. This is useful when you want to use Auto Mode features but manage your compute resources separately:\n\n```ts\nconst cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n  compute: {\n    nodePools: [], // Disable default node pools\n  },\n});\n```\n\nWhen node pools are disabled this way, no IAM role will be created for the node pools, preventing deployment failures that would otherwise occur when a role is created without any node pools.\n\n### Node Groups as the default capacity type\n\nIf you prefer to manage your own node groups instead of using Auto Mode, you can use the traditional node group approach by specifying `defaultCapacityType` as `NODEGROUP`:\n\n```ts\n// Create EKS cluster with traditional managed node group\nconst cluster = new eks.Cluster(this, 'EksCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.NODEGROUP,\n  defaultCapacity: 3, // Number of instances\n  defaultCapacityInstance: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.LARGE),\n});\n```\n\nYou can also create a cluster with no initial capacity and add node groups later:\n\n```ts\nconst cluster = new eks.Cluster(this, 'EksCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.NODEGROUP,\n  defaultCapacity: 0,\n});\n\n// Add node groups as needed\ncluster.addNodegroupCapacity('custom-node-group', {\n  minSize: 1,\n  maxSize: 3,\n  instanceTypes: [ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.LARGE)],\n});\n```\n\nRead [Managed node groups](#managed-node-groups) for more information on how to add node groups to the cluster.\n\n### Mixed with Auto Mode and Node Groups\n\nYou can combine Auto Mode with traditional node groups for specific workload requirements:\n\n```ts\nconst cluster = new eks.Cluster(this, 'Cluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n  compute: {\n    nodePools: ['system', 'general-purpose'],\n  },\n});\n\n// Add specialized node group for specific workloads\ncluster.addNodegroupCapacity('specialized-workload', {\n  minSize: 1,\n  maxSize: 3,\n  instanceTypes: [ec2.InstanceType.of(ec2.InstanceClass.C5, ec2.InstanceSize.XLARGE)],\n  labels: {\n    workload: 'specialized',\n  },\n});\n```\n\n### Important Notes\n\n1. Auto Mode and traditional capacity management are mutually exclusive at the default capacity level. You cannot opt in to Auto Mode and specify `defaultCapacity` or `defaultCapacityInstance`.\n\n2. When Auto Mode is enabled:\n   - The cluster will automatically manage compute resources\n   - Node pools cannot be modified, only enabled or disabled\n   - EKS will handle scaling and management of the node pools\n\n3. Auto Mode requires specific IAM permissions. The construct will automatically attach the required managed policies.\n\n### Managed node groups\n\nAmazon EKS managed node groups automate the provisioning and lifecycle management of nodes (Amazon EC2 instances) for Amazon EKS Kubernetes clusters.\nWith Amazon EKS managed node groups, you don't need to separately provision or register the Amazon EC2 instances that provide compute capacity to run your Kubernetes applications. You can create, update, or terminate nodes for your cluster with a single operation. Nodes run using the latest Amazon EKS optimized AMIs in your AWS account while node updates and terminations gracefully drain nodes to ensure that your applications stay available.\n\n> For more details visit [Amazon EKS Managed Node Groups](https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html).\n\nBy default, when using `DefaultCapacityType.NODEGROUP`, this library will allocate a managed node group with 2 *m5.large* instances (this instance type suits most common use-cases, and is good value for money).\n\n```ts\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.NODEGROUP,\n});\n```\n\nAt cluster instantiation time, you can customize the number of instances and their type:\n\n```ts\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.NODEGROUP,\n  defaultCapacity: 5,\n  defaultCapacityInstance: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.SMALL),\n});\n```\n\nTo access the node group that was created on your behalf, you can use `cluster.defaultNodegroup`.\n\nAdditional customizations are available post instantiation. To apply them, set the default capacity to 0, and use the `cluster.addNodegroupCapacity` method:\n\n```ts\nconst cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.NODEGROUP,\n  defaultCapacity: 0,\n});\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  minSize: 4,\n  diskSize: 100,\n});\n```\n\n### Fargate profiles\n\nAWS Fargate is a technology that provides on-demand, right-sized compute\ncapacity for containers. With AWS Fargate, you no longer have to provision,\nconfigure, or scale groups of virtual machines to run containers. This removes\nthe need to choose server types, decide when to scale your node groups, or\noptimize cluster packing.\n\nYou can control which pods start on Fargate and how they run with Fargate\nProfiles, which are defined as part of your Amazon EKS cluster.\n\nSee [Fargate Considerations](https://docs.aws.amazon.com/eks/latest/userguide/fargate.html#fargate-considerations) in the AWS EKS User Guide.\n\nYou can add Fargate Profiles to any EKS cluster defined in your CDK app\nthrough the `addFargateProfile()` method. The following example adds a profile\nthat will match all pods from the \"default\" namespace:\n\n```ts\ndeclare const cluster: eks.Cluster;\ncluster.addFargateProfile('MyProfile', {\n  selectors: [ { namespace: 'default' } ],\n});\n```\n\nYou can also directly use the `FargateProfile` construct to create profiles under different scopes:\n\n```ts\ndeclare const cluster: eks.Cluster;\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});\n```\n\nTo create an EKS cluster that **only** uses Fargate capacity, you can use `FargateCluster`.\nThe following code defines an Amazon EKS cluster with a default Fargate Profile that matches all pods from the \"kube-system\" and \"default\" namespaces. It is also configured to [run CoreDNS on Fargate](https://docs.aws.amazon.com/eks/latest/userguide/fargate-getting-started.html#fargate-gs-coredns).\n\n```ts\nconst cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\n`FargateCluster` will create a default `FargateProfile` which can be accessed via the cluster's `defaultProfile` property. The created profile can also be customized by passing options as with `addFargateProfile`.\n\n**NOTE**: Classic Load Balancers and Network Load Balancers are not supported on\npods running on Fargate. For ingress, we recommend that you use the [ALB Ingress\nController](https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html)\non Amazon EKS (minimum version v1.1.4).\n\n### Endpoint Access\n\nWhen you create a new cluster, Amazon EKS creates an endpoint for the managed Kubernetes API server that you use to communicate with your cluster (using Kubernetes management tools such as `kubectl`)\n\nYou can configure the [cluster endpoint access](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) by using the `endpointAccess` property:\n\n```ts\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n  endpointAccess: eks.EndpointAccess.PRIVATE, // No access outside of your VPC.\n});\n```\n\nThe default value is `eks.EndpointAccess.PUBLIC_AND_PRIVATE`. Which means the cluster endpoint is accessible from outside of your VPC, but worker node traffic and `kubectl` commands issued by this library stay within your VPC.\n\n### Alb Controller\n\nSome Kubernetes resources are commonly implemented on AWS with the help of the [ALB Controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/).\n\nFrom the docs:\n\n> AWS Load Balancer Controller is a controller to help manage Elastic Load Balancers for a Kubernetes cluster.\n>\n> - It satisfies Kubernetes Ingress resources by provisioning Application Load Balancers.\n> - It satisfies Kubernetes Service resources by provisioning Network Load Balancers.\n\nTo deploy the controller on your EKS cluster, configure the `albController` property:\n\n```ts\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  albController: {\n    version: eks.AlbControllerVersion.V2_8_2,\n  },\n});\n```\n\nThe `albController` requires `defaultCapacity` or at least one nodegroup. If there's no `defaultCapacity` or available\nnodegroup for the cluster, the `albController` deployment would fail.\n\nQuerying the controller pods should look something like this:\n\n```console\n❯ kubectl get pods -n kube-system\nNAME                                            READY   STATUS    RESTARTS   AGE\naws-load-balancer-controller-76bd6c7586-d929p   1/1     Running   0          109m\naws-load-balancer-controller-76bd6c7586-fqxph   1/1     Running   0          109m\n...\n...\n```\n\nEvery Kubernetes manifest that utilizes the ALB Controller is effectively dependant on the controller.\nIf the controller is deleted before the manifest, it might result in dangling ELB/ALB resources.\nCurrently, the EKS construct library does not detect such dependencies, and they should be done explicitly.\n\nFor example:\n\n```ts\ndeclare const cluster: eks.Cluster;\nconst manifest = cluster.addManifest('manifest', {/* ... */});\nif (cluster.albController) {\n  manifest.node.addDependency(cluster.albController);\n}\n```\n\nYou can specify the VPC of the cluster using the `vpc` and `vpcSubnets` properties:\n\n```ts\ndeclare const vpc: ec2.Vpc;\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  vpc,\n  vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS }],\n});\n```\n\nIf you do not specify a VPC, one will be created on your behalf, which you can then access via `cluster.vpc`. The cluster VPC will be associated to any EKS managed capacity (i.e Managed Node Groups and Fargate Profiles).\n\nPlease note that the `vpcSubnets` property defines the subnets where EKS will place the _control plane_ ENIs. To choose\nthe subnets where EKS will place the worker nodes, please refer to the **Provisioning clusters** section above.\n\nIf you allocate self managed capacity, you can specify which subnets should the auto-scaling group use:\n\n```ts\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('nodes', {\n  vpcSubnets: { subnets: vpc.privateSubnets },\n  instanceType: new ec2.InstanceType('t2.medium'),\n});\n```\n\nThere is an additional components you might want to provision within the VPC.\n\nThe `KubectlHandler` is a Lambda function responsible to issuing `kubectl` and `helm` commands against the cluster when you add resource manifests to the cluster.\n\nThe handler association to the VPC is derived from the `endpointAccess` configuration. The rule of thumb is: *If the cluster VPC can be associated, it will be*.\n\nBreaking this down, it means that if the endpoint exposes private access (via `EndpointAccess.PRIVATE` or `EndpointAccess.PUBLIC_AND_PRIVATE`), and the VPC contains **private** subnets, the Lambda function will be provisioned inside the VPC and use the private subnets to interact with the cluster. This is the common use-case.\n\nIf the endpoint does not expose private access (via `EndpointAccess.PUBLIC`) **or** the VPC does not contain private subnets, the function will not be provisioned within the VPC.\n\nIf your use-case requires control over the IAM role that the KubeCtl Handler assumes, a custom role can be passed through the ClusterProps (as `kubectlLambdaRole`) of the EKS Cluster construct.\n\n### Kubectl Support\n\nYou can choose to have CDK create a `Kubectl Handler` - a Python Lambda Function to\napply k8s manifests using `kubectl apply`. This handler will not be created by default.\n\nTo create a `Kubectl Handler`, use `kubectlProviderOptions` when creating the cluster.\n`kubectlLayer` is the only required property in `kubectlProviderOptions`.\n\n```ts\nimport { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nnew eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n  kubectlProviderOptions: {\n    kubectlLayer: new KubectlV32Layer(this, 'kubectl'),\n  }\n});\n```\n\n`Kubectl Handler` created along with the cluster will be granted admin permissions to the cluster.\n\nIf you want to use an existing kubectl provider function, for example with tight trusted entities on your IAM Roles - you can import the existing provider and then use the imported provider when importing the cluster:\n\n```ts\nimport { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\n// get the serivceToken from the custom resource provider\nconst functionArn = lambda.Function.fromFunctionName(this, 'ProviderOnEventFunc', 'ProviderframeworkonEvent-XXX').functionArn;\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  serviceToken: functionArn,\n  role: handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});\n```\n\n#### Environment\n\nYou can configure the environment of this function by specifying it at cluster instantiation. For example, this can be useful in order to configure an http proxy:\n\n```ts\nimport { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n  kubectlProviderOptions: {\n    kubectlLayer: new KubectlV32Layer(this, 'kubectl'),\n    environment: {\n        'http_proxy': 'http://proxy.myproxy.com',\n    },\n  }\n});\n```\n\n#### Runtime\n\nThe kubectl handler uses `kubectl`, `helm` and the `aws` CLI in order to\ninteract with the cluster. These are bundled into AWS Lambda layers included in\nthe `@aws-cdk/lambda-layer-awscli` and `@aws-cdk/lambda-layer-kubectl` modules.\n\nThe version of kubectl used must be compatible with the Kubernetes version of the\ncluster. kubectl is supported within one minor version (older or newer) of Kubernetes\n(see [Kubernetes version skew policy](https://kubernetes.io/releases/version-skew-policy/#kubectl)).\nDepending on which version of kubernetes you're targeting, you will need to use one of\nthe `@aws-cdk/lambda-layer-kubectl-vXY` packages.\n\n```ts\nimport { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n  kubectlProviderOptions: {\n    kubectlLayer: new KubectlV32Layer(this, 'kubectl'),\n  },\n});\n```\n\n#### Memory\n\nBy default, the kubectl provider is configured with 1024MiB of memory. You can use the `memory` option to specify the memory size for the AWS Lambda function:\n\n```ts\nimport { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nnew eks.Cluster(this, 'MyCluster', {\n  kubectlProviderOptions: {\n    kubectlLayer: new KubectlV32Layer(this, 'kubectl'),\n    memory: Size.gibibytes(4),\n  },\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\n### ARM64 Support\n\nInstance types with `ARM64` architecture are supported in both managed nodegroup and self-managed capacity. Simply specify an ARM64 `instanceType` (such as `m6g.medium`), and the latest\nAmazon Linux 2 AMI for ARM64 will be automatically selected.\n\n```ts\ndeclare const cluster: eks.Cluster;\n// add a managed ARM64 nodegroup\ncluster.addNodegroupCapacity('extra-ng-arm', {\n  instanceTypes: [new ec2.InstanceType('m6g.medium')],\n  minSize: 2,\n});\n\n// add a self-managed ARM64 nodegroup\ncluster.addAutoScalingGroupCapacity('self-ng-arm', {\n  instanceType: new ec2.InstanceType('m6g.medium'),\n  minCapacity: 2,\n})\n```\n\n### Masters Role\n\nWhen you create a cluster, you can specify a `mastersRole`. The `Cluster` construct will associate this role with `AmazonEKSClusterAdminPolicy` through [Access Entry](https://docs.aws.amazon.com/eks/latest/userguide/access-policy-permissions.html).\n\n```ts\ndeclare const role: iam.Role;\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  mastersRole: role,\n});\n```\n\nIf you do not specify it, you won't have access to the cluster from outside of the CDK application.\n\n### Encryption\n\nWhen you create an Amazon EKS cluster, envelope encryption of Kubernetes secrets using the AWS Key Management Service (AWS KMS) can be enabled.\nThe documentation on [creating a cluster](https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html)\ncan provide more details about the customer master key (CMK) that can be used for the encryption.\n\nYou can use the `secretsEncryptionKey` to configure which key the cluster will use to encrypt Kubernetes secrets. By default, an AWS Managed key will be used.\n\n> This setting can only be specified when the cluster is created and cannot be updated.\n\n```ts\nconst secretsKey = new kms.Key(this, 'SecretsKey');\nconst cluster = new eks.Cluster(this, 'MyCluster', {\n  secretsEncryptionKey: secretsKey,\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\nYou can also use a similar configuration for running a cluster built using the FargateCluster construct.\n\n```ts\nconst secretsKey = new kms.Key(this, 'SecretsKey');\nconst cluster = new eks.FargateCluster(this, 'MyFargateCluster', {\n  secretsEncryptionKey: secretsKey,\n  version: eks.KubernetesVersion.V1_32,\n});\n```\n\nThe Amazon Resource Name (ARN) for that CMK can be retrieved.\n\n```ts\ndeclare const cluster: eks.Cluster;\nconst clusterEncryptionConfigKeyArn = cluster.clusterEncryptionConfigKeyArn;\n```\n\n## Permissions and Security\n\nIn the new EKS module, `ConfigMap` is deprecated. Clusters created by the new module will use `API` as authentication mode. Access Entry will be the only way for granting permissions to specific IAM users and roles.\n\n### Access Entry\n\nAn access entry is a cluster identity—directly linked to an AWS IAM principal user or role that is used to authenticate to\nan Amazon EKS cluster. An Amazon EKS access policy authorizes an access entry to perform specific cluster actions.\n\nAccess policies are Amazon EKS-specific policies that assign Kubernetes permissions to access entries. Amazon EKS supports\nonly predefined and AWS managed policies. Access policies are not AWS IAM entities and are defined and managed by Amazon EKS.\nAmazon EKS access policies include permission sets that support common use cases of administration, editing, or read-only access\nto Kubernetes resources. See [Access Policy Permissions](https://docs.aws.amazon.com/eks/latest/userguide/access-policies.html#access-policy-permissions) for more details.\n\nUse `AccessPolicy` to include predefined AWS managed policies:\n\n```ts\n// AmazonEKSClusterAdminPolicy with `cluster` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSClusterAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.CLUSTER,\n});\n// AmazonEKSAdminPolicy with `namespace` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.NAMESPACE,\n  namespaces: ['foo', 'bar'] } );\n```\n\nUse `grantAccess()` to grant the AccessPolicy to an IAM principal:\n\n```ts\nimport { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\ndeclare const vpc: ec2.Vpc;\n\nconst clusterAdminRole = new iam.Role(this, 'ClusterAdminRole', {\n  assumedBy: new iam.ArnPrincipal('arn_for_trusted_principal'),\n});\n\nconst eksAdminRole = new iam.Role(this, 'EKSAdminRole', {\n  assumedBy: new iam.ArnPrincipal('arn_for_trusted_principal'),\n});\n\nconst cluster = new eks.Cluster(this, 'Cluster', {\n  vpc,\n  mastersRole: clusterAdminRole,\n  version: eks.KubernetesVersion.V1_32,\n  kubectlProviderOptions: {\n    kubectlLayer: new KubectlV32Layer(this, 'kubectl'),\n    memory: Size.gibibytes(4),\n  },\n});\n\n// Cluster Admin role for this cluster\ncluster.grantAccess('clusterAdminAccess', clusterAdminRole.roleArn, [\n  eks.AccessPolicy.fromAccessPolicyName('AmazonEKSClusterAdminPolicy', {\n    accessScopeType: eks.AccessScopeType.CLUSTER,\n  }),\n]);\n\n// EKS Admin role for specified namespaces of this cluster\ncluster.grantAccess('eksAdminRoleAccess', eksAdminRole.roleArn, [\n  eks.AccessPolicy.fromAccessPolicyName('AmazonEKSAdminPolicy', {\n    accessScopeType: eks.AccessScopeType.NAMESPACE,\n    namespaces: ['foo', 'bar'],\n  }),\n]);\n```\n\nBy default, the cluster creator role will be granted the cluster admin permissions. You can disable it by setting\n`bootstrapClusterCreatorAdminPermissions` to false.\n\n> **Note** - Switching `bootstrapClusterCreatorAdminPermissions` on an existing cluster would cause cluster replacement and should be avoided in production.\n\n### Cluster Security Group\n\nWhen you create an Amazon EKS cluster, a [cluster security group](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html)\nis automatically created as well. This security group is designed to allow all traffic from the control plane and managed node groups to flow freely\nbetween each other.\n\nThe ID for that security group can be retrieved after creating the cluster.\n\n```ts\ndeclare const cluster: eks.Cluster;\nconst clusterSecurityGroupId = cluster.clusterSecurityGroupId;\n```\n\n## Applying Kubernetes Resources\n\nTo apply kubernetes resource, kubectl provider needs to be created for the cluster. You can use `kubectlProviderOptions` to create the kubectl Provider.\n\nThe library supports several popular resource deployment mechanisms, among which are:\n\n### Kubernetes Manifests\n\nThe `KubernetesManifest` construct or `cluster.addManifest` method can be used\nto apply Kubernetes resource manifests to this cluster.\n\n> When using `cluster.addManifest`, the manifest construct is defined within the cluster's stack scope. If the manifest contains\n> attributes from a different stack which depend on the cluster stack, a circular dependency will be created and you will get a synth time error.\n> To avoid this, directly use `new KubernetesManifest` to create the manifest in the scope of the other stack.\n\nThe following examples will deploy the [paulbouwer/hello-kubernetes](https://github.com/paulbouwer/hello-kubernetes)\nservice on the cluster:\n\n```ts\ndeclare const cluster: eks.Cluster;\nconst appLabel = { app: \"hello-kubernetes\" };\n\nconst deployment = {\n  apiVersion: \"apps/v1\",\n  kind: \"Deployment\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    replicas: 3,\n    selector: { matchLabels: appLabel },\n    template: {\n      metadata: { labels: appLabel },\n      spec: {\n        containers: [\n          {\n            name: \"hello-kubernetes\",\n            image: \"paulbouwer/hello-kubernetes:1.5\",\n            ports: [ { containerPort: 8080 } ],\n          },\n        ],\n      },\n    },\n  },\n};\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [ { port: 80, targetPort: 8080 } ],\n    selector: appLabel,\n  }\n};\n\n// option 1: use a construct\nnew eks.KubernetesManifest(this, 'hello-kub', {\n  cluster,\n  manifest: [ deployment, service ],\n});\n\n// or, option2: use `addManifest`\ncluster.addManifest('hello-kub', service, deployment);\n```\n\n#### ALB Controller Integration\n\nThe `KubernetesManifest` construct can detect ingress resources inside your manifest and automatically add the necessary annotations\nso they are picked up by the ALB Controller.\n\n> See [Alb Controller](#alb-controller)\n\nTo that end, it offers the following properties:\n\n- `ingressAlb` - Signal that the ingress detection should be done.\n- `ingressAlbScheme` - Which ALB scheme should be applied. Defaults to `internal`.\n\n#### Adding resources from a URL\n\nThe following example will deploy the resource manifest hosting on remote server:\n\n```text\n// This example is only available in TypeScript\n\nimport * as yaml from 'js-yaml';\nimport * as request from 'sync-request';\n\ndeclare const cluster: eks.Cluster;\nconst manifestUrl = 'https://url/of/manifest.yaml';\nconst manifest = yaml.safeLoadAll(request('GET', manifestUrl).getBody());\ncluster.addManifest('my-resource', manifest);\n```\n\n#### Dependencies\n\nThere are cases where Kubernetes resources must be deployed in a specific order.\nFor example, you cannot define a resource in a Kubernetes namespace before the\nnamespace was created.\n\nYou can represent dependencies between `KubernetesManifest`s using\n`resource.node.addDependency()`:\n\n```ts\ndeclare const cluster: eks.Cluster;\nconst namespace = cluster.addManifest('my-namespace', {\n  apiVersion: 'v1',\n  kind: 'Namespace',\n  metadata: { name: 'my-app' },\n});\n\nconst service = cluster.addManifest('my-service', {\n  metadata: {\n    name: 'myservice',\n    namespace: 'my-app',\n  },\n  spec: { }, // ...\n});\n\nservice.node.addDependency(namespace); // will apply `my-namespace` before `my-service`.\n```\n\n**NOTE:** when a `KubernetesManifest` includes multiple resources (either directly\nor through `cluster.addManifest()`) (e.g. `cluster.addManifest('foo', r1, r2,\nr3,...)`), these resources will be applied as a single manifest via `kubectl`\nand will be applied sequentially (the standard behavior in `kubectl`).\n\n---\n\nSince Kubernetes manifests are implemented as CloudFormation resources in the\nCDK. This means that if the manifest is deleted from your code (or the stack is\ndeleted), the next `cdk deploy` will issue a `kubectl delete` command and the\nKubernetes resources in that manifest will be deleted.\n\n#### Resource Pruning\n\nWhen a resource is deleted from a Kubernetes manifest, the EKS module will\nautomatically delete these resources by injecting a _prune label_ to all\nmanifest resources. This label is then passed to [`kubectl apply --prune`].\n\n[`kubectl apply --prune`]: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/#alternative-kubectl-apply-f-directory-prune-l-your-label\n\nPruning is enabled by default but can be disabled through the `prune` option\nwhen a cluster is defined:\n\n```ts\nnew eks.Cluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  prune: false,\n});\n```\n\n#### Manifests Validation\n\nThe `kubectl` CLI supports applying a manifest by skipping the validation.\nThis can be accomplished by setting the `skipValidation` flag to `true` in the `KubernetesManifest` props.\n\n```ts\ndeclare const cluster: eks.Cluster;\nnew eks.KubernetesManifest(this, 'HelloAppWithoutValidation', {\n  cluster,\n  manifest: [{ foo: 'bar' }],\n  skipValidation: true,\n});\n```\n\n### Helm Charts\n\nThe `HelmChart` construct or `cluster.addHelmChart` method can be used\nto add Kubernetes resources to this cluster using Helm.\n\n> When using `cluster.addHelmChart`, the manifest construct is defined within the cluster's stack scope. If the manifest contains\n> attributes from a different stack which depend on the cluster stack, a circular dependency will be created and you will get a synth time error.\n> To avoid this, directly use `new HelmChart` to create the chart in the scope of the other stack.\n\nThe following example will install the [NGINX Ingress Controller](https://kubernetes.github.io/ingress-nginx/) to your cluster using Helm.\n\n```ts\ndeclare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart('NginxIngress', {\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n```\n\nHelm charts will be installed and updated using `helm upgrade --install`, where a few parameters\nare being passed down (such as `repo`, `values`, `version`, `namespace`, `wait`, `timeout`, etc).\nThis means that if the chart is added to CDK with the same release name, it will try to update\nthe chart in the cluster.\n\nAdditionally, the `chartAsset` property can be an `aws-s3-assets.Asset`. This allows the use of local, private helm charts.\n\n```ts\nimport * as s3Assets from 'aws-cdk-lib/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});\n```\n\nNested values passed to the `values` parameter should be provided as a nested dictionary:\n\n```ts\ndeclare const cluster: eks.Cluster;\n\ncluster.addHelmChart('ExternalSecretsOperator', {\n  chart: 'external-secrets',\n  release: 'external-secrets',\n  repository: 'https://charts.external-secrets.io',\n  namespace: 'external-secrets',\n  values: {\n    installCRDs: true,\n    webhook: {\n      port: 9443\n    }\n  },\n});\n```\n\nHelm chart can come with Custom Resource Definitions (CRDs) defined that by default will be installed by helm as well. However in special cases it might be needed to skip the installation of CRDs, for that the property `skipCrds` can be used.\n\n```ts\ndeclare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n  skipCrds: true,\n});\n```\n\n### OCI Charts\n\nOCI charts are also supported.\nAlso replace the `${VARS}` with appropriate values.\n\n```ts\ndeclare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'MyOCIChart', {\n  cluster,\n  chart: 'some-chart',\n  repository: 'oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}',\n  namespace: 'oci',\n  version: '0.0.1'\n});\n\n```\n\nHelm charts are implemented as CloudFormation resources in CDK.\nThis means that if the chart is deleted from your code (or the stack is\ndeleted), the next `cdk deploy` will issue a `helm uninstall` command and the\nHelm chart will be deleted.\n\nWhen there is no `release` defined, a unique ID will be allocated for the release based\non the construct path.\n\nBy default, all Helm charts will be installed concurrently. In some cases, this\ncould cause race conditions where two Helm charts attempt to deploy the same\nresource or if Helm charts depend on each other. You can use\n`chart.node.addDependency()` in order to declare a dependency order between\ncharts:\n\n```ts\ndeclare const cluster: eks.Cluster;\nconst chart1 = cluster.addHelmChart('MyChart', {\n  chart: 'foo',\n});\nconst chart2 = cluster.addHelmChart('MyChart', {\n  chart: 'bar',\n});\n\nchart2.node.addDependency(chart1);\n```\n\n#### Custom CDK8s Constructs\n\nYou can also compose a few stock `cdk8s+` constructs into your own custom construct. However, since mixing scopes between `aws-cdk` and `cdk8s` is currently not supported, the `Construct` class\nyou'll need to use is the one from the [`constructs`](https://github.com/aws/constructs) module, and not from `aws-cdk-lib` like you normally would.\nThis is why we used `new cdk8s.App()` as the scope of the chart above.\n\n```ts\nimport * as constructs from 'constructs';\nimport * as cdk8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-25';\n\ninterface LoadBalancedWebService {\n  readonly port: number;\n  readonly image: string;\n  readonly replicas: number;\n}\n\nconst app = new cdk8s.App();\nconst chart = new cdk8s.Chart(app, 'my-chart');\n\nclass LoadBalancedWebService extends constructs.Construct {\n  constructor(scope: constructs.Construct, id: string, props: LoadBalancedWebService) {\n    super(scope, id);\n\n    const deployment = new kplus.Deployment(chart, 'Deployment', {\n      replicas: props.replicas,\n      containers: [ new kplus.Container({ image: props.image }) ],\n    });\n\n    deployment.exposeViaService({\n      ports: [\n        { port: props.port },\n      ],\n      serviceType: kplus.ServiceType.LOAD_BALANCER,\n    });\n  }\n}\n```\n\n#### Manually importing k8s specs and CRD's\n\nIf you find yourself unable to use `cdk8s+`, or just like to directly use the `k8s` native objects or CRD's, you can do so by manually importing them using the `cdk8s-cli`.\n\nSee [Importing kubernetes objects](https://cdk8s.io/docs/latest/cli/import/) for detailed instructions.\n\n## Patching Kubernetes Resources\n\nThe `KubernetesPatch` construct can be used to update existing kubernetes\nresources. The following example can be used to patch the `hello-kubernetes`\ndeployment from the example above with 5 replicas.\n\n```ts\ndeclare const cluster: eks.Cluster;\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})\n```\n\n## Querying Kubernetes Resources\n\nThe `KubernetesObjectValue` construct can be used to query for information about kubernetes objects,\nand use that as part of your CDK application.\n\nFor example, you can fetch the address of a [`LoadBalancer`](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) type service:\n\n```ts\ndeclare const cluster: eks.Cluster;\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_LATEST,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})\n```\n\nSpecifically, since the above use-case is quite common, there is an easier way to access that information:\n\n```ts\ndeclare const cluster: eks.Cluster;\nconst loadBalancerAddress = cluster.getServiceLoadBalancerAddress('my-service');\n```\n\n## Add-ons\n\n[Add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) is a software that provides supporting operational capabilities to Kubernetes applications. The EKS module supports adding add-ons to your cluster using the `eks.Addon` class.\n\n```ts\ndeclare const cluster: eks.Cluster;\n\nnew eks.Addon(this, 'Addon', {\n  cluster,\n  addonName: 'aws-guardduty-agent',\n  addonVersion: 'v1.6.1',\n  // whether to preserve the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on.\n  preserveOnDelete: false,\n});\n```\n\n## Using existing clusters\n\nThe EKS library allows defining Kubernetes resources such as [Kubernetes\nmanifests](#kubernetes-resources) and [Helm charts](#helm-charts) on clusters\nthat are not defined as part of your CDK app.\n\nFirst you will need to import the kubectl provider and cluster created in another stack\n\n```ts\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\n\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  serviceToken: 'arn:aws:lambda:us-east-2:123456789012:function:my-function:1',\n  role: handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});\n```\n\nThen, you can use `addManifest` or `addHelmChart` to define resources inside\nyour Kubernetes cluster.\n\n```ts\ndeclare const cluster: eks.Cluster;\ncluster.addManifest('Test', {\n  apiVersion: 'v1',\n  kind: 'ConfigMap',\n  metadata: {\n    name: 'myconfigmap',\n  },\n  data: {\n    Key: 'value',\n    Another: '123454',\n  },\n});\n```\n\n## Logging\n\nEKS supports cluster logging for 5 different types of events:\n\n- API requests to the cluster.\n- Cluster access via the Kubernetes API.\n- Authentication requests into the cluster.\n- State of cluster controllers.\n- Scheduling decisions.\n\nYou can enable logging for each one separately using the `clusterLogging`\nproperty. For example:\n\n```ts\nconst cluster = new eks.Cluster(this, 'Cluster', {\n  // ...\n  version: eks.KubernetesVersion.V1_32,\n  clusterLogging: [\n    eks.ClusterLoggingTypes.API,\n    eks.ClusterLoggingTypes.AUTHENTICATOR,\n    eks.ClusterLoggingTypes.SCHEDULER,\n  ],\n});\n```\n\n## NodeGroup Repair Config\n\nYou can enable Managed Node Group [auto-repair config](https://docs.aws.amazon.com/eks/latest/userguide/node-health.html#node-auto-repair) using `enableNodeAutoRepair`\nproperty. For example:\n\n```ts\ndeclare const cluster: eks.Cluster;\n\ncluster.addNodegroupCapacity('NodeGroup', {\n  enableNodeAutoRepair:true,\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-eks-v2-alpha",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Eks.V2.Alpha",
      "packageId": "Amazon.CDK.AWS.Eks.V2.Alpha"
    },
    "go": {
      "moduleName": "github.com/aws/aws-cdk-go",
      "packageName": "awscdkeks-v2alpha"
    },
    "java": {
      "maven": {
        "artifactId": "eks-v2-alpha",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.eks.v2.alpha"
    },
    "js": {
      "npm": "@aws-cdk/aws-eks-v2-alpha"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 2"
      ],
      "distName": "aws-cdk.aws-eks-v2-alpha",
      "module": "aws_cdk.aws_eks_v2_alpha"
    }
  },
  "types": {
    "@aws-cdk/aws-eks-v2-alpha.AccessEntry": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "implements": "IAccessEntry *",
          "resource": "AWS::EKS::AccessEntry",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "An access entry defines the permissions and scope for a user or role to access an Amazon EKS cluster.",
        "stability": "experimental",
        "summary": "Represents an access entry in an Amazon EKS cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\n\ndeclare const accessPolicy: eks_v2_alpha.AccessPolicy;\ndeclare const cluster: eks_v2_alpha.Cluster;\nconst accessEntry = new eks_v2_alpha.AccessEntry(this, 'MyAccessEntry', {\n  accessPolicies: [accessPolicy],\n  cluster: cluster,\n  principal: 'principal',\n\n  // the properties below are optional\n  accessEntryName: 'accessEntryName',\n  accessEntryType: eks_v2_alpha.AccessEntryType.STANDARD,\n});"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntry",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/access-entry.ts",
          "line": 325
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntryProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.IAccessEntry"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 297
      },
      "methods": [
        {
          "docs": {
            "returns": "The imported access entry.",
            "stability": "experimental",
            "summary": "Imports an `AccessEntry` from its attributes."
          },
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 306
          },
          "name": "fromAccessEntryAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "- The parent construct."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "- The ID of the imported construct."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The attributes of the access entry to import."
              },
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntryAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.IAccessEntry"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add the access policies for this entry."
          },
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 359
          },
          "name": "addAccessPolicies",
          "parameters": [
            {
              "docs": {
                "summary": "- The new access policies to add."
              },
              "name": "newAccessPolicies",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "AccessEntry",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Amazon Resource Name (ARN) of the access entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 320
          },
          "name": "accessEntryArn",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IAccessEntry",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the access entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 316
          },
          "name": "accessEntryName",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IAccessEntry",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessEntry"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessEntryAttributes": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents the attributes of an access entry.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst accessEntryAttributes: eks_v2_alpha.AccessEntryAttributes = {\n  accessEntryArn: 'accessEntryArn',\n  accessEntryName: 'accessEntryName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntryAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 33
      },
      "name": "AccessEntryAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Amazon Resource Name (ARN) of the access entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 41
          },
          "name": "accessEntryArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the access entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 37
          },
          "name": "accessEntryName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessEntryAttributes"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessEntryProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents the properties required to create an Amazon EKS access entry.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\n\ndeclare const accessPolicy: eks_v2_alpha.AccessPolicy;\ndeclare const cluster: eks_v2_alpha.Cluster;\nconst accessEntryProps: eks_v2_alpha.AccessEntryProps = {\n  accessPolicies: [accessPolicy],\n  cluster: cluster,\n  principal: 'principal',\n\n  // the properties below are optional\n  accessEntryName: 'accessEntryName',\n  accessEntryType: eks_v2_alpha.AccessEntryType.STANDARD,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntryProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 262
      },
      "name": "AccessEntryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The access policies that define the permissions and scope for the access entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 282
          },
          "name": "accessPolicies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Amazon EKS cluster to which the access entry applies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 278
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Amazon Resource Name (ARN) of the principal (user or role) to associate the access entry with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 286
          },
          "name": "principal",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No access entry name is provided",
            "stability": "experimental",
            "summary": "The name of the AccessEntry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 268
          },
          "name": "accessEntryName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "STANDARD",
            "stability": "experimental",
            "summary": "The type of the AccessEntry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 274
          },
          "name": "accessEntryType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntryType"
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessEntryProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessEntryType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "custom": {
          "enum": "true"
        },
        "stability": "experimental",
        "summary": "Represents the different types of access entries that can be used in an Amazon EKS cluster."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntryType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 237
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents a standard access entry."
          },
          "name": "STANDARD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents a Fargate Linux access entry."
          },
          "name": "FARGATE_LINUX"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents an EC2 Linux access entry."
          },
          "name": "EC2_LINUX"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents an EC2 Windows access entry."
          },
          "name": "EC2_WINDOWS"
        }
      ],
      "name": "AccessEntryType",
      "symbolId": "lib/access-entry:AccessEntryType"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessPolicy": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "custom": {
          "implements": "IAccessPolicy",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "Represents an Amazon EKS Access Policy that implements the IAccessPolicy interface.",
        "example": "// AmazonEKSClusterAdminPolicy with `cluster` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSClusterAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.CLUSTER,\n});\n// AmazonEKSAdminPolicy with `namespace` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.NAMESPACE,\n  namespaces: ['foo', 'bar'] } );"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicy",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Constructs a new instance of the AccessPolicy class."
        },
        "locationInModule": {
          "filename": "lib/access-entry.ts",
          "line": 226
        },
        "parameters": [
          {
            "docs": {
              "summary": "- The properties for configuring the access policy."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 197
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import AccessPolicy by name."
          },
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 201
          },
          "name": "fromAccessPolicyName",
          "parameters": [
            {
              "name": "policyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyNameOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy"
            }
          },
          "static": true
        }
      ],
      "name": "AccessPolicy",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The scope of the access policy, which determines the level of access granted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 214
          },
          "name": "accessScope",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessScope"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The access policy itself, which defines the specific permissions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 219
          },
          "name": "policy",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessPolicy"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "remarks": "Amazon EKS Access Policies are used to control access to Amazon EKS clusters.",
        "see": "https://docs.aws.amazon.com/eks/latest/userguide/access-policies.html",
        "stability": "experimental",
        "summary": "Represents an Amazon EKS Access Policy ARN.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst accessPolicyArn = eks_v2_alpha.AccessPolicyArn.AMAZON_EKS_ADMIN_POLICY;",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Constructs a new instance of the `AccessEntry` class."
        },
        "locationInModule": {
          "filename": "lib/access-entry.ts",
          "line": 142
        },
        "parameters": [
          {
            "docs": {
              "remarks": "This is used to construct the policy ARN.",
              "summary": "- The name of the Amazon EKS access policy."
            },
            "name": "policyName",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 93
      },
      "methods": [
        {
          "docs": {
            "returns": "A new instance of the AccessPolicy class.",
            "stability": "experimental",
            "summary": "Creates a new instance of the AccessPolicy class with the specified policy name."
          },
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 131
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the access policy."
              },
              "name": "policyName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn"
            }
          },
          "static": true
        }
      ],
      "name": "AccessPolicyArn",
      "properties": [
        {
          "const": true,
          "docs": {
            "remarks": "This access policy includes permissions that grant an IAM principal\nmost permissions to resources. When associated to an access entry, its access scope is typically\none or more Kubernetes namespaces.",
            "stability": "experimental",
            "summary": "The Amazon EKS Admin Policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 99
          },
          "name": "AMAZON_EKS_ADMIN_POLICY",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "This access policy includes permissions that grant an IAM principal\naccess to list/view all resources in a cluster.",
            "stability": "experimental",
            "summary": "The Amazon EKS Admin View Policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 112
          },
          "name": "AMAZON_EKS_ADMIN_VIEW_POLICY",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "This access policy includes permissions that grant an IAM\nprincipal administrator access to a cluster. When associated to an access entry, its access scope\nis typically the cluster, rather than a Kubernetes namespace.",
            "stability": "experimental",
            "summary": "The Amazon EKS Cluster Admin Policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 106
          },
          "name": "AMAZON_EKS_CLUSTER_ADMIN_POLICY",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "This access policy includes permissions that allow an IAM principal\nto edit most Kubernetes resources.",
            "stability": "experimental",
            "summary": "The Amazon EKS Edit Policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 118
          },
          "name": "AMAZON_EKS_EDIT_POLICY",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "This access policy includes permissions that grant an IAM principal\naccess to list/view all resources in a cluster.",
            "stability": "experimental",
            "summary": "The Amazon EKS View Policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 124
          },
          "name": "AMAZON_EKS_VIEW_POLICY",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Amazon Resource Name (ARN) of the access policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 136
          },
          "name": "policyArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "This is used to construct the policy ARN.",
            "stability": "experimental",
            "summary": "- The name of the Amazon EKS access policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 142
          },
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessPolicyArn"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessPolicyNameOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents the options required to create an Amazon EKS Access Policy using the `fromAccessPolicyName()` method.",
        "example": "// AmazonEKSClusterAdminPolicy with `cluster` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSClusterAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.CLUSTER,\n});\n// AmazonEKSAdminPolicy with `namespace` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.NAMESPACE,\n  namespaces: ['foo', 'bar'] } );",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyNameOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 180
      },
      "name": "AccessPolicyNameOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "This determines the level of access granted by the policy.",
            "stability": "experimental",
            "summary": "The scope of the access policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 184
          },
          "name": "accessScopeType",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessScopeType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no specific namespaces for this scope",
            "stability": "experimental",
            "summary": "An optional array of Kubernetes namespaces to which the access policy applies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 189
          },
          "name": "namespaces",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessPolicyNameOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessPolicyProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for configuring an Amazon EKS Access Policy.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\n\ndeclare const accessPolicyArn: eks_v2_alpha.AccessPolicyArn;\nconst accessPolicyProps: eks_v2_alpha.AccessPolicyProps = {\n  accessScope: {\n    type: eks_v2_alpha.AccessScopeType.NAMESPACE,\n\n    // the properties below are optional\n    namespaces: ['namespaces'],\n  },\n  policy: accessPolicyArn,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 166
      },
      "name": "AccessPolicyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope of the access policy, which determines the level of access granted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 170
          },
          "name": "accessScope",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessScope"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The access policy itself, which defines the specific permissions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 174
          },
          "name": "policy",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn"
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessPolicyProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessScope": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "custom": {
          "interface": "AccessScope",
          "property": "{AccessScopeType} type - The scope type of the policy, either 'namespace' or 'cluster'.",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The scope defines the namespaces or cluster-level access granted by the policy.",
        "stability": "experimental",
        "summary": "Represents the scope of an access policy.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst accessScope: eks_v2_alpha.AccessScope = {\n  type: eks_v2_alpha.AccessScopeType.NAMESPACE,\n\n  // the properties below are optional\n  namespaces: ['namespaces'],\n};"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessScope",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 72
      },
      "name": "AccessScope",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope type of the policy, either 'namespace' or 'cluster'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 83
          },
          "name": "type",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessScopeType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no specific namespaces for this scope.",
            "remarks": "A value is required if you specified\nnamespace for Type.",
            "stability": "experimental",
            "summary": "A Kubernetes namespace that an access policy is scoped to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 79
          },
          "name": "namespaces",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/access-entry:AccessScope"
    },
    "@aws-cdk/aws-eks-v2-alpha.AccessScopeType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "custom": {
          "enum": "true",
          "export": "true",
          "exampleMetadata": "infused"
        },
        "remarks": "The scope type determines the level of access granted by the policy.",
        "stability": "experimental",
        "summary": "Represents the scope type of an access policy.",
        "example": "// AmazonEKSClusterAdminPolicy with `cluster` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSClusterAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.CLUSTER,\n});\n// AmazonEKSAdminPolicy with `namespace` scope\neks.AccessPolicy.fromAccessPolicyName('AmazonEKSAdminPolicy', {\n  accessScopeType: eks.AccessScopeType.NAMESPACE,\n  namespaces: ['foo', 'bar'] } );"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessScopeType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 52
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The policy applies to a specific namespace within the cluster."
          },
          "name": "NAMESPACE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The policy applies to the entire cluster."
          },
          "name": "CLUSTER"
        }
      ],
      "name": "AccessScopeType",
      "symbolId": "lib/access-entry:AccessScopeType"
    },
    "@aws-cdk/aws-eks-v2-alpha.Addon": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::EKS::Addon",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "Represents an Amazon EKS Add-On.",
        "example": "declare const cluster: eks.Cluster;\n\nnew eks.Addon(this, 'Addon', {\n  cluster,\n  addonName: 'aws-guardduty-agent',\n  addonVersion: 'v1.6.1',\n  // whether to preserve the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on.\n  preserveOnDelete: false,\n});"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.Addon",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a new Amazon EKS Add-On."
        },
        "locationInModule": {
          "filename": "lib/addon.ts",
          "line": 127
        },
        "parameters": [
          {
            "docs": {
              "summary": "The parent construct."
            },
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "docs": {
              "summary": "The construct ID."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "The properties for the Add-On."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AddonProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.IAddon"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/addon.ts",
        "line": 72
      },
      "methods": [
        {
          "docs": {
            "returns": "An `IAddon` implementation.",
            "stability": "experimental",
            "summary": "Creates an `IAddon` from an existing addon ARN."
          },
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 100
          },
          "name": "fromAddonArn",
          "parameters": [
            {
              "docs": {
                "summary": "- The parent construct."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "- The ID of the construct."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The ARN of the addon."
              },
              "name": "addonArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.IAddon"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "An `IAddon` instance.",
            "stability": "experimental",
            "summary": "Creates an `IAddon` instance from the given addon attributes."
          },
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 81
          },
          "name": "fromAddonAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "- The parent construct."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "- The construct ID."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The attributes of the addon, including the addon name and the cluster name."
              },
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.AddonAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.IAddon"
            }
          },
          "static": true
        }
      ],
      "name": "Addon",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Arn of the addon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 118
          },
          "name": "addonArn",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IAddon",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Name of the addon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 114
          },
          "name": "addonName",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IAddon",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/addon:Addon"
    },
    "@aws-cdk/aws-eks-v2-alpha.AddonAttributes": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents the attributes of an addon for an Amazon EKS cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst addonAttributes: eks_v2_alpha.AddonAttributes = {\n  addonName: 'addonName',\n  clusterName: 'clusterName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AddonAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/addon.ts",
        "line": 56
      },
      "name": "AddonAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the addon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 60
          },
          "name": "addonName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the Amazon EKS cluster the addon is associated with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 65
          },
          "name": "clusterName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/addon:AddonAttributes"
    },
    "@aws-cdk/aws-eks-v2-alpha.AddonProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for creating an Amazon EKS Add-On.",
        "example": "declare const cluster: eks.Cluster;\n\nnew eks.Addon(this, 'Addon', {\n  cluster,\n  addonName: 'aws-guardduty-agent',\n  addonVersion: 'v1.6.1',\n  // whether to preserve the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on.\n  preserveOnDelete: false,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AddonProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/addon.ts",
        "line": 26
      },
      "name": "AddonProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the Add-On."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 30
          },
          "name": "addonName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The EKS cluster the Add-On is associated with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 43
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "the latest version.",
            "remarks": "You can check all available versions with describe-addon-versions.\nFor example, this lists all available versions for the `eks-pod-identity-agent` addon:\n$ aws eks describe-addon-versions --addon-name eks-pod-identity-agent \\\n--query 'addons[*].addonVersions[*].addonVersion'",
            "stability": "experimental",
            "summary": "Version of the Add-On."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 39
          },
          "name": "addonVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If an IAM account is associated with the add-on, it isn't removed.",
            "stability": "experimental",
            "summary": "Specifying this option preserves the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 50
          },
          "name": "preserveOnDelete",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/addon:AddonProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.AlbController": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "Use the factory functions `get` and `getOrCreate` to obtain/create instances of this controller.",
        "see": "https://kubernetes-sigs.github.io/aws-load-balancer-controller",
        "stability": "experimental",
        "summary": "Construct for installing the AWS ALB Contoller on EKS clusters.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\n\ndeclare const albControllerVersion: eks_v2_alpha.AlbControllerVersion;\ndeclare const cluster: eks_v2_alpha.Cluster;\ndeclare const policy: any;\nconst albController = new eks_v2_alpha.AlbController(this, 'MyAlbController', {\n  cluster: cluster,\n  version: albControllerVersion,\n\n  // the properties below are optional\n  policy: policy,\n  repository: 'repository',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbController",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/alb-controller.ts",
          "line": 311
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/alb-controller.ts",
        "line": 295
      },
      "methods": [
        {
          "docs": {
            "remarks": "Singleton per stack/cluster.",
            "stability": "experimental",
            "summary": "Create the controller construct associated with this cluster and scope."
          },
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 301
          },
          "name": "create",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbController"
            }
          },
          "static": true
        }
      ],
      "name": "AlbController",
      "symbolId": "lib/alb-controller:AlbController"
    },
    "@aws-cdk/aws-eks-v2-alpha.AlbControllerOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `AlbController`.",
        "example": "new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  albController: {\n    version: eks.AlbControllerVersion.V2_8_2,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alb-controller.ts",
        "line": 244
      },
      "name": "AlbControllerOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Version of the controller."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 249
          },
          "name": "version",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Corresponds to the predefined version.",
            "remarks": "If you're using one of the built-in versions, this is not required since\nCDK ships with the appropriate policies for those versions.\n\nHowever, if you are using a custom version, this is required (and validated).",
            "stability": "experimental",
            "summary": "The IAM policy to apply to the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 272
          },
          "name": "policy",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-load-balancer-controller'",
            "remarks": "Note that the default repository works for most regions, but not all.\nIf the repository is not applicable to your region, use a custom repository\naccording to the information here: https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases.",
            "stability": "experimental",
            "summary": "The repository to pull the controller image from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 260
          },
          "name": "repository",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/alb-controller:AlbControllerOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.AlbControllerProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for `AlbController`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\n\ndeclare const albControllerVersion: eks_v2_alpha.AlbControllerVersion;\ndeclare const cluster: eks_v2_alpha.Cluster;\ndeclare const policy: any;\nconst albControllerProps: eks_v2_alpha.AlbControllerProps = {\n  cluster: cluster,\n  version: albControllerVersion,\n\n  // the properties below are optional\n  policy: policy,\n  repository: 'repository',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.AlbControllerOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alb-controller.ts",
        "line": 278
      },
      "name": "AlbControllerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "[disable-awslint:ref-via-interface] Cluster to install the controller onto."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 284
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.Cluster"
          }
        }
      ],
      "symbolId": "lib/alb-controller:AlbControllerProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "remarks": "Corresponds to the image tag of 'amazon/aws-load-balancer-controller' image.",
        "stability": "experimental",
        "summary": "Controller version.",
        "example": "new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  albController: {\n    version: eks.AlbControllerVersion.V2_8_2,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/alb-controller.ts",
        "line": 18
      },
      "methods": [
        {
          "docs": {
            "remarks": "Use this if the version you need is not available in one of the predefined versions.\nNote that in this case, you will also need to provide an IAM policy in the controller options.\n\nALB controller version and helm chart version compatibility information can be found\nhere: https://github.com/aws/eks-charts/blob/v0.0.133/stable/aws-load-balancer-controller/Chart.yaml",
            "stability": "experimental",
            "summary": "Specify a custom version and an associated helm chart version."
          },
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 201
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "The version number."
              },
              "name": "version",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Version 1.4.1 is the default version to support legacy\nusers.",
                "summary": "The version of the helm chart."
              },
              "name": "helmChartVersion",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
            }
          },
          "static": true
        }
      ],
      "name": "AlbControllerVersion",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.0.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 22
          },
          "name": "V2_0_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.0.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 27
          },
          "name": "V2_0_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.1.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 32
          },
          "name": "V2_1_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.1.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 37
          },
          "name": "V2_1_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.1.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 42
          },
          "name": "V2_1_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.1.3."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 47
          },
          "name": "V2_1_3",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.0.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 52
          },
          "name": "V2_2_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.2.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 57
          },
          "name": "V2_2_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.2.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 62
          },
          "name": "V2_2_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.2.3."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 67
          },
          "name": "V2_2_3",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.2.4."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 72
          },
          "name": "V2_2_4",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.3.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 77
          },
          "name": "V2_3_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.3.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 82
          },
          "name": "V2_3_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.4.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 87
          },
          "name": "V2_4_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.4.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 92
          },
          "name": "V2_4_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.4.3."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 97
          },
          "name": "V2_4_3",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.4.4."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 102
          },
          "name": "V2_4_4",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.4.5."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 107
          },
          "name": "V2_4_5",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.4.6."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 112
          },
          "name": "V2_4_6",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.4.7."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 117
          },
          "name": "V2_4_7",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.5.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 122
          },
          "name": "V2_5_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.5.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 127
          },
          "name": "V2_5_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.5.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 132
          },
          "name": "V2_5_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.5.3."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 137
          },
          "name": "V2_5_3",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.5.4."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 142
          },
          "name": "V2_5_4",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.6.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 147
          },
          "name": "V2_6_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.6.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 152
          },
          "name": "V2_6_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.6.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 157
          },
          "name": "V2_6_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.7.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 162
          },
          "name": "V2_7_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.7.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 167
          },
          "name": "V2_7_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.7.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 172
          },
          "name": "V2_7_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.8.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 177
          },
          "name": "V2_8_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.8.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 182
          },
          "name": "V2_8_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "v2.8.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 187
          },
          "name": "V2_8_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerVersion"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether or not its a custom version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 217
          },
          "name": "custom",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The version of the helm chart to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 213
          },
          "name": "helmChartVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The version string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alb-controller.ts",
            "line": 209
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/alb-controller:AlbControllerVersion"
    },
    "@aws-cdk/aws-eks-v2-alpha.AlbScheme": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "see": "https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/guide/ingress/annotations/#scheme",
        "stability": "experimental",
        "summary": "ALB Scheme."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbScheme",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/alb-controller.ts",
        "line": 225
      },
      "members": [
        {
          "docs": {
            "remarks": "The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes.\nTherefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.",
            "stability": "experimental",
            "summary": "The nodes of an internal load balancer have only private IP addresses."
          },
          "name": "INTERNAL"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "An internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the internet to the EC2 instances that are registered with the load balancer."
          },
          "name": "INTERNET_FACING"
        }
      ],
      "name": "AlbScheme",
      "symbolId": "lib/alb-controller:AlbScheme"
    },
    "@aws-cdk/aws-eks-v2-alpha.AutoScalingGroupCapacityOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for adding worker nodes.",
        "example": "declare const vpc: ec2.Vpc;\ndeclare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('nodes', {\n  vpcSubnets: { subnets: vpc.privateSubnets },\n  instanceType: new ec2.InstanceType('t2.medium'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AutoScalingGroupCapacityOptions",
      "interfaces": [
        "aws-cdk-lib.aws_autoscaling.CommonAutoScalingGroupProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 1779
      },
      "name": "AutoScalingGroupCapacityOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Instance type of the instances to start."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1783
          },
          "name": "instanceType",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If you wish to provide a custom user data script, set this to `false` and\nmanually invoke `autoscalingGroup.addUserData()`.",
            "stability": "experimental",
            "summary": "Configures the EC2 user-data script for instances in this autoscaling group to bootstrap the node (invoke `/etc/eks/bootstrap.sh`) and associate it with the EKS cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1795
          },
          "name": "bootstrapEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "EKS node bootstrapping options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1802
          },
          "name": "bootstrapOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.BootstrapOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "MachineImageType.AMAZON_LINUX_2",
            "stability": "experimental",
            "summary": "Machine image type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1809
          },
          "name": "machineImageType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.MachineImageType"
          }
        }
      ],
      "symbolId": "lib/cluster:AutoScalingGroupCapacityOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.AutoScalingGroupOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for adding an AutoScalingGroup as capacity.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst autoScalingGroupOptions: eks_v2_alpha.AutoScalingGroupOptions = {\n  bootstrapEnabled: false,\n  bootstrapOptions: {\n    additionalArgs: 'additionalArgs',\n    awsApiRetryAttempts: 123,\n    dnsClusterIp: 'dnsClusterIp',\n    dockerConfigJson: 'dockerConfigJson',\n    enableDockerBridge: false,\n    kubeletExtraArgs: 'kubeletExtraArgs',\n    useMaxPods: false,\n  },\n  machineImageType: eks_v2_alpha.MachineImageType.AMAZON_LINUX_2,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.AutoScalingGroupOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 1876
      },
      "name": "AutoScalingGroupOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If you wish to provide a custom user data script, set this to `false` and\nmanually invoke `autoscalingGroup.addUserData()`.",
            "stability": "experimental",
            "summary": "Configures the EC2 user-data script for instances in this autoscaling group to bootstrap the node (invoke `/etc/eks/bootstrap.sh`) and associate it with the EKS cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1887
          },
          "name": "bootstrapEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Allows options for node bootstrapping through EC2 user data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1893
          },
          "name": "bootstrapOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.BootstrapOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "MachineImageType.AMAZON_LINUX_2",
            "stability": "experimental",
            "summary": "Allow options to specify different machine image type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1900
          },
          "name": "machineImageType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.MachineImageType"
          }
        }
      ],
      "symbolId": "lib/cluster:AutoScalingGroupOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.BootstrapOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "EKS node bootstrapping options.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst bootstrapOptions: eks_v2_alpha.BootstrapOptions = {\n  additionalArgs: 'additionalArgs',\n  awsApiRetryAttempts: 123,\n  dnsClusterIp: 'dnsClusterIp',\n  dockerConfigJson: 'dockerConfigJson',\n  enableDockerBridge: false,\n  kubeletExtraArgs: 'kubeletExtraArgs',\n  useMaxPods: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.BootstrapOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 1815
      },
      "name": "BootstrapOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "see": "https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh",
            "stability": "experimental",
            "summary": "Additional command line arguments to pass to the `/etc/eks/bootstrap.sh` command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1870
          },
          "name": "additionalArgs",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3",
            "stability": "experimental",
            "summary": "Number of retry attempts for AWS API call (DescribeCluster)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1835
          },
          "name": "awsApiRetryAttempts",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 10.100.0.10 or 172.20.0.10 based on the IP\naddress of the primary interface.",
            "stability": "experimental",
            "summary": "Overrides the IP address to use for DNS queries within the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1852
          },
          "name": "dnsClusterIp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "The contents of the `/etc/docker/daemon.json` file. Useful if you want a custom config differing from the default one in the EKS AMI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1843
          },
          "name": "dockerConfigJson",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Restores the docker default bridge network."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1828
          },
          "name": "enableDockerBridge",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "For example, `--node-labels foo=bar,goo=far`.",
            "stability": "experimental",
            "summary": "Extra arguments to add to the kubelet. Useful for adding labels or taints."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1861
          },
          "name": "kubeletExtraArgs",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Sets `--max-pods` for the kubelet based on the capacity of the EC2 instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1821
          },
          "name": "useMaxPods",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/cluster:BootstrapOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.CapacityType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Capacity type of the managed node group."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.CapacityType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 97
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "spot instances."
          },
          "name": "SPOT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "on-demand instances."
          },
          "name": "ON_DEMAND"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "capacity block instances."
          },
          "name": "CAPACITY_BLOCK"
        }
      ],
      "name": "CapacityType",
      "symbolId": "lib/managed-nodegroup:CapacityType"
    },
    "@aws-cdk/aws-eks-v2-alpha.Cluster": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::EKS::Cluster",
          "exampleMetadata": "infused"
        },
        "remarks": "This is a fully managed cluster of API Servers (control-plane)\nThe user is still required to create the worker nodes.",
        "stability": "experimental",
        "summary": "A Cluster represents a managed Kubernetes Service (EKS).",
        "example": "const cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n  compute: {\n    nodePools: ['system', 'general-purpose'],\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.Cluster",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Initiates an EKS Cluster with the supplied arguments."
        },
        "locationInModule": {
          "filename": "lib/cluster.ts",
          "line": 1079
        },
        "parameters": [
          {
            "docs": {
              "summary": "a Construct, most likely a cdk.Stack created."
            },
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "docs": {
              "summary": "the id of the Construct to create."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "properties in the IClusterProps interface."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.ClusterProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.ICluster"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 917
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an existing cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 925
          },
          "name": "fromClusterAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "the construct scope, in most cases 'this'."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "the id or name to import as."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the cluster properties to use for importing information."
              },
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.ClusterAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The nodes will automatically be configured with the right VPC and AMI\nfor the instance type and Kubernetes version.\n\nNote that if you specify `updateType: RollingUpdate` or `updateType: ReplacingUpdate`, your nodes might be replaced at deploy\ntime without notice in case the recommended AMI for your machine image type has been updated by AWS.\nThe default behavior for `updateType` is `None`, which means only new instances will be launched using the new AMI.\n\nSpot instances will be labeled `lifecycle=Ec2Spot` and tainted with `PreferNoSchedule`.\nIn addition, the [spot interrupt handler](https://github.com/awslabs/ec2-spot-labs/tree/master/ec2-spot-eks-solution/spot-termination-handler)\ndaemon will be installed on all spot instances to handle\n[EC2 Spot Instance Termination Notices](https://aws.amazon.com/blogs/aws/new-ec2-spot-instance-termination-notices/).",
            "stability": "experimental",
            "summary": "Add nodes to this EKS cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1436
          },
          "name": "addAutoScalingGroupCapacity",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.AutoScalingGroupCapacityOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup"
            }
          }
        },
        {
          "docs": {
            "returns": "a `KubernetesManifest` construct representing the chart.",
            "stability": "experimental",
            "summary": "Defines a CDK8s chart in this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 782
          },
          "name": "addCdk8sChart",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "parameters": [
            {
              "docs": {
                "summary": "logical id of this chart."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the cdk8s chart."
              },
              "name": "chart",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifest"
            }
          }
        },
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/fargate-profile.html",
            "stability": "experimental",
            "summary": "Adds a Fargate profile to this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1552
          },
          "name": "addFargateProfile",
          "parameters": [
            {
              "docs": {
                "summary": "the id of this profile."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "profile options."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfileOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfile"
            }
          }
        },
        {
          "docs": {
            "returns": "a `HelmChart` construct",
            "stability": "experimental",
            "summary": "Defines a Helm chart in this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 771
          },
          "name": "addHelmChart",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "parameters": [
            {
              "docs": {
                "summary": "logical id of this chart."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "options of this chart."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChartOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChart"
            }
          }
        },
        {
          "docs": {
            "remarks": "The manifest will be applied/deleted using kubectl as needed.",
            "returns": "a `KubernetesResource` object.",
            "stability": "experimental",
            "summary": "Defines a Kubernetes resource in this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 760
          },
          "name": "addManifest",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "parameters": [
            {
              "docs": {
                "summary": "logical id of this manifest."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "a list of Kubernetes resource specifications."
              },
              "name": "manifest",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifest"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This method will create a new managed nodegroup and add into the capacity.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html",
            "stability": "experimental",
            "summary": "Add managed nodegroup to this Amazon EKS cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1478
          },
          "name": "addNodegroupCapacity",
          "parameters": [
            {
              "docs": {
                "summary": "The ID of the nodegroup."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "options for creating a new nodegroup."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.Nodegroup"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a new service account with corresponding IAM Role (IRSA)."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 799
          },
          "name": "addServiceAccount",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccountOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccount"
            }
          }
        },
        {
          "docs": {
            "remarks": "The AutoScalingGroup must be running an EKS-optimized AMI containing the\n/etc/eks/bootstrap.sh script. This method will configure Security Groups,\nadd the right policies to the instance role, apply the right tags, and add\nthe required user data to the instance's launch configuration.\n\nSpot instances will be labeled `lifecycle=Ec2Spot` and tainted with `PreferNoSchedule`.\nIf kubectl is enabled, the\n[spot interrupt handler](https://github.com/awslabs/ec2-spot-labs/tree/master/ec2-spot-eks-solution/spot-termination-handler)\ndaemon will be installed on all spot instances to handle\n[EC2 Spot Instance Termination Notices](https://aws.amazon.com/blogs/aws/new-ec2-spot-instance-termination-notices/).\n\nPrefer to use `addAutoScalingGroupCapacity` if possible.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html",
            "stability": "experimental",
            "summary": "Connect capacity in the form of an existing AutoScalingGroup to the EKS cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 826
          },
          "name": "connectAutoScalingGroupCapacity",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "parameters": [
            {
              "docs": {
                "summary": "[disable-awslint:ref-via-interface]."
              },
              "name": "autoScalingGroup",
              "type": {
                "fqn": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup"
              }
            },
            {
              "docs": {
                "summary": "options for adding auto scaling groups, like customizing the bootstrap script."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.AutoScalingGroupOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Fetch the load balancer address of an ingress backed by a load balancer."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1407
          },
          "name": "getIngressLoadBalancerAddress",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the ingress."
              },
              "name": "ingressName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Additional operation options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.IngressLoadBalancerAddressOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Fetch the load balancer address of a service of type 'LoadBalancer'."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1387
          },
          "name": "getServiceLoadBalancerAddress",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the service."
              },
              "name": "serviceName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Additional operation options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceLoadBalancerAddressOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "remarks": "This method creates an `AccessEntry` construct that grants the specified IAM principal the access permissions\ndefined by the provided `IAccessPolicy` array. This allows the IAM principal to perform the actions permitted\nby the access policies within the EKS cluster.",
            "stability": "experimental",
            "summary": "Grants the specified IAM principal access to the EKS cluster based on the provided access policies."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1350
          },
          "name": "grantAccess",
          "parameters": [
            {
              "docs": {
                "summary": "- The ID of the `AccessEntry` construct to be created."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The IAM principal (role or user) to be granted access to the EKS cluster."
              },
              "name": "principal",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- An array of `IAccessPolicy` objects that define the access permissions to be granted to the IAM principal."
              },
              "name": "accessPolicies",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "This method creates an `AccessEntry` construct that grants the specified IAM principal the cluster admin\naccess permissions. This allows the IAM principal to perform the actions permitted\nby the cluster admin acces.",
            "returns": "the access entry construct",
            "stability": "experimental",
            "summary": "Grants the specified IAM principal cluster admin access to the EKS cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1366
          },
          "name": "grantClusterAdmin",
          "parameters": [
            {
              "docs": {
                "summary": "- The ID of the `AccessEntry` construct to be created."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The IAM principal (role or user) to be granted access to the EKS cluster."
              },
              "name": "principal",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessEntry"
            }
          }
        }
      ],
      "name": "Cluster",
      "properties": [
        {
          "docs": {
            "remarks": "For example, `arn:aws:eks:us-west-2:666666666666:cluster/prod`",
            "stability": "experimental",
            "summary": "The AWS generated ARN for the Cluster resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 946
          },
          "name": "clusterArn",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The certificate-authority-data for your cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 960
          },
          "name": "clusterCertificateAuthorityData",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Resource Name (ARN) or alias of the customer master key (CMK)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 975
          },
          "name": "clusterEncryptionConfigKeyArn",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "This is the URL inside the kubeconfig file to use with kubectl\n\nFor example, `https://5E1D0CEXAMPLEA591B746AFC5AB30262.yl4.us-west-2.eks.amazonaws.com`",
            "stability": "experimental",
            "summary": "The endpoint URL for the Cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 955
          },
          "name": "clusterEndpoint",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Name of the created EKS Cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 939
          },
          "name": "clusterName",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "remarks": "If this cluster is not kubectl-enabled (i.e. uses the\nstock `CfnCluster`), this is `undefined`.",
            "stability": "experimental",
            "summary": "If this cluster is kubectl-enabled, returns the OpenID Connect issuer url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1501
          },
          "name": "clusterOpenIdConnectIssuerUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The cluster security group that was created by Amazon EKS for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 970
          },
          "name": "clusterSecurityGroup",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The id of the cluster security group that was created by Amazon EKS for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 965
          },
          "name": "clusterSecurityGroupId",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "memberof": "Cluster",
              "type": "{ec2.Connections}"
            },
            "stability": "experimental",
            "summary": "Manages connection rules (Security Group Rules) for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 983
          },
          "name": "connections",
          "overrides": "aws-cdk-lib.aws_ec2.IConnectable",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.Connections"
          }
        },
        {
          "docs": {
            "remarks": "A provider will only be defined if this property is accessed (lazy initialization).",
            "stability": "experimental",
            "summary": "An `OpenIdConnectProvider` resource associated with this cluster, and which can be used to link this cluster to AWS IAM."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1511
          },
          "name": "openIdConnectProvider",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IOpenIdConnectProvider"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Determines if Kubernetes resources can be pruned automatically."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1031
          },
          "name": "prune",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "IAM role assumed by the EKS Control Plane."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 988
          },
          "name": "role",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The VPC in which this Cluster was created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 934
          },
          "name": "vpc",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IVpc"
          }
        },
        {
          "docs": {
            "remarks": "Will be undefined if `albController` wasn't configured.",
            "stability": "experimental",
            "summary": "The ALB Controller construct defined for this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1037
          },
          "name": "albController",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbController"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` if the `defaultCapacityType` is not `EC2` or\n`defaultCapacityType` is `EC2` but default capacity is set to 0.",
            "stability": "experimental",
            "summary": "The auto scaling group that hosts the default capacity for this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 995
          },
          "name": "defaultCapacity",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` if the `defaultCapacityType` is `EC2` or\n`defaultCapacityType` is `NODEGROUP` but default capacity is set to 0.",
            "stability": "experimental",
            "summary": "The node group that hosts the default capacity for this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1002
          },
          "name": "defaultNodegroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.Nodegroup"
          }
        },
        {
          "docs": {
            "remarks": "The EKS Pod Identity Agent is responsible for managing the temporary credentials\nused by pods in the cluster to access AWS resources. It runs as a DaemonSet on\neach node and provides the necessary credentials to the pods based on their\nassociated service account.",
            "stability": "experimental",
            "summary": "Retrieves the EKS Pod Identity Agent addon for the EKS cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1534
          },
          "name": "eksPodIdentityAgent",
          "optional": true,
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IAddon"
          }
        },
        {
          "docs": {
            "default": "- IpFamily.IP_V4",
            "see": "https://docs.aws.amazon.com/eks/latest/APIReference/API_KubernetesNetworkConfigRequest.html#AmazonEKS-Type-KubernetesNetworkConfigRequest-ipFamily",
            "stability": "experimental",
            "summary": "Specify which IP family is used to assign Kubernetes pod and service IP addresses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1010
          },
          "name": "ipFamily",
          "optional": true,
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IpFamily"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1521
          },
          "name": "kubectlProvider",
          "optional": true,
          "overrides": "@aws-cdk/aws-eks-v2-alpha.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider"
          }
        }
      ],
      "symbolId": "lib/cluster:Cluster"
    },
    "@aws-cdk/aws-eks-v2-alpha.ClusterAttributes": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Attributes for EKS clusters.",
        "example": "import { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\n// get the serivceToken from the custom resource provider\nconst functionArn = lambda.Function.fromFunctionName(this, 'ProviderOnEventFunc', 'ProviderframeworkonEvent-XXX').functionArn;\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  serviceToken: functionArn,\n  role: handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ClusterAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 198
      },
      "name": "ClusterAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The physical name of the Cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 208
          },
          "name": "clusterName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified `cluster.clusterCertificateAuthorityData` will\nthrow an error",
            "stability": "experimental",
            "summary": "The certificate-authority-data for your cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 221
          },
          "name": "clusterCertificateAuthorityData",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified `cluster.clusterEncryptionConfigKeyArn` will\nthrow an error",
            "stability": "experimental",
            "summary": "Amazon Resource Name (ARN) or alias of the customer master key (CMK)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 235
          },
          "name": "clusterEncryptionConfigKeyArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified `cluster.clusterEndpoint` will throw an error.",
            "stability": "experimental",
            "summary": "The API Server endpoint URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 214
          },
          "name": "clusterEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified `cluster.clusterSecurityGroupId` will throw an\nerror",
            "stability": "experimental",
            "summary": "The cluster security group that was created by Amazon EKS for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 228
          },
          "name": "clusterSecurityGroupId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- IpFamily.IP_V4",
            "see": "https://docs.aws.amazon.com/eks/latest/APIReference/API_KubernetesNetworkConfigRequest.html#AmazonEKS-Type-KubernetesNetworkConfigRequest-ipFamily",
            "stability": "experimental",
            "summary": "Specify which IP family is used to assign Kubernetes pod and service IP addresses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 243
          },
          "name": "ipFamily",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IpFamily"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Default CDK provider",
            "stability": "experimental",
            "summary": "KubectlProvider for issuing kubectl commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 265
          },
          "name": "kubectlProvider",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If defined, `kubectlLayer` is a required property.\n\nIf not defined, kubectl provider will not be created by default.",
            "stability": "experimental",
            "summary": "Options for creating the kubectl provider - a lambda function that executes `kubectl` and `helm` against the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 273
          },
          "name": "kubectlProviderOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified `cluster.openIdConnectProvider` and `cluster.addServiceAccount` will throw an error.",
            "remarks": "You can either import an existing provider using `iam.OpenIdConnectProvider.fromProviderArn`,\nor create a new provider using `new eks.OpenIdConnectProvider`",
            "stability": "experimental",
            "summary": "An Open ID Connect provider for this cluster that can be used to configure service accounts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 258
          },
          "name": "openIdConnectProvider",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IOpenIdConnectProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "When this is enabled (default), prune labels will be\nallocated and injected to each resource. These labels will then be used\nwhen issuing the `kubectl apply` operation with the `--prune` switch.",
            "stability": "experimental",
            "summary": "Indicates whether Kubernetes resources added through `addManifest()` can be automatically pruned."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 283
          },
          "name": "prune",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified, no additional security groups will be\nconsidered in `cluster.connections`.",
            "stability": "experimental",
            "summary": "Additional security groups associated with this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 250
          },
          "name": "securityGroupIds",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified `cluster.vpc` will throw an error",
            "stability": "experimental",
            "summary": "The VPC in which this Cluster was created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 203
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/cluster:ClusterAttributes"
    },
    "@aws-cdk/aws-eks-v2-alpha.ClusterCommonOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for configuring an EKS cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nimport * as cdk from 'aws-cdk-lib';\nimport { aws_ec2 as ec2 } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_kms as kms } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const albControllerVersion: eks_v2_alpha.AlbControllerVersion;\ndeclare const endpointAccess: eks_v2_alpha.EndpointAccess;\ndeclare const key: kms.Key;\ndeclare const kubernetesVersion: eks_v2_alpha.KubernetesVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policy: any;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const size: cdk.Size;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst clusterCommonOptions: eks_v2_alpha.ClusterCommonOptions = {\n  version: kubernetesVersion,\n\n  // the properties below are optional\n  albController: {\n    version: albControllerVersion,\n\n    // the properties below are optional\n    policy: policy,\n    repository: 'repository',\n  },\n  clusterLogging: [eks_v2_alpha.ClusterLoggingTypes.API],\n  clusterName: 'clusterName',\n  coreDnsComputeType: eks_v2_alpha.CoreDnsComputeType.EC2,\n  endpointAccess: endpointAccess,\n  ipFamily: eks_v2_alpha.IpFamily.IP_V4,\n  kubectlProviderOptions: {\n    kubectlLayer: layerVersion,\n\n    // the properties below are optional\n    awscliLayer: layerVersion,\n    environment: {\n      environmentKey: 'environment',\n    },\n    memory: size,\n    privateSubnets: [subnet],\n    role: role,\n    securityGroup: securityGroup,\n  },\n  mastersRole: role,\n  prune: false,\n  role: role,\n  secretsEncryptionKey: key,\n  securityGroup: securityGroup,\n  serviceIpv4Cidr: 'serviceIpv4Cidr',\n  tags: {\n    tagsKey: 'tags',\n  },\n  vpc: vpc,\n  vpcSubnets: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n  }],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ClusterCommonOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 289
      },
      "name": "ClusterCommonOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Kubernetes version to run in the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 332
          },
          "name": "version",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The controller is not installed.",
            "see": "https://kubernetes-sigs.github.io/aws-load-balancer-controller",
            "stability": "experimental",
            "summary": "Install the AWS Load Balancer Controller onto the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 405
          },
          "name": "albController",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbControllerOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "The cluster log types which you want to enable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 412
          },
          "name": "clusterLogging",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.ClusterLoggingTypes"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name",
            "stability": "experimental",
            "summary": "Name for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 320
          },
          "name": "clusterName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CoreDnsComputeType.EC2 (for `FargateCluster` the default is FARGATE)",
            "stability": "experimental",
            "summary": "Controls the \"eks.amazonaws.com/compute-type\" annotation in the CoreDNS configuration on your cluster to determine which compute type to use for CoreDNS."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 351
          },
          "name": "coreDnsComputeType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.CoreDnsComputeType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "EndpointAccess.PUBLIC_AND_PRIVATE",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html",
            "stability": "experimental",
            "summary": "Configure access to the Kubernetes API server endpoint.."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 360
          },
          "name": "endpointAccess",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.EndpointAccess"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- IpFamily.IP_V4",
            "see": "https://docs.aws.amazon.com/eks/latest/APIReference/API_KubernetesNetworkConfigRequest.html#AmazonEKS-Type-KubernetesNetworkConfigRequest-ipFamily",
            "stability": "experimental",
            "summary": "Specify which IP family is used to assign Kubernetes pod and service IP addresses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 387
          },
          "name": "ipFamily",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IpFamily"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If defined, `kubectlLayer` is a required property.\n\nIf not defined, kubectl provider will not be created by default.",
            "stability": "experimental",
            "summary": "Options for creating the kubectl provider - a lambda function that executes `kubectl` and `helm` against the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 427
          },
          "name": "kubectlProviderOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no masters role.",
            "see": "https://kubernetes.io/docs/reference/access-authn-authz/rbac/#default-roles-and-role-bindings",
            "stability": "experimental",
            "summary": "An IAM role that will be added to the `system:masters` Kubernetes RBAC group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 342
          },
          "name": "mastersRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "When this is enabled (default), prune labels will be\nallocated and injected to each resource. These labels will then be used\nwhen issuing the `kubectl apply` operation with the `--prune` switch.",
            "stability": "experimental",
            "summary": "Indicates whether Kubernetes resources added through `addManifest()` can be automatically pruned."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 370
          },
          "name": "prune",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A role is automatically created for you",
            "stability": "experimental",
            "summary": "Role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 313
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- By default, Kubernetes stores all secret object data within etcd and\n  all etcd volumes used by Amazon EKS are encrypted at the disk-level\n  using AWS-Managed encryption keys.",
            "stability": "experimental",
            "summary": "KMS secret for envelope encryption for Kubernetes secrets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 379
          },
          "name": "secretsEncryptionKey",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_kms.IKey"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A security group is automatically created",
            "stability": "experimental",
            "summary": "Security Group to use for Control Plane ENIs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 327
          },
          "name": "securityGroup",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Kubernetes assigns addresses from either the\n  10.100.0.0/16 or 172.20.0.0/16 CIDR blocks",
            "see": "https://docs.aws.amazon.com/eks/latest/APIReference/API_KubernetesNetworkConfigRequest.html#AmazonEKS-Type-KubernetesNetworkConfigRequest-serviceIpv4Cidr",
            "stability": "experimental",
            "summary": "The CIDR block to assign Kubernetes service IP addresses from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 396
          },
          "name": "serviceIpv4Cidr",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "The tags assigned to the EKS cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 419
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a VPC with default configuration will be created and can be accessed through `cluster.vpc`.",
            "stability": "experimental",
            "summary": "The VPC in which to create the Cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 295
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All public and private subnets",
            "remarks": "For example, to only select private subnets, supply the following:\n\n`vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS }]`",
            "stability": "experimental",
            "summary": "Where to place EKS Control Plane ENIs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 306
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.SubnetSelection"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/cluster:ClusterCommonOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.ClusterLoggingTypes": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "EKS cluster logging types.",
        "example": "const cluster = new eks.Cluster(this, 'Cluster', {\n  // ...\n  version: eks.KubernetesVersion.V1_32,\n  clusterLogging: [\n    eks.ClusterLoggingTypes.API,\n    eks.ClusterLoggingTypes.AUTHENTICATOR,\n    eks.ClusterLoggingTypes.SCHEDULER,\n  ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ClusterLoggingTypes",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 700
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Logs pertaining to API requests to the cluster."
          },
          "name": "API"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Logs pertaining to cluster access via the Kubernetes API."
          },
          "name": "AUDIT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Logs pertaining to authentication requests into the cluster."
          },
          "name": "AUTHENTICATOR"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Logs pertaining to state of cluster controllers."
          },
          "name": "CONTROLLER_MANAGER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Logs pertaining to scheduling decisions."
          },
          "name": "SCHEDULER"
        }
      ],
      "name": "ClusterLoggingTypes",
      "symbolId": "lib/cluster:ClusterLoggingTypes"
    },
    "@aws-cdk/aws-eks-v2-alpha.ClusterProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for configuring a standard EKS cluster (non-Fargate).",
        "example": "const cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n  compute: {\n    nodePools: ['system', 'general-purpose'],\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ClusterProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.ClusterCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 552
      },
      "name": "ClusterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Changing this value after the cluster has been created will result in the cluster being replaced.",
            "stability": "experimental",
            "summary": "Whether or not IAM principal of the cluster creator was set as a cluster admin access entry during cluster creation time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 595
          },
          "name": "bootstrapClusterCreatorAdminPermissions",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Auto Mode compute disabled",
            "remarks": "When enabled, EKS will automatically manage compute resources.",
            "stability": "experimental",
            "summary": "Configuration for compute settings in Auto Mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 558
          },
          "name": "compute",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ComputeConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "2",
            "remarks": "Instance type can be configured through `defaultCapacityInstanceType`,\nwhich defaults to `m5.large`.\n\nUse `cluster.addAutoScalingGroupCapacity` to add additional customized capacity. Set this\nto `0` is you wish to avoid the initial capacity allocation.",
            "stability": "experimental",
            "summary": "Number of instances to allocate as an initial capacity for this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 570
          },
          "name": "defaultCapacity",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "m5.large",
            "remarks": "This will only be taken\ninto account if `defaultCapacity` is > 0.",
            "stability": "experimental",
            "summary": "The instance type to use for the default capacity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 578
          },
          "name": "defaultCapacityInstance",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "AUTOMODE",
            "stability": "experimental",
            "summary": "The default capacity type for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 585
          },
          "name": "defaultCapacityType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.DefaultCapacityType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This command will include\nthe cluster name and, if applicable, the ARN of the masters IAM role.",
            "stability": "experimental",
            "summary": "Determines whether a CloudFormation output with the `aws eks update-kubeconfig` command will be synthesized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 604
          },
          "name": "outputConfigCommand",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/cluster:ClusterProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.ComputeConfig": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "remarks": "When enabled, EKS will automatically manage compute resources like node groups and Fargate profiles.",
        "stability": "experimental",
        "summary": "Options for configuring EKS Auto Mode compute settings.",
        "example": "const cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n  compute: {\n    nodePools: ['system', 'general-purpose'],\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ComputeConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 526
      },
      "name": "ComputeConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- ['system', 'general-purpose']",
            "remarks": "You cannot modify the built in system and general-purpose node pools. You can only enable or disable them.\nNode pool values are case-sensitive and must be `general-purpose` and/or `system`.",
            "see": " - https://docs.aws.amazon.com/eks/latest/userguide/create-node-pool.html",
            "stability": "experimental",
            "summary": "Names of nodePools to include in Auto Mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 536
          },
          "name": "nodePools",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generated by the CDK",
            "see": " - https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html",
            "stability": "experimental",
            "summary": "IAM role for the nodePools."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 545
          },
          "name": "nodeRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/cluster:ComputeConfig"
    },
    "@aws-cdk/aws-eks-v2-alpha.CoreDnsComputeType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The type of compute resources to use for CoreDNS."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.CoreDnsComputeType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 2103
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Deploy CoreDNS on EC2 instances."
          },
          "name": "EC2"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Deploy CoreDNS on Fargate-managed instances."
          },
          "name": "FARGATE"
        }
      ],
      "name": "CoreDnsComputeType",
      "symbolId": "lib/cluster:CoreDnsComputeType"
    },
    "@aws-cdk/aws-eks-v2-alpha.CpuArch": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "CPU architecture."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.CpuArch",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 2088
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "arm64 CPU type."
          },
          "name": "ARM_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "x86_64 CPU type."
          },
          "name": "X86_64"
        }
      ],
      "name": "CpuArch",
      "symbolId": "lib/cluster:CpuArch"
    },
    "@aws-cdk/aws-eks-v2-alpha.DefaultCapacityType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The default capacity type for the cluster.",
        "example": "const cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.NODEGROUP,\n  defaultCapacity: 0,\n});\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  minSize: 4,\n  diskSize: 100,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.DefaultCapacityType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 2118
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "managed node group."
          },
          "name": "NODEGROUP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "EC2 autoscaling group."
          },
          "name": "EC2"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Auto Mode."
          },
          "name": "AUTOMODE"
        }
      ],
      "name": "DefaultCapacityType",
      "symbolId": "lib/cluster:DefaultCapacityType"
    },
    "@aws-cdk/aws-eks-v2-alpha.EksOptimizedImage": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Construct an Amazon Linux 2 image from the latest EKS Optimized AMI published in SSM.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst eksOptimizedImage = new eks_v2_alpha.EksOptimizedImage(/* all optional props */ {\n  cpuArch: eks_v2_alpha.CpuArch.ARM_64,\n  kubernetesVersion: 'kubernetesVersion',\n  nodeType: eks_v2_alpha.NodeType.STANDARD,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.EksOptimizedImage",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Constructs a new instance of the EcsOptimizedAmi class."
        },
        "locationInModule": {
          "filename": "lib/cluster.ts",
          "line": 2029
        },
        "parameters": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.EksOptimizedImageProps"
            }
          }
        ]
      },
      "interfaces": [
        "aws-cdk-lib.aws_ec2.IMachineImage"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 2020
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the correct image."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 2047
          },
          "name": "getImage",
          "overrides": "aws-cdk-lib.aws_ec2.IMachineImage",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_ec2.MachineImageConfig"
            }
          }
        }
      ],
      "name": "EksOptimizedImage",
      "symbolId": "lib/cluster:EksOptimizedImage"
    },
    "@aws-cdk/aws-eks-v2-alpha.EksOptimizedImageProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for EksOptimizedImage.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst eksOptimizedImageProps: eks_v2_alpha.EksOptimizedImageProps = {\n  cpuArch: eks_v2_alpha.CpuArch.ARM_64,\n  kubernetesVersion: 'kubernetesVersion',\n  nodeType: eks_v2_alpha.NodeType.STANDARD,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.EksOptimizedImageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 1994
      },
      "name": "EksOptimizedImageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "CpuArch.X86_64",
            "stability": "experimental",
            "summary": "What cpu architecture to retrieve the image for (arm64 or x86_64)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 2007
          },
          "name": "cpuArch",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.CpuArch"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The latest version",
            "stability": "experimental",
            "summary": "The Kubernetes version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 2014
          },
          "name": "kubernetesVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "NodeType.STANDARD",
            "stability": "experimental",
            "summary": "What instance type to retrieve the image for (standard or GPU-optimized)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 2000
          },
          "name": "nodeType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.NodeType"
          }
        }
      ],
      "symbolId": "lib/cluster:EksOptimizedImageProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.EndpointAccess": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Endpoint access characteristics.",
        "example": "const cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n  endpointAccess: eks.EndpointAccess.PRIVATE, // No access outside of your VPC.\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.EndpointAccess",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 457
      },
      "methods": [
        {
          "docs": {
            "remarks": "If public access is disabled, this method will result in an error.",
            "stability": "experimental",
            "summary": "Restrict public access to specific CIDR blocks."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 508
          },
          "name": "onlyFrom",
          "parameters": [
            {
              "docs": {
                "summary": "CIDR blocks."
              },
              "name": "cidr",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.EndpointAccess"
            }
          },
          "variadic": true
        }
      ],
      "name": "EndpointAccess",
      "properties": [
        {
          "const": true,
          "docs": {
            "remarks": "Worker node traffic to the endpoint will stay within your VPC.",
            "stability": "experimental",
            "summary": "The cluster endpoint is only accessible through your VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 475
          },
          "name": "PRIVATE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.EndpointAccess"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "Worker node traffic will leave your VPC to connect to the endpoint.\n\nBy default, the endpoint is exposed to all adresses. You can optionally limit the CIDR blocks that can access the public endpoint using the `PUBLIC.onlyFrom` method.\nIf you limit access to specific CIDR blocks, you must ensure that the CIDR blocks that you\nspecify include the addresses that worker nodes and Fargate pods (if you use them)\naccess the public endpoint from.",
            "stability": "experimental",
            "summary": "The cluster endpoint is accessible from outside of your VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 469
          },
          "name": "PUBLIC",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.EndpointAccess"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "Worker node traffic to the endpoint will stay within your VPC.\n\nBy default, the endpoint is exposed to all adresses. You can optionally limit the CIDR blocks that can access the public endpoint using the `PUBLIC_AND_PRIVATE.onlyFrom` method.\nIf you limit access to specific CIDR blocks, you must ensure that the CIDR blocks that you\nspecify include the addresses that worker nodes and Fargate pods (if you use them)\naccess the public endpoint from.",
            "stability": "experimental",
            "summary": "The cluster endpoint is accessible from outside of your VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 488
          },
          "name": "PUBLIC_AND_PRIVATE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.EndpointAccess"
          }
        }
      ],
      "symbolId": "lib/cluster:EndpointAccess"
    },
    "@aws-cdk/aws-eks-v2-alpha.FargateCluster": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "@aws-cdk/aws-eks-v2-alpha.Cluster",
      "docs": {
        "remarks": "The cluster is created with a default Fargate Profile that matches the\n\"default\" and \"kube-system\" namespaces. You can add additional profiles using\n`addFargateProfile`.",
        "stability": "experimental",
        "summary": "Defines an EKS cluster that runs entirely on AWS Fargate.",
        "example": "const cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_32,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateCluster",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/fargate-cluster.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateClusterProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate-cluster.ts",
        "line": 26
      },
      "name": "FargateCluster",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Fargate Profile that was created with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-cluster.ts",
            "line": 30
          },
          "name": "defaultProfile",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfile"
          }
        }
      ],
      "symbolId": "lib/fargate-cluster:FargateCluster"
    },
    "@aws-cdk/aws-eks-v2-alpha.FargateClusterProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration props for EKS Fargate.",
        "example": "const cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_32,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateClusterProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.ClusterCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate-cluster.ts",
        "line": 9
      },
      "name": "FargateClusterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- A profile called \"default\" with 'default' and 'kube-system'\n  selectors will be created if this is left undefined.",
            "stability": "experimental",
            "summary": "Fargate Profile to create along with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-cluster.ts",
            "line": 16
          },
          "name": "defaultProfile",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfileOptions"
          }
        }
      ],
      "symbolId": "lib/fargate-cluster:FargateClusterProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.FargateProfile": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "This declaration is done through the profile’s selectors. Each\nprofile can have up to five selectors that contain a namespace and optional\nlabels. You must define a namespace for every selector. The label field\nconsists of multiple optional key-value pairs. Pods that match a selector (by\nmatching a namespace for the selector and all of the labels specified in the\nselector) are scheduled on Fargate. If a namespace selector is defined\nwithout any labels, Amazon EKS will attempt to schedule all pods that run in\nthat namespace onto Fargate using the profile. If a to-be-scheduled pod\nmatches any of the selectors in the Fargate profile, then that pod is\nscheduled on Fargate.\n\nIf a pod matches multiple Fargate profiles, Amazon EKS picks one of the\nmatches at random. In this case, you can specify which profile a pod should\nuse by adding the following Kubernetes label to the pod specification:\neks.amazonaws.com/fargate-profile: profile_name. However, the pod must still\nmatch a selector in that profile in order to be scheduled onto Fargate.",
        "stability": "experimental",
        "summary": "Fargate profiles allows an administrator to declare which pods run on Fargate.",
        "example": "declare const cluster: eks.Cluster;\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/fargate-profile.ts",
          "line": 141
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfileProps"
            }
          }
        ]
      },
      "interfaces": [
        "aws-cdk-lib.ITaggable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate-profile.ts",
        "line": 113
      },
      "name": "FargateProfile",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The full Amazon Resource Name (ARN) of the Fargate profile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 119
          },
          "name": "fargateProfileArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the Fargate profile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 126
          },
          "name": "fargateProfileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "The pod execution role allows Fargate infrastructure to\nregister with your cluster as a node, and it provides read access to Amazon\nECR image repositories.",
            "stability": "experimental",
            "summary": "The pod execution role to use for pods that match the selectors in the Fargate profile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 139
          },
          "name": "podExecutionRole",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resource tags."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 131
          },
          "name": "tags",
          "overrides": "aws-cdk-lib.ITaggable",
          "type": {
            "fqn": "aws-cdk-lib.TagManager"
          }
        }
      ],
      "symbolId": "lib/fargate-profile:FargateProfile"
    },
    "@aws-cdk/aws-eks-v2-alpha.FargateProfileOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for defining EKS Fargate Profiles.",
        "example": "declare const cluster: eks.Cluster;\ncluster.addFargateProfile('MyProfile', {\n  selectors: [ { namespace: 'default' } ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate-profile.ts",
        "line": 11
      },
      "name": "FargateProfileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Each selector\nmust have an associated namespace. Optionally, you can also specify labels\nfor a namespace.\n\nAt least one selector is required and you may specify up to five selectors.",
            "stability": "experimental",
            "summary": "The selectors to match for pods to use this Fargate profile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 36
          },
          "name": "selectors",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.Selector"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generated",
            "stability": "experimental",
            "summary": "The name of the Fargate profile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 16
          },
          "name": "fargateProfileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a role will be automatically created",
            "remarks": "The pod execution role allows Fargate infrastructure to\nregister with your cluster as a node, and it provides read access to Amazon\nECR image repositories.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html",
            "stability": "experimental",
            "summary": "The pod execution role to use for pods that match the selectors in the Fargate profile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 27
          },
          "name": "podExecutionRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all private subnets of the VPC are selected.",
            "remarks": "At this time, pods running\non Fargate are not assigned public IP addresses, so only private subnets\n(with no direct route to an Internet Gateway) are allowed.\n\nYou must specify the VPC to customize the subnet selection",
            "stability": "experimental",
            "summary": "Select which subnets to launch your pods into."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 57
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all private subnets used by the EKS cluster",
            "remarks": "By default, all private subnets are selected. You can customize this using\n`subnetSelection`.",
            "stability": "experimental",
            "summary": "The VPC from which to select subnets to launch your pods into."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 46
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/fargate-profile:FargateProfileOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.FargateProfileProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration props for EKS Fargate Profiles.",
        "example": "declare const cluster: eks.Cluster;\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.FargateProfileProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.FargateProfileOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate-profile.ts",
        "line": 63
      },
      "name": "FargateProfileProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "experimental",
            "summary": "The EKS cluster to apply the Fargate profile to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 68
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.Cluster"
          }
        }
      ],
      "symbolId": "lib/fargate-profile:FargateProfileProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.HelmChart": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "Applies/deletes the resources using `kubectl` in sync with the resource.",
        "stability": "experimental",
        "summary": "Represents a helm chart within the Kubernetes system.",
        "example": "declare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'MyOCIChart', {\n  cluster,\n  chart: 'some-chart',\n  repository: 'oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}',\n  namespace: 'oci',\n  version: '0.0.1'\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChart",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/helm-chart.ts",
          "line": 124
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChartProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/helm-chart.ts",
        "line": 113
      },
      "name": "HelmChart",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CloudFormation resource type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 117
          },
          "name": "RESOURCE_TYPE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 122
          },
          "name": "atomic",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 118
          },
          "name": "chart",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 121
          },
          "name": "chartAsset",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_s3_assets.Asset"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 119
          },
          "name": "repository",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 120
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/helm-chart:HelmChart"
    },
    "@aws-cdk/aws-eks-v2-alpha.HelmChartOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Helm Chart options.",
        "example": "import * as s3Assets from 'aws-cdk-lib/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChartOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/helm-chart.ts",
        "line": 11
      },
      "name": "HelmChartOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "if set, upgrade process rolls back changes\nmade in case of failed upgrade. The --wait flag will be set automatically if --atomic is used.",
            "stability": "experimental",
            "summary": "Whether or not Helm should treat this operation as atomic;"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 81
          },
          "name": "atomic",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No chart name. Implies `chartAsset` is used.",
            "remarks": "Either this or `chartAsset` must be specified.",
            "stability": "experimental",
            "summary": "The name of the chart."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 18
          },
          "name": "chart",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No chart asset. Implies `chart` is used.",
            "remarks": "Either this or `chart` must be specified.",
            "stability": "experimental",
            "summary": "The chart in the form of an asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 44
          },
          "name": "chartAsset",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_s3_assets.Asset"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "create namespace if not exist."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 87
          },
          "name": "createNamespace",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "default",
            "stability": "experimental",
            "summary": "The Kubernetes namespace scope of the requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 50
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If no release name is given, it will use the last 53 characters of the node's unique id.",
            "stability": "experimental",
            "summary": "The name of the release."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 24
          },
          "name": "release",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No repository will be used, which means that the chart needs to be an absolute URL.",
            "remarks": "For example: https://charts.helm.sh/stable/",
            "stability": "experimental",
            "summary": "The repository which contains the chart."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 36
          },
          "name": "repository",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CRDs are installed if not already present",
            "stability": "experimental",
            "summary": "if set, no CRDs will be installed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 93
          },
          "name": "skipCrds",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "remarks": "Maximum 15 minutes.",
            "stability": "experimental",
            "summary": "Amount of time to wait for any individual Kubernetes operation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 74
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No values are provided to the chart.",
            "remarks": "For nested values use a nested dictionary. For example:\nvalues: {\n installationCRDs: true,\n webhook: { port: 9443 }\n}",
            "stability": "experimental",
            "summary": "The values to be used by the chart."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 61
          },
          "name": "values",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If this is not specified, the latest version is installed",
            "stability": "experimental",
            "summary": "The chart version to install."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 30
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Helm will not wait before marking release as successful",
            "stability": "experimental",
            "summary": "Whether or not Helm should wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 68
          },
          "name": "wait",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/helm-chart:HelmChartOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.HelmChartProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Helm Chart properties.",
        "example": "declare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'MyOCIChart', {\n  cluster,\n  chart: 'some-chart',\n  repository: 'oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}',\n  namespace: 'oci',\n  version: '0.0.1'\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChartProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.HelmChartOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/helm-chart.ts",
        "line": 99
      },
      "name": "HelmChartProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "experimental",
            "summary": "The EKS cluster to apply this configuration to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/helm-chart.ts",
            "line": 105
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        }
      ],
      "symbolId": "lib/helm-chart:HelmChartProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.IAccessEntry": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "custom": {
          "extends": "IResource *",
          "interface": "IAccessEntry",
          "property": "{string} accessEntryArn - The Amazon Resource Name (ARN) of the access entry."
        },
        "remarks": "An access entry defines the permissions and scope for a user or role to access an Amazon EKS cluster.",
        "stability": "experimental",
        "summary": "Represents an access entry in an Amazon EKS cluster."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.IAccessEntry",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 17
      },
      "name": "IAccessEntry",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The Amazon Resource Name (ARN) of the access entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 27
          },
          "name": "accessEntryArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the access entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 22
          },
          "name": "accessEntryName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/access-entry:IAccessEntry"
    },
    "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "custom": {
          "interface": "IAccessPolicy"
        },
        "stability": "experimental",
        "summary": "Represents an access policy that defines the permissions and scope for a user or role to access an Amazon EKS cluster."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.IAccessPolicy",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-entry.ts",
        "line": 152
      },
      "name": "IAccessPolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope of the access policy, which determines the level of access granted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 156
          },
          "name": "accessScope",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AccessScope"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The access policy itself, which defines the specific permissions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-entry.ts",
            "line": 160
          },
          "name": "policy",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/access-entry:IAccessPolicy"
    },
    "@aws-cdk/aws-eks-v2-alpha.IAddon": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an Amazon EKS Add-On."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.IAddon",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/addon.ts",
        "line": 10
      },
      "name": "IAddon",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "ARN of the Add-On."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 20
          },
          "name": "addonArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "Name of the Add-On."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/addon.ts",
            "line": 15
          },
          "name": "addonName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/addon:IAddon"
    },
    "@aws-cdk/aws-eks-v2-alpha.ICluster": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "An EKS cluster."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster",
      "interfaces": [
        "aws-cdk-lib.IResource",
        "aws-cdk-lib.aws_ec2.IConnectable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 36
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "returns": "a `KubernetesManifest` construct representing the chart.",
            "stability": "experimental",
            "summary": "Defines a CDK8s chart in this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 170
          },
          "name": "addCdk8sChart",
          "parameters": [
            {
              "docs": {
                "summary": "logical id of this chart."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the cdk8s chart."
              },
              "name": "chart",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifest"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "returns": "a `HelmChart` construct",
            "stability": "experimental",
            "summary": "Defines a Helm chart in this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 161
          },
          "name": "addHelmChart",
          "parameters": [
            {
              "docs": {
                "summary": "logical id of this chart."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "options of this chart."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChartOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.HelmChart"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The manifest will be applied/deleted using kubectl as needed.",
            "returns": "a `KubernetesManifest` object.",
            "stability": "experimental",
            "summary": "Defines a Kubernetes resource in this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 152
          },
          "name": "addManifest",
          "parameters": [
            {
              "docs": {
                "summary": "logical id of this manifest."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "a list of Kubernetes resource specifications."
              },
              "name": "manifest",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifest"
            }
          },
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Creates a new service account with corresponding IAM Role (IRSA)."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 141
          },
          "name": "addServiceAccount",
          "parameters": [
            {
              "docs": {
                "summary": "logical id of service account."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "service account options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccountOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccount"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The AutoScalingGroup must be running an EKS-optimized AMI containing the\n/etc/eks/bootstrap.sh script. This method will configure Security Groups,\nadd the right policies to the instance role, apply the right tags, and add\nthe required user data to the instance's launch configuration.\n\nSpot instances will be labeled `lifecycle=Ec2Spot` and tainted with `PreferNoSchedule`.\nIf kubectl is enabled, the\n[spot interrupt handler](https://github.com/awslabs/ec2-spot-labs/tree/master/ec2-spot-eks-solution/spot-termination-handler)\ndaemon will be installed on all spot instances to handle\n[EC2 Spot Instance Termination Notices](https://aws.amazon.com/blogs/aws/new-ec2-spot-instance-termination-notices/).\n\nPrefer to use `addAutoScalingGroupCapacity` if possible.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html",
            "stability": "experimental",
            "summary": "Connect capacity in the form of an existing AutoScalingGroup to the EKS cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 192
          },
          "name": "connectAutoScalingGroupCapacity",
          "parameters": [
            {
              "docs": {
                "summary": "[disable-awslint:ref-via-interface]."
              },
              "name": "autoScalingGroup",
              "type": {
                "fqn": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup"
              }
            },
            {
              "docs": {
                "summary": "options for adding auto scaling groups, like customizing the bootstrap script."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.AutoScalingGroupOptions"
              }
            }
          ]
        }
      ],
      "name": "ICluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The unique ARN assigned to the service by AWS in the form of arn:aws:eks:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 53
          },
          "name": "clusterArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The certificate-authority-data for your cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 65
          },
          "name": "clusterCertificateAuthorityData",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "Amazon Resource Name (ARN) or alias of the customer master key (CMK)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 83
          },
          "name": "clusterEncryptionConfigKeyArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The API Server endpoint URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 59
          },
          "name": "clusterEndpoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The physical name of the Cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 46
          },
          "name": "clusterName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The cluster security group that was created by Amazon EKS for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 77
          },
          "name": "clusterSecurityGroup",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The id of the cluster security group that was created by Amazon EKS for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 71
          },
          "name": "clusterSecurityGroupId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Open ID Connect Provider of the cluster used to configure Service Accounts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 88
          },
          "name": "openIdConnectProvider",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IOpenIdConnectProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "When\nthis is enabled (default), prune labels will be allocated and injected to\neach resource. These labels will then be used when issuing the `kubectl\napply` operation with the `--prune` switch.",
            "stability": "experimental",
            "summary": "Indicates whether Kubernetes resources can be automatically pruned."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 133
          },
          "name": "prune",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The VPC in which this Cluster was created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 40
          },
          "name": "vpc",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The EKS Pod Identity Agent is responsible for managing the temporary credentials\nused by pods in the cluster to access AWS resources. It runs as a DaemonSet on\neach node and provides the necessary credentials to the pods based on their\nassociated service account.\n\nThis property returns the `CfnAddon` resource representing the EKS Pod Identity\nAgent addon. If the addon has not been created yet, it will be created and\nreturned.",
            "stability": "experimental",
            "summary": "The EKS Pod Identity Agent addon for the EKS cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 102
          },
          "name": "eksPodIdentityAgent",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IAddon"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- IpFamily.IP_V4",
            "see": "https://docs.aws.amazon.com/eks/latest/APIReference/API_KubernetesNetworkConfigRequest.html#AmazonEKS-Type-KubernetesNetworkConfigRequest-ipFamily",
            "stability": "experimental",
            "summary": "Specify which IP family is used to assign Kubernetes pod and service IP addresses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 110
          },
          "name": "ipFamily",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IpFamily"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If not defined, a default provider will be used",
            "stability": "experimental",
            "summary": "Kubectl Provider for issuing kubectl commands against it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 125
          },
          "name": "kubectlProvider",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If defined, `kubectlLayer` is a required property.\n\nIf not defined, kubectl provider will not be created by default.",
            "stability": "experimental",
            "summary": "Options for creating the kubectl provider - a lambda function that executes `kubectl` and `helm` against the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 118
          },
          "name": "kubectlProviderOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderOptions"
          }
        }
      ],
      "symbolId": "lib/cluster:ICluster"
    },
    "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Imported KubectlProvider that can be used in place of the default one created by CDK."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider",
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kubectl-provider.ts",
        "line": 92
      },
      "name": "IKubectlProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The custom resource provider's service token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 96
          },
          "name": "serviceToken",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If undefined,\nyou cannot use this provider to deploy helm charts.",
            "stability": "experimental",
            "summary": "The role of the provider lambda function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 102
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/kubectl-provider:IKubectlProvider"
    },
    "@aws-cdk/aws-eks-v2-alpha.INodegroup": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "NodeGroup interface."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.INodegroup",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 14
      },
      "name": "INodegroup",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "Name of the nodegroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 19
          },
          "name": "nodegroupName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/managed-nodegroup:INodegroup"
    },
    "@aws-cdk/aws-eks-v2-alpha.IdentityType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Enum representing the different identity types that can be used for a Kubernetes service account."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.IdentityType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service-account.ts",
        "line": 15
      },
      "members": [
        {
          "docs": {
            "remarks": "IRSA allows you to associate an IAM role with a Kubernetes service account.\nThis provides a way to grant permissions to Kubernetes pods by associating an IAM role with a Kubernetes service account.\nThe IAM role can then be used to provide AWS credentials to the pods, allowing them to access other AWS resources.\n\nWhen enabled, the openIdConnectProvider of the cluster would be created when you create the ServiceAccount.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html",
            "stability": "experimental",
            "summary": "Use the IAM Roles for Service Accounts (IRSA) identity type."
          },
          "name": "IRSA"
        },
        {
          "docs": {
            "remarks": "EKS Pod Identities provide the ability to manage credentials for your applications, similar to the way that Amazon EC2 instance profiles\nprovide credentials to Amazon EC2 instances. Instead of creating and distributing your AWS credentials to the containers or using the\nAmazon EC2 instance's role, you associate an IAM role with a Kubernetes service account and configure your Pods to use the service account.\n\nWhen enabled, the Pod Identity Agent AddOn of the cluster would be created when you create the ServiceAccount.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html",
            "stability": "experimental",
            "summary": "Use the EKS Pod Identities identity type."
          },
          "name": "POD_IDENTITY"
        }
      ],
      "name": "IdentityType",
      "symbolId": "lib/service-account:IdentityType"
    },
    "@aws-cdk/aws-eks-v2-alpha.IngressLoadBalancerAddressOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for fetching an IngressLoadBalancerAddress.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nimport * as cdk from 'aws-cdk-lib';\nconst ingressLoadBalancerAddressOptions: eks_v2_alpha.IngressLoadBalancerAddressOptions = {\n  namespace: 'namespace',\n  timeout: cdk.Duration.minutes(30),\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.IngressLoadBalancerAddressOptions",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.ServiceLoadBalancerAddressOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 908
      },
      "name": "IngressLoadBalancerAddressOptions",
      "symbolId": "lib/cluster:IngressLoadBalancerAddressOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.IpFamily": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "EKS cluster IP family."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.IpFamily",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 726
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use IPv4 for pods and services in your cluster."
          },
          "name": "IP_V4"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use IPv6 for pods and services in your cluster."
          },
          "name": "IP_V6"
        }
      ],
      "name": "IpFamily",
      "symbolId": "lib/cluster:IpFamily"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubectlProvider": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Implementation of Kubectl Lambda.",
        "example": "import { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\n// get the serivceToken from the custom resource provider\nconst functionArn = lambda.Function.fromFunctionName(this, 'ProviderOnEventFunc', 'ProviderframeworkonEvent-XXX').functionArn;\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  serviceToken: functionArn,\n  role: handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProvider",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/kubectl-provider.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/kubectl-provider.ts",
        "line": 108
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an existing provider."
          },
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 132
          },
          "name": "fromKubectlProviderAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "Construct."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "an id of resource."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "attributes for the provider."
              },
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Take existing provider on cluster."
          },
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 115
          },
          "name": "getKubectlProvider",
          "parameters": [
            {
              "docs": {
                "summary": "Construct."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "k8s cluster."
              },
              "name": "cluster",
              "type": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider"
            }
          },
          "static": true
        }
      ],
      "name": "KubectlProvider",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The custom resource provider's service token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 143
          },
          "name": "serviceToken",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The IAM execution role of the handler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 148
          },
          "name": "role",
          "optional": true,
          "overrides": "@aws-cdk/aws-eks-v2-alpha.IKubectlProvider",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/kubectl-provider:KubectlProvider"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubectlProviderAttributes": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Kubectl Provider Attributes.",
        "example": "import { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\n// get the serivceToken from the custom resource provider\nconst functionArn = lambda.Function.fromFunctionName(this, 'ProviderOnEventFunc', 'ProviderframeworkonEvent-XXX').functionArn;\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  serviceToken: functionArn,\n  role: handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kubectl-provider.ts",
        "line": 74
      },
      "name": "KubectlProviderAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The kubectl provider lambda arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 78
          },
          "name": "serviceToken",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no role.",
            "remarks": "Only required if you deploy helm charts using this imported provider.",
            "stability": "experimental",
            "summary": "The role of the provider lambda function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 86
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/kubectl-provider:KubectlProviderAttributes"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubectlProviderOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "example": "import { KubectlV32Layer } from '@aws-cdk/lambda-layer-kubectl-v32';\n\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_32,\n  kubectlProviderOptions: {\n    kubectlLayer: new KubectlV32Layer(this, 'kubectl'),\n    environment: {\n        'http_proxy': 'http://proxy.myproxy.com',\n    },\n  }\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kubectl-provider.ts",
        "line": 11
      },
      "name": "KubectlProviderOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "An AWS Lambda layer that includes `kubectl` and `helm`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 52
          },
          "name": "kubectlLayer",
          "type": {
            "fqn": "aws-cdk-lib.aws_lambda.ILayerVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If not defined, a default layer will be used containing the AWS CLI 2.x.",
            "stability": "experimental",
            "summary": "An AWS Lambda layer that contains the `aws` CLI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 28
          },
          "name": "awscliLayer",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_lambda.ILayerVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Custom environment variables when running `kubectl` against this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 34
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The amount of memory allocated to the kubectl provider's lambda function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 47
          },
          "name": "memory",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If not specified, the k8s\nendpoint is expected to be accessible publicly.",
            "stability": "experimental",
            "summary": "Subnets to host the `kubectl` compute resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 58
          },
          "name": "privateSubnets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISubnet"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if not specified, the default role created by a lambda function will\nbe used.",
            "remarks": "The role should be mapped to the `system:masters` Kubernetes RBAC role.\n\nThis role is directly passed to the lambda handler that sends Kube Ctl commands to the cluster.",
            "stability": "experimental",
            "summary": "An IAM role that can perform kubectl operations against this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 21
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If not specified, the k8s endpoint is expected to be accessible\npublicly.",
            "stability": "experimental",
            "summary": "A security group to use for `kubectl` execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 42
          },
          "name": "securityGroup",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
          }
        }
      ],
      "symbolId": "lib/kubectl-provider:KubectlProviderOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubectlProviderProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for a KubectlProvider.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nimport * as cdk from 'aws-cdk-lib';\nimport { aws_ec2 as ec2 } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const cluster: eks_v2_alpha.Cluster;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const size: cdk.Size;\ndeclare const subnet: ec2.Subnet;\nconst kubectlProviderProps: eks_v2_alpha.KubectlProviderProps = {\n  cluster: cluster,\n  kubectlLayer: layerVersion,\n\n  // the properties below are optional\n  awscliLayer: layerVersion,\n  environment: {\n    environmentKey: 'environment',\n  },\n  memory: size,\n  privateSubnets: [subnet],\n  role: role,\n  securityGroup: securityGroup,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubectlProviderProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.KubectlProviderOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kubectl-provider.ts",
        "line": 64
      },
      "name": "KubectlProviderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The cluster to control."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kubectl-provider.ts",
            "line": 68
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        }
      ],
      "symbolId": "lib/kubectl-provider:KubectlProviderProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesManifest": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "Alternatively, you can use `cluster.addManifest(resource[, resource, ...])`\nto define resources on this cluster.\n\nApplies/deletes the manifest using `kubectl`.",
        "stability": "experimental",
        "summary": "Represents a manifest within the Kubernetes system.",
        "example": "declare const cluster: eks.Cluster;\nconst namespace = cluster.addManifest('my-namespace', {\n  apiVersion: 'v1',\n  kind: 'Namespace',\n  metadata: { name: 'my-app' },\n});\n\nconst service = cluster.addManifest('my-service', {\n  metadata: {\n    name: 'myservice',\n    namespace: 'my-app',\n  },\n  spec: { }, // ...\n});\n\nservice.node.addDependency(namespace); // will apply `my-namespace` before `my-service`.",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifest",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/k8s-manifest.ts",
          "line": 123
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/k8s-manifest.ts",
        "line": 117
      },
      "name": "KubernetesManifest",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CloudFormation resource type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 121
          },
          "name": "RESOURCE_TYPE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/k8s-manifest:KubernetesManifest"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `KubernetesManifest`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst kubernetesManifestOptions: eks_v2_alpha.KubernetesManifestOptions = {\n  ingressAlb: false,\n  ingressAlbScheme: eks_v2_alpha.AlbScheme.INTERNAL,\n  prune: false,\n  skipValidation: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/k8s-manifest.ts",
        "line": 12
      },
      "name": "KubernetesManifestOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Automatically detect `Ingress` resources in the manifest and annotate them so they are picked up by an ALB Ingress Controller."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 51
          },
          "name": "ingressAlb",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "AlbScheme.INTERNAL",
            "remarks": "Only applicable if `ingressAlb` is set to `true`.",
            "stability": "experimental",
            "summary": "Specify the ALB scheme that should be applied to `Ingress` resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 59
          },
          "name": "ingressAlbScheme",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.AlbScheme"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- based on the prune option of the cluster, which is `true` unless\notherwise specified.",
            "remarks": "To address this, `kubectl apply` has a `--prune` option which will\nquery the cluster for all resources with a specific label and will remove\nall the labeld resources that are not part of the applied manifest. If this\noption is disabled and a resource is removed, it will become \"orphaned\" and\nwill not be deleted from the cluster.\n\nWhen this option is enabled (default), the construct will inject a label to\nall Kubernetes resources included in this manifest which will be used to\nprune resources when the manifest changes via `kubectl apply --prune`.\n\nThe label name will be `aws.cdk.eks/prune-<ADDR>` where `<ADDR>` is the\n42-char unique address of this construct in the construct tree. Value is\nempty.",
            "see": "https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/#alternative-kubectl-apply-f-directory-prune-l-your-label",
            "stability": "experimental",
            "summary": "When a resource is removed from a Kubernetes manifest, it no longer appears in the manifest, and there is no way to know that this resource needs to be deleted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 36
          },
          "name": "prune",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "A flag to signify if the manifest validation should be skipped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 43
          },
          "name": "skipValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/k8s-manifest:KubernetesManifestOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for KubernetesManifest.",
        "example": "declare const cluster: eks.Cluster;\nconst appLabel = { app: \"hello-kubernetes\" };\n\nconst deployment = {\n  apiVersion: \"apps/v1\",\n  kind: \"Deployment\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    replicas: 3,\n    selector: { matchLabels: appLabel },\n    template: {\n      metadata: { labels: appLabel },\n      spec: {\n        containers: [\n          {\n            name: \"hello-kubernetes\",\n            image: \"paulbouwer/hello-kubernetes:1.5\",\n            ports: [ { containerPort: 8080 } ],\n          },\n        ],\n      },\n    },\n  },\n};\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [ { port: 80, targetPort: 8080 } ],\n    selector: appLabel,\n  }\n};\n\n// option 1: use a construct\nnew eks.KubernetesManifest(this, 'hello-kub', {\n  cluster,\n  manifest: [ deployment, service ],\n});\n\n// or, option2: use `addManifest`\ncluster.addManifest('hello-kub', service, deployment);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.KubernetesManifestOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/k8s-manifest.ts",
        "line": 66
      },
      "name": "KubernetesManifestProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "experimental",
            "summary": "The EKS cluster to apply this manifest to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 72
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "example": "[{\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    containers: [ { name: 'hello', image: 'paulbouwer/hello-kubernetes:1.5', ports: [ { containerPort: 8080 } ] } ]\n  }\n}]",
            "remarks": "Consists of any number of child resources.\n\nWhen the resources are created/updated, this manifest will be applied to the\ncluster through `kubectl apply` and when the resources or the stack is\ndeleted, the resources in the manifest will be deleted through `kubectl delete`.",
            "stability": "experimental",
            "summary": "The manifest to apply."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 95
          },
          "name": "manifest",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If this is set, we will use `kubectl apply` instead of `kubectl create`\nwhen the resource is created. Otherwise, if there is already a resource\nin the cluster with the same name, the operation will fail.",
            "stability": "experimental",
            "summary": "Overwrite any existing resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-manifest.ts",
            "line": 106
          },
          "name": "overwrite",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/k8s-manifest:KubernetesManifestProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesObjectValue": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "Use this to fetch any information available by the `kubectl get` command.",
        "stability": "experimental",
        "summary": "Represents a value of a specific object deployed in the cluster.",
        "example": "declare const cluster: eks.Cluster;\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_LATEST,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesObjectValue",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/k8s-object-value.ts",
          "line": 62
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesObjectValueProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/k8s-object-value.ts",
        "line": 54
      },
      "name": "KubernetesObjectValue",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CloudFormation resource type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 58
          },
          "name": "RESOURCE_TYPE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The value as a string token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 88
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/k8s-object-value:KubernetesObjectValue"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesObjectValueProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for KubernetesObjectValue.",
        "example": "declare const cluster: eks.Cluster;\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_LATEST,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesObjectValueProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/k8s-object-value.ts",
        "line": 9
      },
      "name": "KubernetesObjectValueProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "experimental",
            "summary": "The EKS cluster to fetch attributes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 15
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "https://kubernetes.io/docs/reference/kubectl/jsonpath/",
            "stability": "experimental",
            "summary": "JSONPath to the specific value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 39
          },
          "name": "jsonPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the object to query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 25
          },
          "name": "objectName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "(e.g 'service', 'pod'...)",
            "stability": "experimental",
            "summary": "The object type to query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 20
          },
          "name": "objectType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'default'",
            "stability": "experimental",
            "summary": "The namespace the object belongs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 32
          },
          "name": "objectNamespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "stability": "experimental",
            "summary": "Timeout for waiting on a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-object-value.ts",
            "line": 46
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/k8s-object-value:KubernetesObjectValueProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesPatch": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "see": "https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/",
        "stability": "experimental",
        "summary": "A CloudFormation resource which applies/restores a JSON patch into a Kubernetes resource.",
        "example": "declare const cluster: eks.Cluster;\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesPatch",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/k8s-patch.ts",
          "line": 71
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesPatchProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/k8s-patch.ts",
        "line": 70
      },
      "name": "KubernetesPatch",
      "symbolId": "lib/k8s-patch:KubernetesPatch"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesPatchProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for KubernetesPatch.",
        "example": "declare const cluster: eks.Cluster;\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesPatchProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/k8s-patch.ts",
        "line": 9
      },
      "name": "KubernetesPatchProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The JSON object to pass to `kubectl patch` when the resource is created/updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-patch.ts",
            "line": 19
          },
          "name": "applyPatch",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "experimental",
            "summary": "The cluster to apply the patch to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-patch.ts",
            "line": 14
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The full name of the resource to patch (e.g. `deployment/coredns`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-patch.ts",
            "line": 29
          },
          "name": "resourceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The JSON object to pass to `kubectl patch` when the resource is removed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-patch.ts",
            "line": 24
          },
          "name": "restorePatch",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "PatchType.STRATEGIC",
            "remarks": "The default type used by `kubectl patch` is \"strategic\".",
            "stability": "experimental",
            "summary": "The patch type to pass to `kubectl patch`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-patch.ts",
            "line": 44
          },
          "name": "patchType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.PatchType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"default\"",
            "stability": "experimental",
            "summary": "The kubernetes API namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/k8s-patch.ts",
            "line": 36
          },
          "name": "resourceNamespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/k8s-patch:KubernetesPatchProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "see": "https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html#kubernetes-release-calendar",
        "stability": "experimental",
        "summary": "Kubernetes cluster version.",
        "example": "const cluster = new eks.Cluster(this, 'EksAutoCluster', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.AUTOMODE,\n  compute: {\n    nodePools: ['system', 'general-purpose'],\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 611
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Custom cluster version."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 688
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "custom version number."
              },
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
            }
          },
          "static": true
        }
      ],
      "name": "KubernetesVersion",
      "properties": [
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV25Layer` from\n`@aws-cdk/lambda-layer-kubectl-v25`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 619
          },
          "name": "V1_25",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV26Layer` from\n`@aws-cdk/lambda-layer-kubectl-v26`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.26."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 628
          },
          "name": "V1_26",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV27Layer` from\n`@aws-cdk/lambda-layer-kubectl-v27`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.27."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 637
          },
          "name": "V1_27",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV28Layer` from\n`@aws-cdk/lambda-layer-kubectl-v28`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.28."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 646
          },
          "name": "V1_28",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV29Layer` from\n`@aws-cdk/lambda-layer-kubectl-v29`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.29."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 655
          },
          "name": "V1_29",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV30Layer` from\n`@aws-cdk/lambda-layer-kubectl-v30`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.30."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 664
          },
          "name": "V1_30",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV31Layer` from\n`@aws-cdk/lambda-layer-kubectl-v31`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.31."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 673
          },
          "name": "V1_31",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "When creating a `Cluster` with this version, you need to also specify the\n`kubectlLayer` property with a `KubectlV32Layer` from\n`@aws-cdk/lambda-layer-kubectl-v32`.",
            "stability": "experimental",
            "summary": "Kubernetes version 1.32."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 682
          },
          "name": "V1_32",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.KubernetesVersion"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "cluster version number."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 693
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cluster:KubernetesVersion"
    },
    "@aws-cdk/aws-eks-v2-alpha.LaunchTemplateSpec": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Launch template property specification.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst launchTemplateSpec: eks_v2_alpha.LaunchTemplateSpec = {\n  id: 'id',\n\n  // the properties below are optional\n  version: 'version',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.LaunchTemplateSpec",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 135
      },
      "name": "LaunchTemplateSpec",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Launch template ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 139
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the default version of the launch template",
            "stability": "experimental",
            "summary": "The launch template version to be used (optional)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 145
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/managed-nodegroup:LaunchTemplateSpec"
    },
    "@aws-cdk/aws-eks-v2-alpha.MachineImageType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The machine image type."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.MachineImageType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 2136
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon EKS-optimized Linux AMI."
          },
          "name": "AMAZON_LINUX_2"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bottlerocket AMI."
          },
          "name": "BOTTLEROCKET"
        }
      ],
      "name": "MachineImageType",
      "symbolId": "lib/cluster:MachineImageType"
    },
    "@aws-cdk/aws-eks-v2-alpha.NodeType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Whether the worker nodes should support GPU or just standard instances."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.NodeType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 2063
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Standard instances."
          },
          "name": "STANDARD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "GPU instances."
          },
          "name": "GPU"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Inferentia instances."
          },
          "name": "INFERENTIA"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Trainium instances."
          },
          "name": "TRAINIUM"
        }
      ],
      "name": "NodeType",
      "symbolId": "lib/cluster:NodeType"
    },
    "@aws-cdk/aws-eks-v2-alpha.Nodegroup": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::EKS::Nodegroup",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "experimental",
        "summary": "The Nodegroup resource class.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nimport { aws_ec2 as ec2 } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const cluster: eks_v2_alpha.Cluster;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\nconst nodegroup = new eks_v2_alpha.Nodegroup(this, 'MyNodegroup', {\n  cluster: cluster,\n\n  // the properties below are optional\n  amiType: eks_v2_alpha.NodegroupAmiType.AL2_X86_64,\n  capacityType: eks_v2_alpha.CapacityType.SPOT,\n  desiredSize: 123,\n  diskSize: 123,\n  enableNodeAutoRepair: false,\n  forceUpdate: false,\n  instanceType: instanceType,\n  instanceTypes: [instanceType],\n  labels: {\n    labelsKey: 'labels',\n  },\n  launchTemplateSpec: {\n    id: 'id',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  maxSize: 123,\n  maxUnavailable: 123,\n  maxUnavailablePercentage: 123,\n  minSize: 123,\n  nodegroupName: 'nodegroupName',\n  nodeRole: role,\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    sshKeyName: 'sshKeyName',\n\n    // the properties below are optional\n    sourceSecurityGroups: [securityGroup],\n  },\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n  },\n  tags: {\n    tagsKey: 'tags',\n  },\n  taints: [{\n    effect: eks_v2_alpha.TaintEffect.NO_SCHEDULE,\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.Nodegroup",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/managed-nodegroup.ts",
          "line": 403
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.INodegroup"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 366
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import the Nodegroup from attributes."
          },
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 370
          },
          "name": "fromNodegroupName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "nodegroupName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.INodegroup"
            }
          },
          "static": true
        }
      ],
      "name": "Nodegroup",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "ClusterName"
            },
            "stability": "experimental",
            "summary": "the Amazon EKS cluster resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 393
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "ARN of the nodegroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 381
          },
          "name": "nodegroupArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "Nodegroup name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 387
          },
          "name": "nodegroupName",
          "overrides": "@aws-cdk/aws-eks-v2-alpha.INodegroup",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "IAM role of the instance profile for the nodegroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 397
          },
          "name": "role",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/managed-nodegroup:Nodegroup"
    },
    "@aws-cdk/aws-eks-v2-alpha.NodegroupAmiType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "remarks": "GPU instance types should use the `AL2_x86_64_GPU` AMI type, which uses the\nAmazon EKS-optimized Linux AMI with GPU support or the `BOTTLEROCKET_ARM_64_NVIDIA` or `BOTTLEROCKET_X86_64_NVIDIA`\nAMI types, which uses the Amazon EKS-optimized Linux AMI with Nvidia-GPU support.\n\nNon-GPU instances should use the `AL2_x86_64` AMI type, which uses the Amazon EKS-optimized Linux AMI.",
        "stability": "experimental",
        "summary": "The AMI type for your node group."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupAmiType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 31
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Linux 2 (x86-64)."
          },
          "name": "AL2_X86_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Linux 2 with GPU support."
          },
          "name": "AL2_X86_64_GPU"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Linux 2 (ARM-64)."
          },
          "name": "AL2_ARM_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bottlerocket Linux (ARM-64)."
          },
          "name": "BOTTLEROCKET_ARM_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bottlerocket (x86-64)."
          },
          "name": "BOTTLEROCKET_X86_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bottlerocket Linux with Nvidia-GPU support (ARM-64)."
          },
          "name": "BOTTLEROCKET_ARM_64_NVIDIA"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bottlerocket with Nvidia-GPU support (x86-64)."
          },
          "name": "BOTTLEROCKET_X86_64_NVIDIA"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Windows Core 2019 (x86-64)."
          },
          "name": "WINDOWS_CORE_2019_X86_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Windows Core 2022 (x86-64)."
          },
          "name": "WINDOWS_CORE_2022_X86_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Windows Full 2019 (x86-64)."
          },
          "name": "WINDOWS_FULL_2019_X86_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Windows Full 2022 (x86-64)."
          },
          "name": "WINDOWS_FULL_2022_X86_64"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Linux 2023 (x86-64)."
          },
          "name": "AL2023_X86_64_STANDARD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Linux 2023 with AWS Neuron drivers (x86-64)."
          },
          "name": "AL2023_X86_64_NEURON"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Linux 2023 with NVIDIA drivers (x86-64)."
          },
          "name": "AL2023_X86_64_NVIDIA"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Linux 2023 (ARM-64)."
          },
          "name": "AL2023_ARM_64_STANDARD"
        }
      ],
      "name": "NodegroupAmiType",
      "symbolId": "lib/managed-nodegroup:NodegroupAmiType"
    },
    "@aws-cdk/aws-eks-v2-alpha.NodegroupOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The Nodegroup Options for addNodeGroup() method.",
        "example": "const cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_32,\n  defaultCapacityType: eks.DefaultCapacityType.NODEGROUP,\n  defaultCapacity: 0,\n});\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  minSize: 4,\n  diskSize: 100,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 193
      },
      "name": "NodegroupOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- auto-determined from the instanceTypes property when launchTemplateSpec property is not specified",
            "remarks": "If you explicitly specify the launchTemplate with custom AMI, do not specify this property, or\nthe node group deployment will fail. In other cases, you will need to specify correct amiType for the nodegroup.",
            "stability": "experimental",
            "summary": "The AMI type for your node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 215
          },
          "name": "amiType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupAmiType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- ON_DEMAND",
            "stability": "experimental",
            "summary": "The capacity type of the nodegroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 319
          },
          "name": "capacityType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.CapacityType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "2",
            "remarks": "If not specified,\nthe nodewgroup will initially create `minSize` instances.",
            "stability": "experimental",
            "summary": "The current number of worker nodes that the managed node group should maintain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 228
          },
          "name": "desiredSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "20",
            "stability": "experimental",
            "summary": "The root device disk size (in GiB) for your node group instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 221
          },
          "name": "diskSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "remarks": "Node auto repair is disabled by default.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/node-health.html#node-auto-repair",
            "stability": "experimental",
            "summary": "Specifies whether to enable node auto repair for the node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 349
          },
          "name": "enableNodeAutoRepair",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If an update fails because pods could not be drained, you can force the update after it fails to terminate the old\nnode whether or not any pods are\nrunning on the node.",
            "stability": "experimental",
            "summary": "Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 249
          },
          "name": "forceUpdate",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "t3.medium",
            "deprecated": "Use `instanceTypes` instead.",
            "remarks": "Currently, you can specify a single instance type for a node group.\nThe default value for this parameter is `t3.medium`. If you choose a GPU instance type, be sure to specify the\n`AL2_x86_64_GPU`, `BOTTLEROCKET_ARM_64_NVIDIA`, or `BOTTLEROCKET_x86_64_NVIDIA` with the amiType parameter.",
            "stability": "deprecated",
            "summary": "The instance type to use for your node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 258
          },
          "name": "instanceType",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "t3.medium will be used according to the cloudformation document.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-nodegroup.html#cfn-eks-nodegroup-instancetypes",
            "stability": "experimental",
            "summary": "The instance types to use for your node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 264
          },
          "name": "instanceTypes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "The Kubernetes labels to be applied to the nodes in the node group when they are created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 270
          },
          "name": "labels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no launch template",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html",
            "stability": "experimental",
            "summary": "Launch template specification used for the nodegroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 313
          },
          "name": "launchTemplateSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.LaunchTemplateSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- desiredSize",
            "remarks": "Managed node groups can support up to 100 nodes by default.",
            "stability": "experimental",
            "summary": "The maximum number of worker nodes that the managed node group can scale out to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 234
          },
          "name": "maxSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "remarks": "Nodes will be updated in parallel. The maximum number is 100.\n\nThis value or `maxUnavailablePercentage` is required to have a value for custom update configurations to be applied.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-eks-nodegroup-updateconfig.html#cfn-eks-nodegroup-updateconfig-maxunavailable",
            "stability": "experimental",
            "summary": "The maximum number of nodes unavailable at once during a version update."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 330
          },
          "name": "maxUnavailable",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined - node groups will update instances one at a time",
            "remarks": "This percentage of nodes will be updated in parallel, up to 100 nodes at once.\n\nThis value or `maxUnavailable` is required to have a value for custom update configurations to be applied.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-eks-nodegroup-updateconfig.html#cfn-eks-nodegroup-updateconfig-maxunavailablepercentage",
            "stability": "experimental",
            "summary": "The maximum percentage of nodes unavailable during a version update."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 341
          },
          "name": "maxUnavailablePercentage",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "remarks": "This number must be greater than or equal to zero.",
            "stability": "experimental",
            "summary": "The minimum number of worker nodes that the managed node group can scale in to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 240
          },
          "name": "minSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- resource ID",
            "stability": "experimental",
            "summary": "Name of the Nodegroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 199
          },
          "name": "nodegroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None. Auto-generated if not specified.",
            "remarks": "The Amazon EKS worker node kubelet daemon\nmakes calls to AWS APIs on your behalf. Worker nodes receive permissions for these API calls through\nan IAM instance profile and associated policies. Before you can launch worker nodes and register them\ninto a cluster, you must create an IAM role for those worker nodes to use when they are launched.",
            "stability": "experimental",
            "summary": "The IAM role to associate with your node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 285
          },
          "name": "nodeRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The latest available AMI version for the node group's current Kubernetes version is used.",
            "stability": "experimental",
            "summary": "The AMI version of the Amazon EKS-optimized AMI to use with your node group (for example, `1.14.7-YYYYMMDD`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 291
          },
          "name": "releaseVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "remarks": "Disabled by default, however, if you\nspecify an Amazon EC2 SSH key but do not specify a source security group when you create a managed node group,\nthen port 22 on the worker nodes is opened to the internet (0.0.0.0/0)",
            "stability": "experimental",
            "summary": "The remote access (SSH) configuration to use with your node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 299
          },
          "name": "remoteAccess",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupRemoteAccess"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- private subnets",
            "remarks": "By specifying the\nSubnetSelection, the selected subnets will automatically apply required tags i.e.\n`kubernetes.io/cluster/CLUSTER_NAME` with a value of `shared`, where `CLUSTER_NAME` is replaced with\nthe name of your cluster.",
            "stability": "experimental",
            "summary": "The subnets to use for the Auto Scaling group that is created for your node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 208
          },
          "name": "subnets",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "remarks": "Each tag consists of\na key and an optional value, both of which you define. Node group tags do not propagate to any other resources\nassociated with the node group, such as the Amazon EC2 instances or subnets.",
            "stability": "experimental",
            "summary": "The metadata to apply to the node group to assist with categorization and organization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 307
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "The Kubernetes taints to be applied to the nodes in the node group when they are created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 276
          },
          "name": "taints",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-eks-v2-alpha.TaintSpec"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/managed-nodegroup:NodegroupOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.NodegroupProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "NodeGroup properties interface.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nimport { aws_ec2 as ec2 } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const cluster: eks_v2_alpha.Cluster;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\nconst nodegroupProps: eks_v2_alpha.NodegroupProps = {\n  cluster: cluster,\n\n  // the properties below are optional\n  amiType: eks_v2_alpha.NodegroupAmiType.AL2_X86_64,\n  capacityType: eks_v2_alpha.CapacityType.SPOT,\n  desiredSize: 123,\n  diskSize: 123,\n  enableNodeAutoRepair: false,\n  forceUpdate: false,\n  instanceType: instanceType,\n  instanceTypes: [instanceType],\n  labels: {\n    labelsKey: 'labels',\n  },\n  launchTemplateSpec: {\n    id: 'id',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  maxSize: 123,\n  maxUnavailable: 123,\n  maxUnavailablePercentage: 123,\n  minSize: 123,\n  nodegroupName: 'nodegroupName',\n  nodeRole: role,\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    sshKeyName: 'sshKeyName',\n\n    // the properties below are optional\n    sourceSecurityGroups: [securityGroup],\n  },\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n  },\n  tags: {\n    tagsKey: 'tags',\n  },\n  taints: [{\n    effect: eks_v2_alpha.TaintEffect.NO_SCHEDULE,\n    key: 'key',\n    value: 'value',\n  }],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.NodegroupOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 355
      },
      "name": "NodegroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Cluster resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 359
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        }
      ],
      "symbolId": "lib/managed-nodegroup:NodegroupProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.NodegroupRemoteAccess": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-eks-nodegroup-remoteaccess.html",
        "stability": "experimental",
        "summary": "The remote access (SSH) configuration to use with your node group.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nimport { aws_ec2 as ec2 } from 'aws-cdk-lib';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst nodegroupRemoteAccess: eks_v2_alpha.NodegroupRemoteAccess = {\n  sshKeyName: 'sshKeyName',\n\n  // the properties below are optional\n  sourceSecurityGroups: [securityGroup],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.NodegroupRemoteAccess",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 117
      },
      "name": "NodegroupRemoteAccess",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Amazon EC2 SSH key that provides access for SSH communication with the worker nodes in the managed node group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 121
          },
          "name": "sshKeyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- port 22 on the worker nodes is opened to the internet (0.0.0.0/0)",
            "remarks": "If you specify an Amazon EC2 SSH\nkey but do not specify a source security group when you create a managed node group, then port 22 on the worker\nnodes is opened to the internet (0.0.0.0/0).",
            "stability": "experimental",
            "summary": "The security groups that are allowed SSH access (port 22) to the worker nodes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 129
          },
          "name": "sourceSecurityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/managed-nodegroup:NodegroupRemoteAccess"
    },
    "@aws-cdk/aws-eks-v2-alpha.OpenIdConnectProvider": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "aws-cdk-lib.aws_iam.OpenIdConnectProvider",
      "docs": {
        "custom": {
          "resource": "AWS::CloudFormation::CustomResource",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "You use an IAM OIDC identity provider\nwhen you want to establish trust between an OIDC-compatible IdP and your AWS\naccount.\n\nThis implementation has default values for thumbprints and clientIds props\nthat will be compatible with the eks cluster",
        "see": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html",
        "stability": "experimental",
        "summary": "IAM OIDC identity providers are entities in IAM that describe an external identity provider (IdP) service that supports the OpenID Connect (OIDC) standard, such as Google or Salesforce.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst openIdConnectProvider = new eks_v2_alpha.OpenIdConnectProvider(this, 'MyOpenIdConnectProvider', {\n  url: 'url',\n});"
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.OpenIdConnectProvider",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines an OpenID Connect provider."
        },
        "locationInModule": {
          "filename": "lib/oidc-provider.ts",
          "line": 44
        },
        "parameters": [
          {
            "docs": {
              "summary": "The definition scope."
            },
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "docs": {
              "summary": "Construct ID."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "Initialization properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.OpenIdConnectProviderProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/oidc-provider.ts",
        "line": 37
      },
      "name": "OpenIdConnectProvider",
      "symbolId": "lib/oidc-provider:OpenIdConnectProvider"
    },
    "@aws-cdk/aws-eks-v2-alpha.OpenIdConnectProviderProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Initialization properties for `OpenIdConnectProvider`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst openIdConnectProviderProps: eks_v2_alpha.OpenIdConnectProviderProps = {\n  url: 'url',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.OpenIdConnectProviderProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/oidc-provider.ts",
        "line": 8
      },
      "name": "OpenIdConnectProviderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The URL must begin with https:// and\nshould correspond to the iss claim in the provider's OpenID Connect ID\ntokens. Per the OIDC standard, path components are allowed but query\nparameters are not. Typically the URL consists of only a hostname, like\nhttps://server.example.org or https://example.com.\n\nYou can find your OIDC Issuer URL by:\naws eks describe-cluster --name %cluster_name% --query \"cluster.identity.oidc.issuer\" --output text",
            "stability": "experimental",
            "summary": "The URL of the identity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/oidc-provider.ts",
            "line": 19
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/oidc-provider:OpenIdConnectProviderProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.PatchType": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Values for `kubectl patch` --type argument."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.PatchType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/k8s-patch.ts",
        "line": 50
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "JSON Patch, RFC 6902."
          },
          "name": "JSON"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "JSON Merge patch."
          },
          "name": "MERGE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Strategic merge patch."
          },
          "name": "STRATEGIC"
        }
      ],
      "name": "PatchType",
      "symbolId": "lib/k8s-patch:PatchType"
    },
    "@aws-cdk/aws-eks-v2-alpha.Selector": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Fargate profile selector.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst selector: eks_v2_alpha.Selector = {\n  namespace: 'namespace',\n\n  // the properties below are optional\n  labels: {\n    labelsKey: 'labels',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.Selector",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate-profile.ts",
        "line": 74
      },
      "name": "Selector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "You must specify a namespace for a selector. The selector only matches pods\nthat are created in this namespace, but you can create multiple selectors\nto target multiple namespaces.",
            "stability": "experimental",
            "summary": "The Kubernetes namespace that the selector should match."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 82
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all pods within the namespace will be selected.",
            "remarks": "A pod must contain\nall of the labels that are specified in the selector for it to be\nconsidered a match.",
            "stability": "experimental",
            "summary": "The Kubernetes labels that the selector should match."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate-profile.ts",
            "line": 91
          },
          "name": "labels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/fargate-profile:Selector"
    },
    "@aws-cdk/aws-eks-v2-alpha.ServiceAccount": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Service Account.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\n\ndeclare const cluster: eks_v2_alpha.Cluster;\nconst serviceAccount = new eks_v2_alpha.ServiceAccount(this, 'MyServiceAccount', {\n  cluster: cluster,\n\n  // the properties below are optional\n  annotations: {\n    annotationsKey: 'annotations',\n  },\n  identityType: eks_v2_alpha.IdentityType.IRSA,\n  labels: {\n    labelsKey: 'labels',\n  },\n  name: 'name',\n  namespace: 'namespace',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccount",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service-account.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccountProps"
            }
          }
        ]
      },
      "interfaces": [
        "aws-cdk-lib.aws_iam.IPrincipal"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service-account.ts",
        "line": 130
      },
      "methods": [
        {
          "docs": {
            "deprecated": "use `addToPrincipalPolicy()`",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 251
          },
          "name": "addToPolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add to the policy of this principal."
          },
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 255
          },
          "name": "addToPrincipalPolicy",
          "overrides": "aws-cdk-lib.aws_iam.IPrincipal",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_iam.AddToPrincipalPolicyResult"
            }
          }
        }
      ],
      "name": "ServiceAccount",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 136
          },
          "name": "assumeRoleAction",
          "overrides": "aws-cdk-lib.aws_iam.IPrincipal",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The principal to grant permissions to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 137
          },
          "name": "grantPrincipal",
          "overrides": "aws-cdk-lib.aws_iam.IGrantable",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IPrincipal"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 138
          },
          "name": "policyFragment",
          "overrides": "aws-cdk-lib.aws_iam.IPrincipal",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.PrincipalPolicyFragment"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role which is linked to the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 134
          },
          "name": "role",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 143
          },
          "name": "serviceAccountName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The namespace where the service account is located in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 148
          },
          "name": "serviceAccountNamespace",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service-account:ServiceAccount"
    },
    "@aws-cdk/aws-eks-v2-alpha.ServiceAccountOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `ServiceAccount`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst serviceAccountOptions: eks_v2_alpha.ServiceAccountOptions = {\n  annotations: {\n    annotationsKey: 'annotations',\n  },\n  identityType: eks_v2_alpha.IdentityType.IRSA,\n  labels: {\n    labelsKey: 'labels',\n  },\n  name: 'name',\n  namespace: 'namespace',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccountOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service-account.ts",
        "line": 44
      },
      "name": "ServiceAccountOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no additional annotations",
            "stability": "experimental",
            "summary": "Additional annotations of the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 68
          },
          "name": "annotations",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "IdentityType.IRSA",
            "stability": "experimental",
            "summary": "The identity type to use for the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 81
          },
          "name": "identityType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.IdentityType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional labels",
            "stability": "experimental",
            "summary": "Additional labels of the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 75
          },
          "name": "labels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If no name is given, it will use the id of the resource.",
            "remarks": "The name of a ServiceAccount object must be a valid DNS subdomain name.\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
            "stability": "experimental",
            "summary": "The name of the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 52
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"default\"",
            "remarks": "All namespace names must be valid RFC 1123 DNS labels.\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#namespaces-and-dns",
            "stability": "experimental",
            "summary": "The namespace of the service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 61
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service-account:ServiceAccountOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.ServiceAccountProps": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining service accounts.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\n\ndeclare const cluster: eks_v2_alpha.Cluster;\nconst serviceAccountProps: eks_v2_alpha.ServiceAccountProps = {\n  cluster: cluster,\n\n  // the properties below are optional\n  annotations: {\n    annotationsKey: 'annotations',\n  },\n  identityType: eks_v2_alpha.IdentityType.IRSA,\n  labels: {\n    labelsKey: 'labels',\n  },\n  name: 'name',\n  namespace: 'namespace',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceAccountProps",
      "interfaces": [
        "@aws-cdk/aws-eks-v2-alpha.ServiceAccountOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service-account.ts",
        "line": 120
      },
      "name": "ServiceAccountProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The cluster to apply the patch to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service-account.ts",
            "line": 124
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.ICluster"
          }
        }
      ],
      "symbolId": "lib/service-account:ServiceAccountProps"
    },
    "@aws-cdk/aws-eks-v2-alpha.ServiceLoadBalancerAddressOptions": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for fetching a ServiceLoadBalancerAddress.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nimport * as cdk from 'aws-cdk-lib';\nconst serviceLoadBalancerAddressOptions: eks_v2_alpha.ServiceLoadBalancerAddressOptions = {\n  namespace: 'namespace',\n  timeout: cdk.Duration.minutes(30),\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.ServiceLoadBalancerAddressOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 887
      },
      "name": "ServiceLoadBalancerAddressOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "'default'",
            "stability": "experimental",
            "summary": "The namespace the service belongs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 901
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "stability": "experimental",
            "summary": "Timeout for waiting on the load balancer address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 894
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/cluster:ServiceLoadBalancerAddressOptions"
    },
    "@aws-cdk/aws-eks-v2-alpha.TaintEffect": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Effect types of kubernetes node taint."
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.TaintEffect",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 151
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "NoSchedule."
          },
          "name": "NO_SCHEDULE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "PreferNoSchedule."
          },
          "name": "PREFER_NO_SCHEDULE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "NoExecute."
          },
          "name": "NO_EXECUTE"
        }
      ],
      "name": "TaintEffect",
      "symbolId": "lib/managed-nodegroup:TaintEffect"
    },
    "@aws-cdk/aws-eks-v2-alpha.TaintSpec": {
      "assembly": "@aws-cdk/aws-eks-v2-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Taint interface.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks_v2_alpha from '@aws-cdk/aws-eks-v2-alpha';\nconst taintSpec: eks_v2_alpha.TaintSpec = {\n  effect: eks_v2_alpha.TaintEffect.NO_SCHEDULE,\n  key: 'key',\n  value: 'value',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-eks-v2-alpha.TaintSpec",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-nodegroup.ts",
        "line": 169
      },
      "name": "TaintSpec",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "Effect type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 175
          },
          "name": "effect",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-eks-v2-alpha.TaintEffect"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "Taint key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 181
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "Taint value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-nodegroup.ts",
            "line": 187
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/managed-nodegroup:TaintSpec"
    }
  },
  "version": "2.187.0-alpha.0",
  "fingerprint": "**********"
}