"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessEntry = exports.AccessEntryType = exports.AccessPolicy = exports.AccessPolicyArn = exports.AccessScopeType = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const core_1 = require("aws-cdk-lib/core");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
/**
 * Represents the scope type of an access policy.
 *
 * The scope type determines the level of access granted by the policy.
 *
 * @export
 * @enum {string}
 */
var AccessScopeType;
(function (AccessScopeType) {
    /**
     * The policy applies to a specific namespace within the cluster.
     */
    AccessScopeType["NAMESPACE"] = "namespace";
    /**
     * The policy applies to the entire cluster.
     */
    AccessScopeType["CLUSTER"] = "cluster";
})(AccessScopeType || (exports.AccessScopeType = AccessScopeType = {}));
/**
 * Represents an Amazon EKS Access Policy ARN.
 *
 * Amazon EKS Access Policies are used to control access to Amazon EKS clusters.
 *
 * @see https://docs.aws.amazon.com/eks/latest/userguide/access-policies.html
 */
class AccessPolicyArn {
    /**
     * Creates a new instance of the AccessPolicy class with the specified policy name.
     * @param policyName The name of the access policy.
     * @returns A new instance of the AccessPolicy class.
     */
    static of(policyName) { return new AccessPolicyArn(policyName); }
    /**
     * Constructs a new instance of the `AccessEntry` class.
     *
     * @param policyName - The name of the Amazon EKS access policy. This is used to construct the policy ARN.
     */
    constructor(policyName) {
        this.policyName = policyName;
        this.policyArn = `arn:${core_1.Aws.PARTITION}:eks::aws:cluster-access-policy/${policyName}`;
    }
}
exports.AccessPolicyArn = AccessPolicyArn;
_a = JSII_RTTI_SYMBOL_1;
AccessPolicyArn[_a] = { fqn: "@aws-cdk/aws-eks-v2-alpha.AccessPolicyArn", version: "2.187.0-alpha.0" };
/**
 * The Amazon EKS Admin Policy. This access policy includes permissions that grant an IAM principal
 * most permissions to resources. When associated to an access entry, its access scope is typically
 * one or more Kubernetes namespaces.
 */
AccessPolicyArn.AMAZON_EKS_ADMIN_POLICY = AccessPolicyArn.of('AmazonEKSAdminPolicy');
/**
 * The Amazon EKS Cluster Admin Policy. This access policy includes permissions that grant an IAM
 * principal administrator access to a cluster. When associated to an access entry, its access scope
 * is typically the cluster, rather than a Kubernetes namespace.
 */
AccessPolicyArn.AMAZON_EKS_CLUSTER_ADMIN_POLICY = AccessPolicyArn.of('AmazonEKSClusterAdminPolicy');
/**
 * The Amazon EKS Admin View Policy. This access policy includes permissions that grant an IAM principal
 * access to list/view all resources in a cluster.
 */
AccessPolicyArn.AMAZON_EKS_ADMIN_VIEW_POLICY = AccessPolicyArn.of('AmazonEKSAdminViewPolicy');
/**
 * The Amazon EKS Edit Policy. This access policy includes permissions that allow an IAM principal
 * to edit most Kubernetes resources.
 */
AccessPolicyArn.AMAZON_EKS_EDIT_POLICY = AccessPolicyArn.of('AmazonEKSEditPolicy');
/**
 * The Amazon EKS View Policy. This access policy includes permissions that grant an IAM principal
 * access to list/view all resources in a cluster.
 */
AccessPolicyArn.AMAZON_EKS_VIEW_POLICY = AccessPolicyArn.of('AmazonEKSViewPolicy');
/**
 * Represents an Amazon EKS Access Policy that implements the IAccessPolicy interface.
 *
 * @implements {IAccessPolicy}
 */
class AccessPolicy {
    /**
     * Import AccessPolicy by name.
     */
    static fromAccessPolicyName(policyName, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_AccessPolicyNameOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromAccessPolicyName);
            }
            throw error;
        }
        class Import {
            constructor() {
                this.policy = `arn:${core_1.Aws.PARTITION}:eks::aws:cluster-access-policy/${policyName}`;
                this.accessScope = {
                    type: options.accessScopeType,
                    namespaces: options.namespaces,
                };
            }
        }
        return new Import();
    }
    /**
     * Constructs a new instance of the AccessPolicy class.
     *
     * @param {AccessPolicyProps} props - The properties for configuring the access policy.
     */
    constructor(props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_AccessPolicyProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AccessPolicy);
            }
            throw error;
        }
        this.accessScope = props.accessScope;
        this.policy = props.policy.policyArn;
    }
}
exports.AccessPolicy = AccessPolicy;
_b = JSII_RTTI_SYMBOL_1;
AccessPolicy[_b] = { fqn: "@aws-cdk/aws-eks-v2-alpha.AccessPolicy", version: "2.187.0-alpha.0" };
/**
 * Represents the different types of access entries that can be used in an Amazon EKS cluster.
 *
 * @enum {string}
 */
var AccessEntryType;
(function (AccessEntryType) {
    /**
     * Represents a standard access entry.
     */
    AccessEntryType["STANDARD"] = "STANDARD";
    /**
     * Represents a Fargate Linux access entry.
     */
    AccessEntryType["FARGATE_LINUX"] = "FARGATE_LINUX";
    /**
     * Represents an EC2 Linux access entry.
     */
    AccessEntryType["EC2_LINUX"] = "EC2_LINUX";
    /**
     * Represents an EC2 Windows access entry.
     */
    AccessEntryType["EC2_WINDOWS"] = "EC2_WINDOWS";
})(AccessEntryType || (exports.AccessEntryType = AccessEntryType = {}));
/**
 * Represents an access entry in an Amazon EKS cluster.
 *
 * An access entry defines the permissions and scope for a user or role to access an Amazon EKS cluster.
 *
 * @implements {IAccessEntry}
 * @resource AWS::EKS::AccessEntry
 */
class AccessEntry extends core_1.Resource {
    /**
     * Imports an `AccessEntry` from its attributes.
     *
     * @param scope - The parent construct.
     * @param id - The ID of the imported construct.
     * @param attrs - The attributes of the access entry to import.
     * @returns The imported access entry.
     */
    static fromAccessEntryAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_AccessEntryAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromAccessEntryAttributes);
            }
            throw error;
        }
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.accessEntryName = attrs.accessEntryName;
                this.accessEntryArn = attrs.accessEntryArn;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_AccessEntryProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AccessEntry);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        this.cluster = props.cluster;
        this.principal = props.principal;
        this.accessPolicies = props.accessPolicies;
        const resource = new aws_eks_1.CfnAccessEntry(this, 'Resource', {
            clusterName: this.cluster.clusterName,
            principalArn: this.principal,
            type: props.accessEntryType,
            accessPolicies: core_1.Lazy.any({
                produce: () => this.accessPolicies.map(p => ({
                    accessScope: {
                        type: p.accessScope.type,
                        namespaces: p.accessScope.namespaces,
                    },
                    policyArn: p.policy,
                })),
            }),
        });
        this.accessEntryName = this.getResourceNameAttribute(resource.ref);
        this.accessEntryArn = this.getResourceArnAttribute(resource.attrAccessEntryArn, {
            service: 'eks',
            resource: 'accessentry',
            resourceName: this.physicalName,
        });
    }
    /**
     * Add the access policies for this entry.
     * @param newAccessPolicies - The new access policies to add.
     */
    addAccessPolicies(newAccessPolicies) {
        // add newAccessPolicies to this.accessPolicies
        this.accessPolicies.push(...newAccessPolicies);
    }
}
exports.AccessEntry = AccessEntry;
_c = JSII_RTTI_SYMBOL_1;
AccessEntry[_c] = { fqn: "@aws-cdk/aws-eks-v2-alpha.AccessEntry", version: "2.187.0-alpha.0" };
__decorate([
    (0, metadata_resource_1.MethodMetadata)()
], AccessEntry.prototype, "addAccessPolicies", null);
//# sourceMappingURL=data:application/json;base64,