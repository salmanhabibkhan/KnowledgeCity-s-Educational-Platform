"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Addon = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const core_1 = require("aws-cdk-lib/core");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
/**
 * Represents an Amazon EKS Add-On.
 * @resource AWS::EKS::Addon
 */
class Addon extends core_1.Resource {
    /**
     * Creates an `IAddon` instance from the given addon attributes.
     *
     * @param scope - The parent construct.
     * @param id - The construct ID.
     * @param attrs - The attributes of the addon, including the addon name and the cluster name.
     * @returns An `IAddon` instance.
     */
    static fromAddonAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_AddonAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromAddonAttributes);
            }
            throw error;
        }
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.addonName = attrs.addonName;
                this.addonArn = core_1.Stack.of(scope).formatArn({
                    service: 'eks',
                    resource: 'addon',
                    resourceName: `${attrs.clusterName}/${attrs.addonName}`,
                });
            }
        }
        return new Import(scope, id);
    }
    /**
     * Creates an `IAddon` from an existing addon ARN.
     *
     * @param scope - The parent construct.
     * @param id - The ID of the construct.
     * @param addonArn - The ARN of the addon.
     * @returns An `IAddon` implementation.
     */
    static fromAddonArn(scope, id, addonArn) {
        const parsedArn = core_1.Stack.of(scope).splitArn(addonArn, core_1.ArnFormat.COLON_RESOURCE_NAME);
        const splitResourceName = core_1.Fn.split('/', parsedArn.resourceName);
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.addonName = core_1.Fn.select(1, splitResourceName);
                this.addonArn = addonArn;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Creates a new Amazon EKS Add-On.
     * @param scope The parent construct.
     * @param id The construct ID.
     * @param props The properties for the Add-On.
     */
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.addonName,
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_AddonProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Addon);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        this.clusterName = props.cluster.clusterName;
        this.addonName = props.addonName;
        const resource = new aws_eks_1.CfnAddon(this, 'Resource', {
            addonName: props.addonName,
            clusterName: this.clusterName,
            addonVersion: props.addonVersion,
            preserveOnDelete: props.preserveOnDelete,
        });
        this.addonName = this.getResourceNameAttribute(resource.ref);
        this.addonArn = this.getResourceArnAttribute(resource.attrArn, {
            service: 'eks',
            resource: 'addon',
            resourceName: `${this.clusterName}/${this.addonName}/`,
        });
    }
}
exports.Addon = Addon;
_a = JSII_RTTI_SYMBOL_1;
Addon[_a] = { fqn: "@aws-cdk/aws-eks-v2-alpha.Addon", version: "2.187.0-alpha.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZGRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxpREFBK0M7QUFDL0MsMkNBQTZFO0FBQzdFLDhFQUE4RTtBQStEOUU7OztHQUdHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsZUFBUTtJQUNqQzs7Ozs7OztPQU9HO0lBQ0ksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCOzs7Ozs7Ozs7O1FBQ3BGLE1BQU0sTUFBTyxTQUFRLGVBQVE7WUFBN0I7O2dCQUNrQixjQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztnQkFDNUIsYUFBUSxHQUFHLFlBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDO29CQUNuRCxPQUFPLEVBQUUsS0FBSztvQkFDZCxRQUFRLEVBQUUsT0FBTztvQkFDakIsWUFBWSxFQUFFLEdBQUcsS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO2lCQUN4RCxDQUFDLENBQUM7WUFDTCxDQUFDO1NBQUE7UUFDRCxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztLQUM5QjtJQUNEOzs7Ozs7O09BT0c7SUFDSSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFFBQWdCO1FBQ3ZFLE1BQU0sU0FBUyxHQUFHLFlBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxnQkFBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDcEYsTUFBTSxpQkFBaUIsR0FBRyxTQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsWUFBYSxDQUFDLENBQUM7UUFDakUsTUFBTSxNQUFPLFNBQVEsZUFBUTtZQUE3Qjs7Z0JBQ2tCLGNBQVMsR0FBRyxTQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUM1QyxhQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3RDLENBQUM7U0FBQTtRQUVELE9BQU8sSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQzlCO0lBWUQ7Ozs7O09BS0c7SUFDSCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWlCO1FBQ3pELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsWUFBWSxFQUFFLEtBQUssQ0FBQyxTQUFTO1NBQzlCLENBQUMsQ0FBQzs7Ozs7OytDQTFETSxLQUFLOzs7O1FBMkRkLG1DQUFtQztRQUNuQyxJQUFBLHdDQUFvQixFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUVqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGtCQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUM5QyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1NBQ3pDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQzdELE9BQU8sRUFBRSxLQUFLO1lBQ2QsUUFBUSxFQUFFLE9BQU87WUFDakIsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHO1NBQ3ZELENBQUMsQ0FBQztLQUNKOztBQTlFSCxzQkErRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IElDbHVzdGVyIH0gZnJvbSAnLi9jbHVzdGVyJztcbmltcG9ydCB7IENmbkFkZG9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVrcyc7XG5pbXBvcnQgeyBBcm5Gb3JtYXQsIElSZXNvdXJjZSwgUmVzb3VyY2UsIFN0YWNrLCBGbiB9IGZyb20gJ2F3cy1jZGstbGliL2NvcmUnO1xuaW1wb3J0IHsgYWRkQ29uc3RydWN0TWV0YWRhdGEgfSBmcm9tICdhd3MtY2RrLWxpYi9jb3JlL2xpYi9tZXRhZGF0YS1yZXNvdXJjZSc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBBbWF6b24gRUtTIEFkZC1Pbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQWRkb24gZXh0ZW5kcyBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgQWRkLU9uLlxuICAgKiBAYXR0cmlidXRlXG4gICAqL1xuICByZWFkb25seSBhZGRvbk5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIEFSTiBvZiB0aGUgQWRkLU9uLlxuICAgKiBAYXR0cmlidXRlXG4gICAqL1xuICByZWFkb25seSBhZGRvbkFybjogc3RyaW5nO1xufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGNyZWF0aW5nIGFuIEFtYXpvbiBFS1MgQWRkLU9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkZG9uUHJvcHMge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgQWRkLU9uLlxuICAgKi9cbiAgcmVhZG9ubHkgYWRkb25OYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBWZXJzaW9uIG9mIHRoZSBBZGQtT24uIFlvdSBjYW4gY2hlY2sgYWxsIGF2YWlsYWJsZSB2ZXJzaW9ucyB3aXRoIGRlc2NyaWJlLWFkZG9uLXZlcnNpb25zLlxuICAgKiBGb3IgZXhhbXBsZSwgdGhpcyBsaXN0cyBhbGwgYXZhaWxhYmxlIHZlcnNpb25zIGZvciB0aGUgYGVrcy1wb2QtaWRlbnRpdHktYWdlbnRgIGFkZG9uOlxuICAgKiAkIGF3cyBla3MgZGVzY3JpYmUtYWRkb24tdmVyc2lvbnMgLS1hZGRvbi1uYW1lIGVrcy1wb2QtaWRlbnRpdHktYWdlbnQgXFxcbiAgICogLS1xdWVyeSAnYWRkb25zWypdLmFkZG9uVmVyc2lvbnNbKl0uYWRkb25WZXJzaW9uJ1xuICAgKlxuICAgKiBAZGVmYXVsdCB0aGUgbGF0ZXN0IHZlcnNpb24uXG4gICAqL1xuICByZWFkb25seSBhZGRvblZlcnNpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgRUtTIGNsdXN0ZXIgdGhlIEFkZC1PbiBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqL1xuICByZWFkb25seSBjbHVzdGVyOiBJQ2x1c3RlcjtcbiAgLyoqXG4gICAqIFNwZWNpZnlpbmcgdGhpcyBvcHRpb24gcHJlc2VydmVzIHRoZSBhZGQtb24gc29mdHdhcmUgb24geW91ciBjbHVzdGVyIGJ1dCBBbWF6b24gRUtTIHN0b3BzIG1hbmFnaW5nIGFueSBzZXR0aW5ncyBmb3IgdGhlIGFkZC1vbi5cbiAgICogSWYgYW4gSUFNIGFjY291bnQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhZGQtb24sIGl0IGlzbid0IHJlbW92ZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHJlYWRvbmx5IHByZXNlcnZlT25EZWxldGU/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGF0dHJpYnV0ZXMgb2YgYW4gYWRkb24gZm9yIGFuIEFtYXpvbiBFS1MgY2x1c3Rlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZGRvbkF0dHJpYnV0ZXMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFkZG9uLlxuICAgKi9cbiAgcmVhZG9ubHkgYWRkb25OYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBBbWF6b24gRUtTIGNsdXN0ZXIgdGhlIGFkZG9uIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICovXG4gIHJlYWRvbmx5IGNsdXN0ZXJOYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBBbWF6b24gRUtTIEFkZC1Pbi5cbiAqIEByZXNvdXJjZSBBV1M6OkVLUzo6QWRkb25cbiAqL1xuZXhwb3J0IGNsYXNzIEFkZG9uIGV4dGVuZHMgUmVzb3VyY2UgaW1wbGVtZW50cyBJQWRkb24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBgSUFkZG9uYCBpbnN0YW5jZSBmcm9tIHRoZSBnaXZlbiBhZGRvbiBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gc2NvcGUgLSBUaGUgcGFyZW50IGNvbnN0cnVjdC5cbiAgICogQHBhcmFtIGlkIC0gVGhlIGNvbnN0cnVjdCBJRC5cbiAgICogQHBhcmFtIGF0dHJzIC0gVGhlIGF0dHJpYnV0ZXMgb2YgdGhlIGFkZG9uLCBpbmNsdWRpbmcgdGhlIGFkZG9uIG5hbWUgYW5kIHRoZSBjbHVzdGVyIG5hbWUuXG4gICAqIEByZXR1cm5zIEFuIGBJQWRkb25gIGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQWRkb25BdHRyaWJ1dGVzKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGF0dHJzOiBBZGRvbkF0dHJpYnV0ZXMpOiBJQWRkb24ge1xuICAgIGNsYXNzIEltcG9ydCBleHRlbmRzIFJlc291cmNlIGltcGxlbWVudHMgSUFkZG9uIHtcbiAgICAgIHB1YmxpYyByZWFkb25seSBhZGRvbk5hbWUgPSBhdHRycy5hZGRvbk5hbWU7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgYWRkb25Bcm4gPSBTdGFjay5vZihzY29wZSkuZm9ybWF0QXJuKHtcbiAgICAgICAgc2VydmljZTogJ2VrcycsXG4gICAgICAgIHJlc291cmNlOiAnYWRkb24nLFxuICAgICAgICByZXNvdXJjZU5hbWU6IGAke2F0dHJzLmNsdXN0ZXJOYW1lfS8ke2F0dHJzLmFkZG9uTmFtZX1gLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSW1wb3J0KHNjb3BlLCBpZCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gYElBZGRvbmAgZnJvbSBhbiBleGlzdGluZyBhZGRvbiBBUk4uXG4gICAqXG4gICAqIEBwYXJhbSBzY29wZSAtIFRoZSBwYXJlbnQgY29uc3RydWN0LlxuICAgKiBAcGFyYW0gaWQgLSBUaGUgSUQgb2YgdGhlIGNvbnN0cnVjdC5cbiAgICogQHBhcmFtIGFkZG9uQXJuIC0gVGhlIEFSTiBvZiB0aGUgYWRkb24uXG4gICAqIEByZXR1cm5zIEFuIGBJQWRkb25gIGltcGxlbWVudGF0aW9uLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQWRkb25Bcm4oc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgYWRkb25Bcm46IHN0cmluZyk6IElBZGRvbiB7XG4gICAgY29uc3QgcGFyc2VkQXJuID0gU3RhY2sub2Yoc2NvcGUpLnNwbGl0QXJuKGFkZG9uQXJuLCBBcm5Gb3JtYXQuQ09MT05fUkVTT1VSQ0VfTkFNRSk7XG4gICAgY29uc3Qgc3BsaXRSZXNvdXJjZU5hbWUgPSBGbi5zcGxpdCgnLycsIHBhcnNlZEFybi5yZXNvdXJjZU5hbWUhKTtcbiAgICBjbGFzcyBJbXBvcnQgZXh0ZW5kcyBSZXNvdXJjZSBpbXBsZW1lbnRzIElBZGRvbiB7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgYWRkb25OYW1lID0gRm4uc2VsZWN0KDEsIHNwbGl0UmVzb3VyY2VOYW1lKTtcbiAgICAgIHB1YmxpYyByZWFkb25seSBhZGRvbkFybiA9IGFkZG9uQXJuO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSW1wb3J0KHNjb3BlLCBpZCk7XG4gIH1cblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgYWRkb24uXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgYWRkb25OYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBcm4gb2YgdGhlIGFkZG9uLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFkZG9uQXJuOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2x1c3Rlck5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBBbWF6b24gRUtTIEFkZC1Pbi5cbiAgICogQHBhcmFtIHNjb3BlIFRoZSBwYXJlbnQgY29uc3RydWN0LlxuICAgKiBAcGFyYW0gaWQgVGhlIGNvbnN0cnVjdCBJRC5cbiAgICogQHBhcmFtIHByb3BzIFRoZSBwcm9wZXJ0aWVzIGZvciB0aGUgQWRkLU9uLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFkZG9uUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHBoeXNpY2FsTmFtZTogcHJvcHMuYWRkb25OYW1lLFxuICAgIH0pO1xuICAgIC8vIEVuaGFuY2VkIENESyBBbmFseXRpY3MgVGVsZW1ldHJ5XG4gICAgYWRkQ29uc3RydWN0TWV0YWRhdGEodGhpcywgcHJvcHMpO1xuXG4gICAgdGhpcy5jbHVzdGVyTmFtZSA9IHByb3BzLmNsdXN0ZXIuY2x1c3Rlck5hbWU7XG4gICAgdGhpcy5hZGRvbk5hbWUgPSBwcm9wcy5hZGRvbk5hbWU7XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBDZm5BZGRvbih0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBhZGRvbk5hbWU6IHByb3BzLmFkZG9uTmFtZSxcbiAgICAgIGNsdXN0ZXJOYW1lOiB0aGlzLmNsdXN0ZXJOYW1lLFxuICAgICAgYWRkb25WZXJzaW9uOiBwcm9wcy5hZGRvblZlcnNpb24sXG4gICAgICBwcmVzZXJ2ZU9uRGVsZXRlOiBwcm9wcy5wcmVzZXJ2ZU9uRGVsZXRlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRvbk5hbWUgPSB0aGlzLmdldFJlc291cmNlTmFtZUF0dHJpYnV0ZShyZXNvdXJjZS5yZWYpO1xuICAgIHRoaXMuYWRkb25Bcm4gPSB0aGlzLmdldFJlc291cmNlQXJuQXR0cmlidXRlKHJlc291cmNlLmF0dHJBcm4sIHtcbiAgICAgIHNlcnZpY2U6ICdla3MnLFxuICAgICAgcmVzb3VyY2U6ICdhZGRvbicsXG4gICAgICByZXNvdXJjZU5hbWU6IGAke3RoaXMuY2x1c3Rlck5hbWV9LyR7dGhpcy5hZGRvbk5hbWV9L2AsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==