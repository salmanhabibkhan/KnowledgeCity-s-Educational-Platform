"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelmChart = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const kubectl_provider_1 = require("./kubectl-provider");
const core_1 = require("aws-cdk-lib/core");
/**
 * Represents a helm chart within the Kubernetes system.
 *
 * Applies/deletes the resources using `kubectl` in sync with the resource.
 */
class HelmChart extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_HelmChartProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, HelmChart);
            }
            throw error;
        }
        // Exposing these properties is done for convenience
        // For more details see issue #26678
        this.chart = props.chart;
        this.repository = props.repository;
        this.version = props.version;
        this.chartAsset = props.chartAsset;
        const stack = core_1.Stack.of(this);
        const provider = kubectl_provider_1.KubectlProvider.getKubectlProvider(this, props.cluster);
        if (!provider) {
            throw new Error('Kubectl Provider is not defined in this cluster. Define it when creating the cluster');
        }
        const timeout = props.timeout?.toSeconds();
        if (timeout && timeout > 900) {
            throw new Error('Helm chart timeout cannot be higher than 15 minutes.');
        }
        if (!this.chart && !this.chartAsset) {
            throw new Error("Either 'chart' or 'chartAsset' must be specified to install a helm chart");
        }
        if (this.chartAsset && (this.repository || this.version)) {
            throw new Error("Neither 'repository' nor 'version' can be used when configuring 'chartAsset'");
        }
        // default not to wait
        const wait = props.wait ?? false;
        // default to create new namespace
        const createNamespace = props.createNamespace ?? true;
        // default to not skip crd installation
        const skipCrds = props.skipCrds ?? false;
        // default to set atomic as false
        const atomic = props.atomic ?? false;
        this.chartAsset?.grantRead(provider.role);
        new core_1.CustomResource(this, 'Resource', {
            serviceToken: provider.serviceToken,
            resourceType: HelmChart.RESOURCE_TYPE,
            properties: {
                ClusterName: props.cluster.clusterName,
                Release: props.release ?? core_1.Names.uniqueId(this).slice(-53).toLowerCase(), // Helm has a 53 character limit for the name
                Chart: this.chart,
                ChartAssetURL: this.chartAsset?.s3ObjectUrl,
                Version: this.version,
                Wait: wait || undefined, // props are stringified so we encode “false” as undefined
                Timeout: timeout ? `${timeout.toString()}s` : undefined, // Helm v3 expects duration instead of integer
                Values: (props.values ? stack.toJsonString(props.values) : undefined),
                Namespace: props.namespace ?? 'default',
                Repository: this.repository,
                CreateNamespace: createNamespace || undefined,
                SkipCrds: skipCrds || undefined,
                Atomic: atomic || undefined, // props are stringified so we encode “false” as undefined
            },
        });
    }
}
exports.HelmChart = HelmChart;
_a = JSII_RTTI_SYMBOL_1;
HelmChart[_a] = { fqn: "@aws-cdk/aws-eks-v2-alpha.HelmChart", version: "2.187.0-alpha.0" };
/**
 * The CloudFormation resource type.
 */
HelmChart.RESOURCE_TYPE = 'Custom::AWSCDK-EKS-HelmChart';
//# sourceMappingURL=data:application/json;base64,