"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubectlProvider = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const cluster_1 = require("./cluster");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const core_1 = require("aws-cdk-lib/core");
const cr = require("aws-cdk-lib/custom-resources");
const lambda_layer_awscli_1 = require("aws-cdk-lib/lambda-layer-awscli");
const path = require("path");
/**
 * Implementation of Kubectl Lambda
 */
class KubectlProvider extends constructs_1.Construct {
    /**
     * Take existing provider on cluster
     *
     * @param scope Construct
     * @param cluster k8s cluster
     */
    static getKubectlProvider(scope, cluster) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_ICluster(cluster);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.getKubectlProvider);
            }
            throw error;
        }
        // if this is an "owned" cluster, we need to wait for the kubectl barrier
        // before applying any resources.
        if (cluster instanceof cluster_1.Cluster) {
            cluster._dependOnKubectlBarrier(scope);
        }
        return cluster.kubectlProvider;
    }
    /**
     * Import an existing provider
     *
     * @param scope Construct
     * @param id an id of resource
     * @param attrs attributes for the provider
     */
    static fromKubectlProviderAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_KubectlProviderAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromKubectlProviderAttributes);
            }
            throw error;
        }
        class Import extends constructs_1.Construct {
            constructor() {
                super(...arguments);
                this.serviceToken = attrs.serviceToken;
                this.role = attrs.role;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_KubectlProviderProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, KubectlProvider);
            }
            throw error;
        }
        const vpc = props.privateSubnets ? props.cluster.vpc : undefined;
        let securityGroups;
        if (props.privateSubnets && props.cluster.clusterSecurityGroup) {
            securityGroups = [props.cluster.clusterSecurityGroup];
        }
        const privateSubnets = props.privateSubnets ? { subnets: props.privateSubnets } : undefined;
        const handler = new lambda.Function(this, 'Handler', {
            timeout: core_1.Duration.minutes(15),
            description: 'onEvent handler for EKS kubectl resource provider',
            memorySize: props.memory?.toMebibytes() ?? 1024,
            environment: {
                // required and recommended for boto3
                AWS_STS_REGIONAL_ENDPOINTS: 'regional',
                ...props.environment,
            },
            role: props.role,
            code: lambda.Code.fromAsset(path.join(__dirname, 'kubectl-handler')),
            handler: 'index.handler',
            runtime: lambda.Runtime.PYTHON_3_11,
            // defined only when using private access
            vpc,
            securityGroups,
            vpcSubnets: privateSubnets,
        });
        // allow user to customize the layers with the tools we need
        handler.addLayers(props.awscliLayer ?? new lambda_layer_awscli_1.AwsCliLayer(this, 'AwsCliLayer'));
        handler.addLayers(props.kubectlLayer);
        const handlerRole = handler.role;
        handlerRole.addToPrincipalPolicy(new iam.PolicyStatement({
            actions: ['eks:DescribeCluster'],
            resources: [props.cluster.clusterArn],
        }));
        // taken from the lambda default role logic.
        // makes it easier for roles to be passed in.
        if (handler.isBoundToVpc) {
            handlerRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaVPCAccessExecutionRole'));
        }
        // For OCI helm chart authorization.
        handlerRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonEC2ContainerRegistryReadOnly'));
        /**
         * For OCI helm chart public ECR authorization. As ECR public is only available in `aws` partition,
         * we conditionally attach this policy when the AWS partition is `aws`.
         */
        const hasEcrPublicCondition = new core_1.CfnCondition(handlerRole.node.scope, 'HasEcrPublic', {
            expression: core_1.Fn.conditionEquals(core_1.Aws.PARTITION, 'aws'),
        });
        const conditionalPolicy = iam.ManagedPolicy.fromManagedPolicyArn(this, 'ConditionalPolicyArn', core_1.Fn.conditionIf(hasEcrPublicCondition.logicalId, iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonElasticContainerRegistryPublicReadOnly').managedPolicyArn, core_1.Aws.NO_VALUE).toString());
        handlerRole.addManagedPolicy(iam.ManagedPolicy.fromManagedPolicyArn(this, 'conditionalPolicy', conditionalPolicy.managedPolicyArn));
        const provider = new cr.Provider(this, 'Provider', {
            onEventHandler: handler,
            vpc: props.cluster.vpc,
            vpcSubnets: privateSubnets,
            securityGroups,
        });
        this.serviceToken = provider.serviceToken;
        this.role = handlerRole;
    }
}
exports.KubectlProvider = KubectlProvider;
_a = JSII_RTTI_SYMBOL_1;
KubectlProvider[_a] = { fqn: "@aws-cdk/aws-eks-v2-alpha.KubectlProvider", version: "2.187.0-alpha.0" };
//# sourceMappingURL=data:application/json;base64,