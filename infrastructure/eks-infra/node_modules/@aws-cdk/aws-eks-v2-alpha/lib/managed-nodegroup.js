"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nodegroup = exports.TaintEffect = exports.CapacityType = exports.NodegroupAmiType = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const cluster_1 = require("./cluster");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const core_1 = require("aws-cdk-lib/core");
const cxapi = require("aws-cdk-lib/cx-api");
const nodegroup_1 = require("./private/nodegroup");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
/**
 * The AMI type for your node group.
 *
 * GPU instance types should use the `AL2_x86_64_GPU` AMI type, which uses the
 * Amazon EKS-optimized Linux AMI with GPU support or the `BOTTLEROCKET_ARM_64_NVIDIA` or `BOTTLEROCKET_X86_64_NVIDIA`
 * AMI types, which uses the Amazon EKS-optimized Linux AMI with Nvidia-GPU support.
 *
 * Non-GPU instances should use the `AL2_x86_64` AMI type, which uses the Amazon EKS-optimized Linux AMI.
 */
var NodegroupAmiType;
(function (NodegroupAmiType) {
    /**
     * Amazon Linux 2 (x86-64)
     */
    NodegroupAmiType["AL2_X86_64"] = "AL2_x86_64";
    /**
     * Amazon Linux 2 with GPU support
     */
    NodegroupAmiType["AL2_X86_64_GPU"] = "AL2_x86_64_GPU";
    /**
     * Amazon Linux 2 (ARM-64)
     */
    NodegroupAmiType["AL2_ARM_64"] = "AL2_ARM_64";
    /**
     *  Bottlerocket Linux (ARM-64)
     */
    NodegroupAmiType["BOTTLEROCKET_ARM_64"] = "BOTTLEROCKET_ARM_64";
    /**
     * Bottlerocket (x86-64)
     */
    NodegroupAmiType["BOTTLEROCKET_X86_64"] = "BOTTLEROCKET_x86_64";
    /**
     *  Bottlerocket Linux with Nvidia-GPU support (ARM-64)
     */
    NodegroupAmiType["BOTTLEROCKET_ARM_64_NVIDIA"] = "BOTTLEROCKET_ARM_64_NVIDIA";
    /**
     * Bottlerocket with Nvidia-GPU support (x86-64)
     */
    NodegroupAmiType["BOTTLEROCKET_X86_64_NVIDIA"] = "BOTTLEROCKET_x86_64_NVIDIA";
    /**
     * Windows Core 2019 (x86-64)
     */
    NodegroupAmiType["WINDOWS_CORE_2019_X86_64"] = "WINDOWS_CORE_2019_x86_64";
    /**
     * Windows Core 2022 (x86-64)
     */
    NodegroupAmiType["WINDOWS_CORE_2022_X86_64"] = "WINDOWS_CORE_2022_x86_64";
    /**
     * Windows Full 2019 (x86-64)
     */
    NodegroupAmiType["WINDOWS_FULL_2019_X86_64"] = "WINDOWS_FULL_2019_x86_64";
    /**
     * Windows Full 2022 (x86-64)
     */
    NodegroupAmiType["WINDOWS_FULL_2022_X86_64"] = "WINDOWS_FULL_2022_x86_64";
    /**
     * Amazon Linux 2023 (x86-64)
     */
    NodegroupAmiType["AL2023_X86_64_STANDARD"] = "AL2023_x86_64_STANDARD";
    /**
     * Amazon Linux 2023 with AWS Neuron drivers (x86-64)
     */
    NodegroupAmiType["AL2023_X86_64_NEURON"] = "AL2023_x86_64_NEURON";
    /**
     * Amazon Linux 2023 with NVIDIA drivers (x86-64)
     */
    NodegroupAmiType["AL2023_X86_64_NVIDIA"] = "AL2023_x86_64_NVIDIA";
    /**
     * Amazon Linux 2023 (ARM-64)
     */
    NodegroupAmiType["AL2023_ARM_64_STANDARD"] = "AL2023_ARM_64_STANDARD";
})(NodegroupAmiType || (exports.NodegroupAmiType = NodegroupAmiType = {}));
/**
 * Capacity type of the managed node group
 */
var CapacityType;
(function (CapacityType) {
    /**
     * spot instances
     */
    CapacityType["SPOT"] = "SPOT";
    /**
     * on-demand instances
     */
    CapacityType["ON_DEMAND"] = "ON_DEMAND";
    /**
     * capacity block instances
     */
    CapacityType["CAPACITY_BLOCK"] = "CAPACITY_BLOCK";
})(CapacityType || (exports.CapacityType = CapacityType = {}));
/**
 * Effect types of kubernetes node taint.
 */
var TaintEffect;
(function (TaintEffect) {
    /**
     * NoSchedule
     */
    TaintEffect["NO_SCHEDULE"] = "NO_SCHEDULE";
    /**
     * PreferNoSchedule
     */
    TaintEffect["PREFER_NO_SCHEDULE"] = "PREFER_NO_SCHEDULE";
    /**
     * NoExecute
     */
    TaintEffect["NO_EXECUTE"] = "NO_EXECUTE";
})(TaintEffect || (exports.TaintEffect = TaintEffect = {}));
/**
 * The Nodegroup resource class
 * @resource AWS::EKS::Nodegroup
 */
class Nodegroup extends core_1.Resource {
    /**
     * Import the Nodegroup from attributes
     */
    static fromNodegroupName(scope, id, nodegroupName) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.nodegroupName = nodegroupName;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.nodegroupName,
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_eks_v2_alpha_NodegroupProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Nodegroup);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        this.cluster = props.cluster;
        this.desiredSize = props.desiredSize ?? props.minSize ?? 2;
        this.maxSize = props.maxSize ?? this.desiredSize;
        this.minSize = props.minSize ?? 1;
        (0, core_1.withResolved)(this.desiredSize, this.maxSize, (desired, max) => {
            if (desired === undefined) {
                return;
            }
            if (desired > max) {
                throw new Error(`Desired capacity ${desired} can't be greater than max size ${max}`);
            }
        });
        (0, core_1.withResolved)(this.desiredSize, this.minSize, (desired, min) => {
            if (desired === undefined) {
                return;
            }
            if (desired < min) {
                throw new Error(`Minimum capacity ${min} can't be greater than desired size ${desired}`);
            }
        });
        if (props.launchTemplateSpec && props.diskSize) {
            // see - https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html
            // and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-nodegroup.html#cfn-eks-nodegroup-disksize
            throw new Error('diskSize must be specified within the launch template');
        }
        if (props.instanceType && props.instanceTypes) {
            throw new Error('"instanceType is deprecated, please use "instanceTypes" only.');
        }
        if (props.instanceType) {
            core_1.Annotations.of(this).addWarningV2('@aws-cdk/aws-eks:managedNodeGroupDeprecatedInstanceType', '"instanceType" is deprecated and will be removed in the next major version. please use "instanceTypes" instead');
        }
        const instanceTypes = props.instanceTypes ?? (props.instanceType ? [props.instanceType] : undefined);
        let possibleAmiTypes = [];
        if (instanceTypes && instanceTypes.length > 0) {
            /**
             * if the user explicitly configured instance types, we can't caculate the expected ami type as we support
             * Amazon Linux 2, Bottlerocket, and Windows now. However we can check:
             *
             * 1. instance types of different CPU architectures are not mixed(e.g. X86 with ARM).
             * 2. user-specified amiType should be included in `possibleAmiTypes`.
             */
            possibleAmiTypes = getPossibleAmiTypes(instanceTypes);
            // if the user explicitly configured an ami type, make sure it's included in the possibleAmiTypes
            if (props.amiType && !possibleAmiTypes.includes(props.amiType)) {
                throw new Error(`The specified AMI does not match the instance types architecture, either specify one of ${possibleAmiTypes.join(', ').toUpperCase()} or don't specify any`);
            }
            // if the user explicitly configured a Windows ami type, make sure the instanceType is allowed
            if (props.amiType && windowsAmiTypes.includes(props.amiType) &&
                instanceTypes.filter(isWindowsSupportedInstanceType).length < instanceTypes.length) {
                throw new Error('The specified instanceType does not support Windows workloads. '
                    + 'Amazon EC2 instance types C3, C4, D2, I2, M4 (excluding m4.16xlarge), M6a.x, and '
                    + 'R3 instances aren\'t supported for Windows workloads.');
            }
        }
        if (!props.nodeRole) {
            const ngRole = new aws_iam_1.Role(this, 'NodeGroupRole', {
                assumedBy: new aws_iam_1.ServicePrincipal('ec2.amazonaws.com'),
            });
            ngRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AmazonEKSWorkerNodePolicy'));
            ngRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AmazonEKS_CNI_Policy'));
            ngRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AmazonEC2ContainerRegistryReadOnly'));
            // Grant additional IPv6 networking permissions if running in IPv6
            // https://docs.aws.amazon.com/eks/latest/userguide/cni-iam-role.html
            if (props.cluster.ipFamily == cluster_1.IpFamily.IP_V6) {
                ngRole.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
                    // eslint-disable-next-line @cdklabs/no-literal-partition
                    resources: ['arn:aws:ec2:*:*:network-interface/*'],
                    actions: [
                        'ec2:AssignIpv6Addresses',
                        'ec2:UnassignIpv6Addresses',
                    ],
                }));
            }
            this.role = ngRole;
        }
        else {
            this.role = props.nodeRole;
        }
        this.validateUpdateConfig(props.maxUnavailable, props.maxUnavailablePercentage);
        const resource = new aws_eks_1.CfnNodegroup(this, 'Resource', {
            clusterName: this.cluster.clusterName,
            nodegroupName: props.nodegroupName,
            nodeRole: this.role.roleArn,
            subnets: this.cluster.vpc.selectSubnets(props.subnets).subnetIds,
            /**
             * Case 1: If launchTemplate is explicitly specified with custom AMI, we cannot specify amiType, or the node group deployment will fail.
             * As we don't know if the custom AMI is specified in the lauchTemplate, we just use props.amiType.
             *
             * Case 2: If launchTemplate is not specified, we try to determine amiType from the instanceTypes and it could be either AL2 or Bottlerocket.
             * To avoid breaking changes, we use possibleAmiTypes[0] if amiType is undefined and make sure AL2 is always the first element in possibleAmiTypes
             * as AL2 is previously the `expectedAmi` and this avoids breaking changes.
             *
             * That being said, users now either have to explicitly specify correct amiType or just leave it undefined.
             */
            amiType: props.launchTemplateSpec ? props.amiType : (props.amiType ?? possibleAmiTypes[0]),
            capacityType: props.capacityType ? props.capacityType.valueOf() : undefined,
            diskSize: props.diskSize,
            forceUpdateEnabled: props.forceUpdate ?? true,
            // note that we don't check if a launch template is configured here (even though it might configure instance types as well)
            // because this doesn't have a default value, meaning the user had to explicitly configure this.
            instanceTypes: instanceTypes?.map(t => t.toString()),
            labels: props.labels,
            taints: props.taints,
            launchTemplate: props.launchTemplateSpec,
            releaseVersion: props.releaseVersion,
            remoteAccess: props.remoteAccess ? {
                ec2SshKey: props.remoteAccess.sshKeyName,
                sourceSecurityGroups: props.remoteAccess.sourceSecurityGroups ?
                    props.remoteAccess.sourceSecurityGroups.map(m => m.securityGroupId) : undefined,
            } : undefined,
            scalingConfig: {
                desiredSize: this.desiredSize,
                maxSize: this.maxSize,
                minSize: this.minSize,
            },
            tags: props.tags,
            updateConfig: props.maxUnavailable || props.maxUnavailablePercentage ? {
                maxUnavailable: props.maxUnavailable,
                maxUnavailablePercentage: props.maxUnavailablePercentage,
            } : undefined,
            nodeRepairConfig: props.enableNodeAutoRepair ? {
                enabled: props.enableNodeAutoRepair,
            } : undefined,
        });
        if (this.cluster instanceof cluster_1.Cluster) {
            // the controller runs on the worker nodes so they cannot
            // be deleted before the controller.
            if (this.cluster.albController) {
                constructs_1.Node.of(this.cluster.albController).addDependency(this);
            }
        }
        this.nodegroupArn = this.getResourceArnAttribute(resource.attrArn, {
            service: 'eks',
            resource: 'nodegroup',
            resourceName: this.physicalName,
        });
        if (core_1.FeatureFlags.of(this).isEnabled(cxapi.EKS_NODEGROUP_NAME)) {
            this.nodegroupName = this.getResourceNameAttribute(resource.attrNodegroupName);
        }
        else {
            this.nodegroupName = this.getResourceNameAttribute(resource.ref);
        }
    }
    validateUpdateConfig(maxUnavailable, maxUnavailablePercentage) {
        if (!maxUnavailable && !maxUnavailablePercentage)
            return;
        if (maxUnavailable && maxUnavailablePercentage) {
            throw new Error('maxUnavailable and maxUnavailablePercentage are not allowed to be defined together');
        }
        if (maxUnavailablePercentage && (maxUnavailablePercentage < 1 || maxUnavailablePercentage > 100)) {
            throw new Error(`maxUnavailablePercentage must be between 1 and 100, got ${maxUnavailablePercentage}`);
        }
        if (maxUnavailable) {
            if (maxUnavailable > this.maxSize) {
                throw new Error(`maxUnavailable must be lower than maxSize (${this.maxSize}), got ${maxUnavailable}`);
            }
            if (maxUnavailable < 1 || maxUnavailable > 100) {
                throw new Error(`maxUnavailable must be between 1 and 100, got ${maxUnavailable}`);
            }
        }
    }
}
exports.Nodegroup = Nodegroup;
_a = JSII_RTTI_SYMBOL_1;
Nodegroup[_a] = { fqn: "@aws-cdk/aws-eks-v2-alpha.Nodegroup", version: "2.187.0-alpha.0" };
/**
 * AMI types of different architectures. Make sure AL2 is always the first element, which will be the default
 * AmiType if amiType and launchTemplateSpec are both undefined.
 */
const arm64AmiTypes = [
    NodegroupAmiType.AL2_ARM_64,
    NodegroupAmiType.AL2023_ARM_64_STANDARD,
    NodegroupAmiType.BOTTLEROCKET_ARM_64,
];
const x8664AmiTypes = [
    NodegroupAmiType.AL2_X86_64,
    NodegroupAmiType.AL2023_X86_64_STANDARD,
    NodegroupAmiType.BOTTLEROCKET_X86_64,
    NodegroupAmiType.WINDOWS_CORE_2019_X86_64,
    NodegroupAmiType.WINDOWS_CORE_2022_X86_64,
    NodegroupAmiType.WINDOWS_FULL_2019_X86_64,
    NodegroupAmiType.WINDOWS_FULL_2022_X86_64,
];
const windowsAmiTypes = [
    NodegroupAmiType.WINDOWS_CORE_2019_X86_64,
    NodegroupAmiType.WINDOWS_CORE_2022_X86_64,
    NodegroupAmiType.WINDOWS_FULL_2019_X86_64,
    NodegroupAmiType.WINDOWS_FULL_2022_X86_64,
];
const gpuAmiTypes = [
    NodegroupAmiType.AL2_X86_64_GPU,
    NodegroupAmiType.AL2023_X86_64_NEURON,
    NodegroupAmiType.AL2023_X86_64_NVIDIA,
    NodegroupAmiType.BOTTLEROCKET_X86_64_NVIDIA,
    NodegroupAmiType.BOTTLEROCKET_ARM_64_NVIDIA,
];
/**
 * This function check if the instanceType is supported by Windows AMI.
 * https://docs.aws.amazon.com/eks/latest/userguide/windows-support.html
 * @param instanceType The EC2 instance type
 */
function isWindowsSupportedInstanceType(instanceType) {
    // compare instanceType to forbidden InstanceTypes for Windows. Add exception for m6a.16xlarge.
    // NOTE: i2 instance class is not present in the InstanceClass enum.
    const forbiddenInstanceClasses = [aws_ec2_1.InstanceClass.C3, aws_ec2_1.InstanceClass.C4, aws_ec2_1.InstanceClass.D2, aws_ec2_1.InstanceClass.M4,
        aws_ec2_1.InstanceClass.M6A, aws_ec2_1.InstanceClass.R3];
    return instanceType.toString() === aws_ec2_1.InstanceType.of(aws_ec2_1.InstanceClass.M4, aws_ec2_1.InstanceSize.XLARGE16).toString() ||
        forbiddenInstanceClasses.every((c) => !instanceType.sameInstanceClassAs(aws_ec2_1.InstanceType.of(c, aws_ec2_1.InstanceSize.LARGE)) && !instanceType.toString().match(/^i2/));
}
/**
 * This function examines the CPU architecture of every instance type and determines
 * what AMI types are compatible for all of them. it either throws or produces an array of possible AMI types because
 * instance types of different CPU architectures are not supported.
 * @param instanceTypes The instance types
 * @returns NodegroupAmiType[]
 */
function getPossibleAmiTypes(instanceTypes) {
    function typeToArch(instanceType) {
        return (0, nodegroup_1.isGpuInstanceType)(instanceType) ? 'GPU' : instanceType.architecture;
    }
    const archAmiMap = new Map([
        [aws_ec2_1.InstanceArchitecture.ARM_64, arm64AmiTypes],
        [aws_ec2_1.InstanceArchitecture.X86_64, x8664AmiTypes],
        ['GPU', gpuAmiTypes],
    ]);
    const architectures = new Set(instanceTypes.map(typeToArch));
    if (architectures.size === 0) { // protective code, the current implementation will never result in this.
        throw new Error(`Cannot determine any ami type compatible with instance types: ${instanceTypes.map(i => i.toString()).join(', ')}`);
    }
    if (architectures.size > 1) {
        throw new Error('instanceTypes of different architectures is not allowed');
    }
    return archAmiMap.get(Array.from(architectures)[0]);
}
//# sourceMappingURL=data:application/json;base64,