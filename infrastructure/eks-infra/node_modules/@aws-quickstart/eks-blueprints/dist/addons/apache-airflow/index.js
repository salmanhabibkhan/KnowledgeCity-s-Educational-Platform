"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApacheAirflowAddOn = void 0;
const assert = require("assert");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const index_1 = require("../helm-addon/index");
const aws_loadbalancer_controller_1 = require("../aws-loadbalancer-controller");
const efs_csi_driver_1 = require("../efs-csi-driver");
const utils_1 = require("../../utils");
const ts_deepmerge_1 = require("ts-deepmerge");
const AIRFLOW = 'airflow';
const RELEASE = 'blueprints-addon-apache-airflow';
const AIRFLOWSC = 'apache-airflow-sc';
const AIRFLOWPVC = 'efs-apache-airflow-pvc';
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: AIRFLOW,
    namespace: AIRFLOW,
    chart: AIRFLOW,
    version: "1.16.0",
    release: RELEASE,
    repository: "https://airflow.apache.org",
    enableAlb: false,
    enableEfs: false,
    enableLogging: false,
    values: {}
};
/**
 * This add-on is currently not supported. It will apply the latest falco helm chart but the latest AMI does not have stock driver supported and
 * driver build in the init fails atm.
 */
let ApacheAirflowAddOn = class ApacheAirflowAddOn extends index_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        const albAddOnCheck = clusterInfo.getScheduledAddOn(aws_loadbalancer_controller_1.AwsLoadBalancerControllerAddOn.name);
        const enableAlb = this.options.enableAlb;
        const cert = this.options.certificateResourceName;
        const loggingIsEnabled = this.options.enableLogging;
        const loggingBucketResourceName = this.options.s3Bucket;
        const efsIsEnabled = this.options.enableEfs;
        const efsResourceName = this.options.efsFileSystem;
        const namespace = this.options.namespace;
        // Create Namespace
        const ns = (0, utils_1.createNamespace)(namespace, cluster, true, true);
        // Setting basic custom values for Kubernetes
        let values = {
            config: {
                "kubernetes": {
                    "namespace": this.options.namespace
                },
                "kubernetes_executor": {
                    "namespace": this.options.namespace
                }
            },
            "securityContext": {
                "fsGroup": 66534
            },
            "executor": "KubernetesExecutor"
        };
        // If Load Balancing is enabled
        if (enableAlb) {
            values = setUpLoadBalancer(clusterInfo, values, albAddOnCheck, cert);
        }
        else {
            assert(!cert, 'Cert option is supported only if ALB is enabled.');
        }
        // If Logging with S3 is enabled
        if (loggingIsEnabled) {
            const bucket = clusterInfo.getRequiredResource(loggingBucketResourceName);
            values = setUpLogging(clusterInfo, values, ns, namespace, bucket);
        }
        // If EFS is enabled for persistent storage
        let pvcResource;
        if (efsIsEnabled) {
            [values, pvcResource] = setUpEFS(clusterInfo, values, ns, namespace, efsResourceName);
        }
        // Merge values with user-provided one
        values = (0, ts_deepmerge_1.merge)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        // Apply Helm Chart
        const chart = this.addHelmChart(clusterInfo, values, false, false);
        // Add PVC dependency to the Chart in case of EFS generating the resource
        if (efsIsEnabled) {
            chart.node.addDependency(pvcResource);
        }
        return Promise.resolve(chart);
    }
};
exports.ApacheAirflowAddOn = ApacheAirflowAddOn;
exports.ApacheAirflowAddOn = ApacheAirflowAddOn = __decorate([
    utils_1.supportsX86
], ApacheAirflowAddOn);
/**
 * Helper function to set up Load Balancer
 */
function setUpLoadBalancer(clusterInfo, values, albAddOnCheck, cert) {
    // Check to ensure AWS Load Balancer Controller AddOn is provided in the list of Addons
    assert(albAddOnCheck, `Missing a dependency: ${aws_loadbalancer_controller_1.AwsLoadBalancerControllerAddOn.name}. Please add it to your list of addons.`);
    const presetAnnotations = {
        'alb.ingress.kubernetes.io/group.name': 'airflow',
        'alb.ingress.kubernetes.io/scheme': 'internet-facing',
        'alb.ingress.kubernetes.io/target-type': 'ip',
        'alb.ingress.kubernetes.io/listen-ports': '[{"HTTP": 80}]',
        'alb.ingress.kubernetes.io/healthcheck-path': '/health',
    };
    // Set helm custom value for certificates, if provided
    if (cert) {
        presetAnnotations['alb.ingress.kubernetes.io/listen-ports'] = '[{"HTTP": 80},{"HTTPS":443}]';
        const certificate = clusterInfo.getResource(cert);
        presetAnnotations['alb.ingress.kubernetes.io/certificate-arn'] = certificate === null || certificate === void 0 ? void 0 : certificate.certificateArn;
    }
    (0, utils_1.setPath)(values, "ingress.web", {
        "enabled": "true",
        "annotations": presetAnnotations,
        "pathType": "Prefix",
        "ingressClassName": "alb",
    });
    // Configuring Ingress for Airflow Web Ui hence the service type is changed to NodePort
    (0, utils_1.setPath)(values, "webserver.service", {
        type: "NodePort",
        ports: [{
                name: "airflow-ui",
                port: "{{ .Values.ports.airflowUI }}"
            }]
    });
    return values;
}
/**
 * Helper function to set up Logging with S3 Bucket
*/
function setUpLogging(clusterInfo, values, ns, namespace, bucket) {
    // Assert check to ensure you provide an S3 Bucket
    assert(bucket, "Please provide the name of S3 bucket for Logging.");
    // IRSA Policy
    const AirflowLoggingPolicy = {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:ListBucket"
                ],
                "Resource": [`arn:aws:s3:::${bucket.bucketName}`]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                ],
                "Resource": [`arn:aws:s3:::${bucket.bucketName}/*`]
            }
        ]
    };
    // Set up IRSA
    const airflowLoggingPolicyDocument = aws_iam_1.PolicyDocument.fromJson(AirflowLoggingPolicy);
    const sa = (0, utils_1.createServiceAccount)(clusterInfo.cluster, 'airflow-s3-logging-sa', namespace, airflowLoggingPolicyDocument);
    sa.node.addDependency(ns);
    // Helm custom value set up for S3 logging set up
    (0, utils_1.setPath)(values, "config.core.colored_console_log", 'True');
    (0, utils_1.setPath)(values, "config.core.remote_logging", 'True');
    (0, utils_1.setPath)(values, "config.logging", {
        "remote_logging": 'True',
        "logging_level": 'INFO',
        "colored_console_log": 'True',
        "remote_base_log_folder": `s3://${bucket.bucketName}/airflow-logs`,
        // aws_s3_conn is the name of the connection that needs to be created using Airflow admin UI once the deployment is complete
        // Steps can be seen in the docs link here -> https://github.com/apache/airflow/issues/25322
        "remote_log_conn_id": 'aws_s3_conn',
        "delete_worker_pods": 'False',
        "encrypt_s3_logs": 'True'
    });
    // Set Webserver SA so that server logs can be shipped to S3
    (0, utils_1.setPath)(values, "webserver.serviceAccount", {
        create: false,
        name: `${sa.serviceAccountName}`
    });
    // Set Worker SA so that worker logs can be shipped to S3
    (0, utils_1.setPath)(values, "workers.serviceAccount", {
        create: false,
        name: `${sa.serviceAccountName}`
    });
    // Set Scheduler SA so that scheduler logs can be shipped to S3
    (0, utils_1.setPath)(values, "scheduler.serviceAccount", {
        create: false,
        name: `${sa.serviceAccountName}`
    });
    return values;
}
/**
 *
 */
function setUpEFS(clusterInfo, values, ns, namespace, efsResourceName) {
    // Check 
    const efsAddOnCheck = clusterInfo.getScheduledAddOn(efs_csi_driver_1.EfsCsiDriverAddOn.name);
    assert(efsAddOnCheck, `Missing a dependency: ${efs_csi_driver_1.EfsCsiDriverAddOn.name}. Please add it to your list of addons.`);
    const efs = clusterInfo.getRequiredResource(efsResourceName);
    assert(efs, "Please provide the name of EFS File System.");
    // Need to create a storage class and pvc for the EFS
    const scResource = new aws_eks_1.KubernetesManifest(clusterInfo.cluster, 'apache-airflow-efs-sc', {
        cluster: clusterInfo.cluster,
        manifest: [{
                apiVersion: "storage.k8s.io/v1",
                kind: "StorageClass",
                metadata: { name: AIRFLOWSC },
                provisioner: "efs.csi.aws.com",
                parameters: {
                    provisioningMode: "efs-ap",
                    fileSystemId: `${efs.fileSystemId}`,
                    directoryPerms: "700",
                    gidRangeStart: "1000",
                    gidRangeEnd: "2000",
                }
            }], overwrite: true,
    });
    const pvcResource = new aws_eks_1.KubernetesManifest(clusterInfo.cluster, 'apache-airflow-efs-pvc', {
        cluster: clusterInfo.cluster,
        manifest: [{
                apiVersion: "v1",
                kind: "PersistentVolumeClaim",
                metadata: {
                    name: AIRFLOWPVC,
                    namespace: `${namespace}`
                },
                spec: {
                    accessModes: ["ReadWriteMany"],
                    storageClassName: AIRFLOWSC,
                    resources: {
                        requests: {
                            storage: '10Gi'
                        }
                    }
                }
            }], overwrite: true,
    });
    // SC depends on the EFS addon
    if (efsAddOnCheck) {
        efsAddOnCheck.then(construct => scResource.node.addDependency(construct));
    }
    // PVC depends on SC and NS
    pvcResource.node.addDependency(scResource);
    pvcResource.node.addDependency(ns);
    // Set helm custom values for persistent storage of DAGs
    (0, utils_1.setPath)(values, "dags.persistence", {
        enabled: true,
        size: "10Gi",
        storageClassName: AIRFLOWSC,
        accessMode: "ReadWriteMany",
        existingClaim: AIRFLOWPVC
    });
    return [values, pvcResource];
}
//# sourceMappingURL=data:application/json;base64,