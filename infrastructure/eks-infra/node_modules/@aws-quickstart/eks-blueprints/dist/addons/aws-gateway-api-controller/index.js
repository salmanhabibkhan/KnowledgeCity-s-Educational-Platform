"use strict";
// https://www.gateway-api-controller.eks.aws.dev/latest/guides/deploy/#setup
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsGatewayApiControllerAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const iam_policy_1 = require("./iam-policy");
const gateway_api_crds_1 = require("../gateway-api-crds");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const customResources = require("aws-cdk-lib/custom-resources");
const ec2 = require("aws-cdk-lib/aws-ec2");
const utils_1 = require("../../utils");
const AWS_GATEWAY_API_CONTROLLER_SA = 'gateway-api-controller';
const defaultProps = {
    name: 'aws-gateway-api-controller',
    namespace: 'aws-application-networking-system',
    chart: 'aws-gateway-controller-chart',
    version: 'v1.1.0',
    repository: 'oci://public.ecr.aws/aws-application-networking-k8s/aws-gateway-controller-chart',
    values: {},
    defaultServiceNetwork: '',
    enableServiceNetworkOverride: false,
    webhookEnabled: false,
    disableTaggingServiceApi: false,
    routeMaxConcurrentReconciles: 1,
};
class AwsGatewayApiControllerAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        // Step 1: Configure Security Groups for VPC Lattice 
        this.configureSecurityGroup(clusterInfo);
        // Step 2: Create namespace
        const namespace = this.createNamespace(clusterInfo);
        // Step 3: Set up IAM permissions
        const serviceAccount = this.setupIamPermissions(clusterInfo);
        // Step 4: Create GatewayClass that uses the official K8s Gateway API
        this.createGatewayClass(clusterInfo);
        // Step 5: Deploy the controller
        const chartValues = this.populateValues(serviceAccount);
        const awsGatewayApiController = this.addHelmChart(clusterInfo, chartValues);
        // Set up dependencies:
        serviceAccount.node.addDependency(namespace);
        awsGatewayApiController.node.addDependency(serviceAccount);
        return Promise.resolve(awsGatewayApiController);
    }
    /**
     * CDK does not provide native way to get managed prefix list as of 3/11/2025
     * PR seems to be almost done: https://github.com/aws/aws-cdk/pull/33619
     * Using CRD workaround as described here for now: https://gist.github.com/bericp1/eb0ce72079161f45f4867a9e3ab02bd9
     * */
    configureSecurityGroup(clusterInfo) {
        const clusterSg = clusterInfo.cluster.clusterSecurityGroup;
        const region = aws_cdk_lib_1.Stack.of(clusterInfo.cluster).region;
        // Create the prefix list lookup custom resource
        const vpcLatticePrefixListCall = new customResources.AwsCustomResource(clusterInfo.cluster.stack, 'GetVpcLatticePrefixListIDs', {
            resourceType: 'Custom::GetVpcLatticePrefixListIDs',
            onUpdate: {
                region,
                service: 'EC2',
                action: 'describeManagedPrefixLists',
                parameters: {
                    Filters: [
                        {
                            Name: 'prefix-list-name',
                            Values: [
                                `com.amazonaws.${region}.vpc-lattice`,
                                `com.amazonaws.${region}.ipv6.vpc-lattice`
                            ],
                        },
                    ],
                },
                physicalResourceId: customResources.PhysicalResourceId.of('GetVpcLatticePrefixListIDsFunction')
            },
            policy: customResources.AwsCustomResourcePolicy.fromSdkCalls({
                resources: customResources.AwsCustomResourcePolicy.ANY_RESOURCE
            })
        });
        // Get the prefix list IDs from the custom resource response
        const prefixListIds = [
            vpcLatticePrefixListCall.getResponseField('PrefixLists.0.PrefixListId'),
            vpcLatticePrefixListCall.getResponseField('PrefixLists.1.PrefixListId'),
        ];
        // Add security group rules for each prefix list
        prefixListIds.forEach(prefixListId => {
            // Add ingress rule
            clusterSg.addIngressRule(ec2.Peer.prefixList(prefixListId.toString()), ec2.Port.allTraffic(), 'Allow inbound from VPC Lattice');
            // Add egress rule
            clusterSg.addEgressRule(ec2.Peer.prefixList(prefixListId.toString()), ec2.Port.allTraffic(), 'Allow outbound to VPC Lattice');
        });
        return vpcLatticePrefixListCall;
    }
    // https://github.com/aws/aws-application-networking-k8s/blob/main/files/controller-installation/deploy-namesystem.yaml
    createNamespace(clusterInfo) {
        return clusterInfo.cluster.addManifest('aws-application-networking-system-namespace', {
            apiVersion: 'v1',
            kind: 'Namespace',
            metadata: {
                name: this.options.namespace,
                labels: {
                    'control-plane': 'gateway-api-controller'
                }
            }
        });
    }
    // https://github.com/aws/aws-application-networking-k8s/blob/main/files/controller-installation/recommended-inline-policy.json
    setupIamPermissions(clusterInfo) {
        const cluster = clusterInfo.cluster;
        const serviceAccount = cluster.addServiceAccount(AWS_GATEWAY_API_CONTROLLER_SA, {
            name: AWS_GATEWAY_API_CONTROLLER_SA,
            namespace: this.options.namespace,
        });
        (0, iam_policy_1.getVpcLatticeControllerPolicy)().forEach((statement) => {
            serviceAccount.addToPrincipalPolicy(statement);
        });
        return serviceAccount;
    }
    // Sets Helm and AWS Gateway API Controller Configuration 
    // https://www.gateway-api-controller.eks.aws.dev/latest/guides/environment/
    populateValues(serviceAccount) {
        var _a;
        const values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        values.serviceAccount = {
            create: false,
            name: serviceAccount.serviceAccountName
        };
        if (this.options.logLevel) {
            values.logLevel = this.options.logLevel;
        }
        if (this.options.defaultServiceNetwork) {
            values.defaultServiceNetwork = this.options.defaultServiceNetwork;
        }
        if (this.options.enableServiceNetworkOverride) {
            values.enableServiceNetworkOverride = this.options.enableServiceNetworkOverride;
        }
        if (this.options.webhookEnabled) {
            values.webhookEnabled = this.options.webhookEnabled;
        }
        if (this.options.disableTaggingServiceApi) {
            values.disableTaggingServiceApi = this.options.disableTaggingServiceApi;
        }
        if (this.options.routeMaxConcurrentReconciles) {
            values.routeMaxConcurrentReconciles = this.options.routeMaxConcurrentReconciles;
        }
        return values;
    }
    // https://github.com/aws/aws-application-networking-k8s/blob/main/files/controller-installation/gatewayclass.yaml
    createGatewayClass(clusterInfo) {
        return clusterInfo.cluster.addManifest('vpc-lattice-gateway-class', {
            apiVersion: 'gateway.networking.k8s.io/v1beta1',
            kind: 'GatewayClass',
            metadata: {
                name: 'amazon-vpc-lattice'
            },
            spec: {
                controllerName: 'application-networking.k8s.aws/gateway-api-controller'
            }
        });
    }
}
exports.AwsGatewayApiControllerAddOn = AwsGatewayApiControllerAddOn;
__decorate([
    (0, utils_1.dependable)(gateway_api_crds_1.GatewayApiCrdsAddOn.name)
], AwsGatewayApiControllerAddOn.prototype, "deploy", null);
//# sourceMappingURL=data:application/json;base64,