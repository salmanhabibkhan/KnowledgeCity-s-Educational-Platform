"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsLoadBalancerControllerAddOn = void 0;
const iam = require("aws-cdk-lib/aws-iam");
require("reflect-metadata");
const registry_utils_1 = require("../../utils/registry-utils");
const helm_addon_1 = require("../helm-addon");
const iam_policy_1 = require("./iam-policy");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const utils = require("../../utils");
const AWS_LOAD_BALANCER_CONTROLLER = 'aws-load-balancer-controller';
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: AWS_LOAD_BALANCER_CONTROLLER,
    namespace: 'kube-system',
    chart: AWS_LOAD_BALANCER_CONTROLLER,
    repository: 'https://aws.github.io/eks-charts',
    release: AWS_LOAD_BALANCER_CONTROLLER,
    version: '1.12.0',
    enableShield: false,
    enableWaf: false,
    enableWafv2: false,
    createIngressClassResource: true,
    ingressClass: "alb",
    enableServiceMutatorWebhook: false
};
function lookupImage(registry, region) {
    if (registry == null) {
        console.log("Unable to get ECR repository for AWS Loadbalancer Controller for region " + region + ". Using default helm image.");
        return {};
    }
    return { image: { repository: registry + "amazon/aws-load-balancer-controller" } };
}
let AwsLoadBalancerControllerAddOn = class AwsLoadBalancerControllerAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        const serviceAccount = cluster.addServiceAccount("aws-load-balancer-controller", {
            name: AWS_LOAD_BALANCER_CONTROLLER,
            namespace: this.options.namespace,
        });
        (0, iam_policy_1.AwsLoadbalancerControllerIamPolicy)(cluster.stack.partition).Statement.forEach((statement) => {
            serviceAccount.addToPrincipalPolicy(iam.PolicyStatement.fromJson(statement));
        });
        const registry = registry_utils_1.registries.get(cluster.stack.region);
        const image = lookupImage(registry, cluster.stack.region);
        const awsLoadBalancerControllerChart = this.addHelmChart(clusterInfo, {
            clusterName: cluster.clusterName,
            serviceAccount: {
                create: false,
                name: serviceAccount.serviceAccountName,
            },
            // must disable waf features for aws-cn partition
            enableShield: this.options.enableShield,
            enableWaf: this.options.enableWaf,
            enableWafv2: this.options.enableWafv2,
            createIngressClassResource: this.options.createIngressClassResource,
            ingressClass: this.options.ingressClass,
            enableServiceMutatorWebhook: this.options.enableServiceMutatorWebhook,
            region: clusterInfo.cluster.stack.region,
            ...image,
            vpcId: clusterInfo.cluster.vpc.vpcId,
            ...this.options.values,
        }, undefined, true, aws_cdk_lib_1.Duration.minutes(15));
        awsLoadBalancerControllerChart.node.addDependency(serviceAccount);
        // return the Promise Construct for any teams that may depend on this
        return Promise.resolve(awsLoadBalancerControllerChart);
    }
};
exports.AwsLoadBalancerControllerAddOn = AwsLoadBalancerControllerAddOn;
__decorate([
    utils.conflictsWithAutoMode(null)
], AwsLoadBalancerControllerAddOn.prototype, "deploy", null);
exports.AwsLoadBalancerControllerAddOn = AwsLoadBalancerControllerAddOn = __decorate([
    utils.supportsALL
], AwsLoadBalancerControllerAddOn);
//# sourceMappingURL=data:application/json;base64,