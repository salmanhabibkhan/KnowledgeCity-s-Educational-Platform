"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudWatchInsights = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const utils_1 = require("../../utils");
const core_addon_1 = require("../core-addon");
const iam_policy_1 = require("./iam-policy");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
// Can be easily retrieved from the aws cli with:
// aws eks describe-addon-versions --kubernetes-version <kubernetes-version> --addon-name amazon-cloudwatch-observability \
//     --query 'addons[].addonVersions[].{Version: addonVersion, Defaultversion: compatibilities[0].defaultVersion}' --output table
const versionMap = new Map([
    [aws_eks_1.KubernetesVersion.V1_31, "v2.3.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_30, "v2.3.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_29, "v2.3.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_28, "v2.3.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_27, "v2.3.0-eksbuild.1"]
]);
const defaultProps = {
    addOnName: "amazon-cloudwatch-observability",
    version: "auto",
    versionMap: versionMap,
    saName: "cloudwatch-agent",
    namespace: "amazon-cloudwatch"
};
/**
 * Implementation of AWS CloudWatch Insights Addon
 */
let CloudWatchInsights = class CloudWatchInsights extends core_addon_1.CoreAddOn {
    constructor(props) {
        var _a, _b;
        super({
            addOnName: defaultProps.addOnName,
            version: (_a = props === null || props === void 0 ? void 0 : props.version) !== null && _a !== void 0 ? _a : defaultProps.version,
            versionMap: defaultProps.versionMap,
            saName: defaultProps.saName,
            namespace: defaultProps.namespace,
            configurationValues: (_b = props === null || props === void 0 ? void 0 : props.customCloudWatchAgentConfig) !== null && _b !== void 0 ? _b : {},
            controlPlaneAddOn: false
        });
        this.options = props !== null && props !== void 0 ? props : {};
    }
    deploy(clusterInfo) {
        return super.deploy(clusterInfo);
    }
    createNamespace(clusterInfo, namespaceName) {
        return (0, utils_1.createNamespace)(namespaceName, clusterInfo.cluster);
    }
    provideManagedPolicies(clusterInfo) {
        const requiredPolicies = [
            aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("CloudWatchAgentServerPolicy"),
            aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AWSXrayWriteOnlyAccess")
        ];
        if (this.options.ebsPerformanceLogs != undefined && this.options.ebsPerformanceLogs) {
            const ebsPolicy = new aws_iam_1.ManagedPolicy(clusterInfo.cluster, 'cloudwatch-agent-mangaed-policy', {
                document: (0, iam_policy_1.ebsCollectorPolicy)()
            });
            requiredPolicies.push(ebsPolicy);
        }
        return requiredPolicies;
    }
};
exports.CloudWatchInsights = CloudWatchInsights;
__decorate([
    (0, utils_1.conflictsWith)("AdotCollectorAddon", "CloudWatchAdotAddon", "CloudWatchLogsAddon")
], CloudWatchInsights.prototype, "deploy", null);
exports.CloudWatchInsights = CloudWatchInsights = __decorate([
    utils_1.supportsALL
], CloudWatchInsights);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2Nsb3VkLXdhdGNoLWluc2lnaHRzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLGlEQUFrRTtBQUVsRSx1Q0FBeUY7QUFDekYsOENBQXdEO0FBQ3hELDZDQUFnRDtBQUNoRCxpREFBc0Q7QUFFdEQsaURBQWlEO0FBQ2pELDJIQUEySDtBQUMzSCxtSUFBbUk7QUFDbkksTUFBTSxVQUFVLEdBQW1DLElBQUksR0FBRyxDQUFDO0lBQ3ZELENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDO0lBQzlDLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDO0lBQzlDLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDO0lBQzlDLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDO0lBQzlDLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDO0NBQ2pELENBQUMsQ0FBQztBQXdCSCxNQUFNLFlBQVksR0FBRztJQUNuQixTQUFTLEVBQUUsaUNBQWlDO0lBQzVDLE9BQU8sRUFBRSxNQUFNO0lBQ2YsVUFBVSxFQUFFLFVBQVU7SUFDdEIsTUFBTSxFQUFFLGtCQUFrQjtJQUMxQixTQUFTLEVBQUUsbUJBQW1CO0NBQy9CLENBQUM7QUFFRjs7R0FFRztBQUVJLElBQU0sa0JBQWtCLEdBQXhCLE1BQU0sa0JBQW1CLFNBQVEsc0JBQVM7SUFJL0MsWUFBWSxLQUFvQzs7UUFDOUMsS0FBSyxDQUFDO1lBQ0osU0FBUyxFQUFFLFlBQVksQ0FBQyxTQUFTO1lBQ2pDLE9BQU8sRUFBRSxNQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLG1DQUFJLFlBQVksQ0FBQyxPQUFPO1lBQy9DLFVBQVUsRUFBRSxZQUFZLENBQUMsVUFBVTtZQUNuQyxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU07WUFDM0IsU0FBUyxFQUFFLFlBQVksQ0FBQyxTQUFTO1lBQ2pDLG1CQUFtQixFQUFFLE1BQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLDJCQUEyQixtQ0FBSSxFQUFFO1lBQzdELGlCQUFpQixFQUFFLEtBQUs7U0FDekIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUdELE1BQU0sQ0FBQyxXQUF3QjtRQUM3QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUF3QixFQUFFLGFBQXFCO1FBQzdELE9BQU8sSUFBQSx1QkFBYSxFQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELHNCQUFzQixDQUFDLFdBQXdCO1FBQzdDLE1BQU0sZ0JBQWdCLEdBQUc7WUFDdkIsdUJBQWEsQ0FBQyx3QkFBd0IsQ0FBQyw2QkFBNkIsQ0FBQztZQUNyRSx1QkFBYSxDQUFDLHdCQUF3QixDQUFDLHdCQUF3QixDQUFDO1NBQ2pFLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUNwRixNQUFNLFNBQVMsR0FBRyxJQUFJLHVCQUFhLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRTtnQkFDMUYsUUFBUSxFQUFFLElBQUEsK0JBQWtCLEdBQUU7YUFDL0IsQ0FBQyxDQUFDO1lBQ0gsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25DLENBQUM7UUFFRCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7Q0FDRixDQUFBO0FBMUNZLGdEQUFrQjtBQW1CN0I7SUFEQyxJQUFBLHFCQUFhLEVBQUMsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLENBQUM7Z0RBR2pGOzZCQXJCVSxrQkFBa0I7SUFEOUIsbUJBQVc7R0FDQyxrQkFBa0IsQ0EwQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25zdHJ1Y3QsIElDb25zdHJ1Y3R9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtJTWFuYWdlZFBvbGljeSwgTWFuYWdlZFBvbGljeX0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7Q2x1c3RlckluZm8sIFZhbHVlc30gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHtjb25mbGljdHNXaXRoLCBjcmVhdGVOYW1lc3BhY2UgYXMgbWFrZU5hbWVzcGFjZSwgc3VwcG9ydHNBTEx9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHtDb3JlQWRkT24sIENvcmVBZGRPblByb3BzfSBmcm9tIFwiLi4vY29yZS1hZGRvblwiO1xuaW1wb3J0IHtlYnNDb2xsZWN0b3JQb2xpY3l9IGZyb20gXCIuL2lhbS1wb2xpY3lcIjtcbmltcG9ydCB7S3ViZXJuZXRlc1ZlcnNpb259IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWtzXCI7XG5cbi8vIENhbiBiZSBlYXNpbHkgcmV0cmlldmVkIGZyb20gdGhlIGF3cyBjbGkgd2l0aDpcbi8vIGF3cyBla3MgZGVzY3JpYmUtYWRkb24tdmVyc2lvbnMgLS1rdWJlcm5ldGVzLXZlcnNpb24gPGt1YmVybmV0ZXMtdmVyc2lvbj4gLS1hZGRvbi1uYW1lIGFtYXpvbi1jbG91ZHdhdGNoLW9ic2VydmFiaWxpdHkgXFxcbi8vICAgICAtLXF1ZXJ5ICdhZGRvbnNbXS5hZGRvblZlcnNpb25zW10ue1ZlcnNpb246IGFkZG9uVmVyc2lvbiwgRGVmYXVsdHZlcnNpb246IGNvbXBhdGliaWxpdGllc1swXS5kZWZhdWx0VmVyc2lvbn0nIC0tb3V0cHV0IHRhYmxlXG5jb25zdCB2ZXJzaW9uTWFwOiBNYXA8S3ViZXJuZXRlc1ZlcnNpb24sIHN0cmluZz4gPSBuZXcgTWFwKFtcbiAgICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMzEsIFwidjIuMy4wLWVrc2J1aWxkLjFcIl0sXG4gICAgW0t1YmVybmV0ZXNWZXJzaW9uLlYxXzMwLCBcInYyLjMuMC1la3NidWlsZC4xXCJdLFxuICAgIFtLdWJlcm5ldGVzVmVyc2lvbi5WMV8yOSwgXCJ2Mi4zLjAtZWtzYnVpbGQuMVwiXSxcbiAgICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMjgsIFwidjIuMy4wLWVrc2J1aWxkLjFcIl0sXG4gICAgW0t1YmVybmV0ZXNWZXJzaW9uLlYxXzI3LCBcInYyLjMuMC1la3NidWlsZC4xXCJdXG5dKTtcblxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgQVdTIENvbnRhaW5lciBJbnNpZ2h0cyBhZGQtb24uXG4gKi9cbmV4cG9ydCB0eXBlIENsb3VkV2F0Y2hJbnNpZ2h0c0FkZE9uUHJvcHMgPSBPbWl0PENvcmVBZGRPblByb3BzLCBcInNhTmFtZVwiIHwgXCJhZGRPbk5hbWVcIiB8IFwidmVyc2lvblwiPiAmIHtcbiAgLyoqXG4gICAqIEdpdmVzIENsb3VkV2F0Y2ggYWdlbnQgYWNjZXNzIHRvIEVCUyBwZXJmb3JtYW5jZSBzeXN0ZW1zIGJ5IGFkZGluZyBhbiBJQU0gcm9sZSBhcyBkZWZpbmVkIGhlcmU6XG4gICAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25DbG91ZFdhdGNoL2xhdGVzdC9tb25pdG9yaW5nL2luc3RhbGwtQ2xvdWRXYXRjaC1PYnNlcnZhYmlsaXR5LUVLUy1hZGRvbi5odG1sI2luc3RhbGwtQ2xvdWRXYXRjaC1PYnNlcnZhYmlsaXR5LUVLUy1hZGRvbi1jb25maWd1cmF0aW9uXG4gICAqL1xuICBlYnNQZXJmb3JtYW5jZUxvZ3M/OiBib29sZWFuLFxuICAvKipcbiAgICogQ3VzdG9tIENsb3VkV2F0Y2ggQWdlbnQgY29uZmlndXJhdGlvbiwgc3BlY2lmaWNzIGNhbiBiZSBmb3VuZCBoZXJlOlxuICAgKiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQW1hem9uQ2xvdWRXYXRjaC9sYXRlc3QvbW9uaXRvcmluZy9pbnN0YWxsLUNsb3VkV2F0Y2gtT2JzZXJ2YWJpbGl0eS1FS1MtYWRkb24uaHRtbCNpbnN0YWxsLUNsb3VkV2F0Y2gtT2JzZXJ2YWJpbGl0eS1FS1MtYWRkb24tY29uZmlndXJhdGlvblxuICAgKi9cbiAgY3VzdG9tQ2xvdWRXYXRjaEFnZW50Q29uZmlnPzogVmFsdWVzLFxuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIENsb3VkV2F0Y2ggQWdlbnQgY29uZmlndXJhdGlvblxuICAgKi9cbiAgdmVyc2lvbj86IHN0cmluZyxcbn07XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgYWRkT25OYW1lOiBcImFtYXpvbi1jbG91ZHdhdGNoLW9ic2VydmFiaWxpdHlcIixcbiAgdmVyc2lvbjogXCJhdXRvXCIsXG4gIHZlcnNpb25NYXA6IHZlcnNpb25NYXAsXG4gIHNhTmFtZTogXCJjbG91ZHdhdGNoLWFnZW50XCIsXG4gIG5hbWVzcGFjZTogXCJhbWF6b24tY2xvdWR3YXRjaFwiXG59O1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIEFXUyBDbG91ZFdhdGNoIEluc2lnaHRzIEFkZG9uXG4gKi9cbkBzdXBwb3J0c0FMTFxuZXhwb3J0IGNsYXNzIENsb3VkV2F0Y2hJbnNpZ2h0cyBleHRlbmRzIENvcmVBZGRPbiB7XG5cbiAgcmVhZG9ubHkgb3B0aW9uczogQ2xvdWRXYXRjaEluc2lnaHRzQWRkT25Qcm9wcztcblxuICBjb25zdHJ1Y3Rvcihwcm9wcz86IENsb3VkV2F0Y2hJbnNpZ2h0c0FkZE9uUHJvcHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBhZGRPbk5hbWU6IGRlZmF1bHRQcm9wcy5hZGRPbk5hbWUsXG4gICAgICB2ZXJzaW9uOiBwcm9wcz8udmVyc2lvbiA/PyBkZWZhdWx0UHJvcHMudmVyc2lvbixcbiAgICAgIHZlcnNpb25NYXA6IGRlZmF1bHRQcm9wcy52ZXJzaW9uTWFwLFxuICAgICAgc2FOYW1lOiBkZWZhdWx0UHJvcHMuc2FOYW1lLFxuICAgICAgbmFtZXNwYWNlOiBkZWZhdWx0UHJvcHMubmFtZXNwYWNlLFxuICAgICAgY29uZmlndXJhdGlvblZhbHVlczogcHJvcHM/LmN1c3RvbUNsb3VkV2F0Y2hBZ2VudENvbmZpZyA/PyB7fSxcbiAgICAgIGNvbnRyb2xQbGFuZUFkZE9uOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zID0gcHJvcHMgPz8ge307XG4gIH1cblxuICBAY29uZmxpY3RzV2l0aChcIkFkb3RDb2xsZWN0b3JBZGRvblwiLCBcIkNsb3VkV2F0Y2hBZG90QWRkb25cIiwgXCJDbG91ZFdhdGNoTG9nc0FkZG9uXCIpXG4gIGRlcGxveShjbHVzdGVySW5mbzogQ2x1c3RlckluZm8pOiBQcm9taXNlPENvbnN0cnVjdD4ge1xuICAgIHJldHVybiBzdXBlci5kZXBsb3koY2x1c3RlckluZm8pO1xuICB9XG5cbiAgY3JlYXRlTmFtZXNwYWNlKGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbywgbmFtZXNwYWNlTmFtZTogc3RyaW5nKTogSUNvbnN0cnVjdCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIG1ha2VOYW1lc3BhY2UobmFtZXNwYWNlTmFtZSwgY2x1c3RlckluZm8uY2x1c3Rlcik7XG4gIH1cblxuICBwcm92aWRlTWFuYWdlZFBvbGljaWVzKGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IElNYW5hZ2VkUG9saWN5W10gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHJlcXVpcmVkUG9saWNpZXMgPSBbXG4gICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShcIkNsb3VkV2F0Y2hBZ2VudFNlcnZlclBvbGljeVwiKSxcbiAgICAgIE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwiQVdTWHJheVdyaXRlT25seUFjY2Vzc1wiKVxuICAgIF07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmVic1BlcmZvcm1hbmNlTG9ncyAhPSB1bmRlZmluZWQgJiYgdGhpcy5vcHRpb25zLmVic1BlcmZvcm1hbmNlTG9ncykge1xuICAgICAgY29uc3QgZWJzUG9saWN5ID0gbmV3IE1hbmFnZWRQb2xpY3koY2x1c3RlckluZm8uY2x1c3RlciwgJ2Nsb3Vkd2F0Y2gtYWdlbnQtbWFuZ2FlZC1wb2xpY3knLCB7XG4gICAgICAgIGRvY3VtZW50OiBlYnNDb2xsZWN0b3JQb2xpY3koKVxuICAgICAgfSk7XG4gICAgICByZXF1aXJlZFBvbGljaWVzLnB1c2goZWJzUG9saWN5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWlyZWRQb2xpY2llcztcbiAgfVxufVxuIl19