"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreAddOn = exports.CoreAddOnProps = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const utils_1 = require("../../utils");
const sdk = require("@aws-sdk/client-eks");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class CoreAddOnProps {
}
exports.CoreAddOnProps = CoreAddOnProps;
const DEFAULT_NAMESPACE = "kube-system";
/**
 * Implementation of EKS Managed add-ons.
 */
class CoreAddOn {
    constructor(coreAddOnProps) {
        this.coreAddOnProps = coreAddOnProps;
        utils_1.userLog.debug(`Core add-on ${coreAddOnProps.addOnName} is at version ${coreAddOnProps.version}`);
    }
    async deploy(clusterInfo) {
        var _a;
        let serviceAccountRoleArn = undefined;
        let serviceAccount = undefined;
        let saNamespace = undefined;
        saNamespace = DEFAULT_NAMESPACE;
        if ((_a = this.coreAddOnProps) === null || _a === void 0 ? void 0 : _a.namespace) {
            saNamespace = this.coreAddOnProps.namespace;
        }
        const ns = this.createNamespace(clusterInfo, saNamespace);
        // Create a service account if user provides namespace, PolicyDocument
        const policies = this.provideManagedPolicies(clusterInfo);
        if (policies) {
            serviceAccount = this.createServiceAccount(clusterInfo, saNamespace, policies);
            serviceAccountRoleArn = serviceAccount.role.roleArn;
            if (ns) {
                serviceAccount.node.addDependency(ns);
            }
        }
        let version = this.coreAddOnProps.version;
        if (this.coreAddOnProps.version === "auto") {
            version = await this.provideVersion(clusterInfo.version, clusterInfo.cluster.stack.region);
        }
        let addOnProps = {
            addonName: this.coreAddOnProps.addOnName,
            addonVersion: version,
            configurationValues: JSON.stringify(this.coreAddOnProps.configurationValues),
            clusterName: clusterInfo.cluster.clusterName,
            serviceAccountRoleArn: serviceAccountRoleArn,
            resolveConflicts: "OVERWRITE"
        };
        const cfnAddon = new aws_eks_1.CfnAddon(clusterInfo.cluster.stack, this.coreAddOnProps.addOnName + "-addOn", addOnProps);
        if (serviceAccount) {
            cfnAddon.node.addDependency(serviceAccount);
        }
        else if (ns) {
            cfnAddon.node.addDependency(ns);
        }
        if (this.coreAddOnProps.controlPlaneAddOn) {
            (0, utils_1.deployBeforeCapacity)(cfnAddon, clusterInfo);
        }
        /**
         *  Retain the addon otherwise cluster destroy will fail due to CoreDnsComputeTypePatch
         *  https://github.com/aws/aws-cdk/issues/28621
         * */
        if (clusterInfo.cluster instanceof aws_eks_1.FargateCluster && this.coreAddOnProps.addOnName === "coredns") {
            cfnAddon.applyRemovalPolicy(aws_cdk_lib_1.RemovalPolicy.RETAIN_ON_UPDATE_OR_DELETE);
        }
        // Instantiate the Add-on
        return Promise.resolve(cfnAddon);
    }
    /**
     * Override this method to create namespace for the core addon. In many cases the addon is created in the kube-system namespace
     * which does not require creation as it is always there.
     * For addons that support other namespace as destinations this method should be implemented.
     * @param clusterInfo
     * @param name
     * @returns
     */
    createNamespace(_clusterInfo, _namespaceName) {
        return undefined;
    }
    /**
     * Override this method to control how service account is created.
     * @param clusterInfo
     * @param saNamespace
     * @param policies
     * @returns
     */
    createServiceAccount(clusterInfo, saNamespace, policies) {
        return (0, utils_1.createServiceAccountWithPolicy)(clusterInfo.cluster, this.coreAddOnProps.saName, saNamespace, ...policies);
    }
    /**
     * Template method with default implementation to execute the supplied function of policyDocumentProvider.
     * Allows overriding this method in subclasses for more complex cases of policies.
     * @param clusterInfo
     * @returns
     */
    providePolicyDocument(clusterInfo) {
        var _a;
        if ((_a = this.coreAddOnProps) === null || _a === void 0 ? void 0 : _a.policyDocumentProvider) {
            return this.coreAddOnProps.policyDocumentProvider(clusterInfo.cluster.stack.partition);
        }
        return undefined;
    }
    /**
     * Template method to return managed policies for the service account.
     * Allows overriding in subclasses to handle more complex cases of policies.
     */
    provideManagedPolicies(clusterInfo) {
        let result;
        const policyDocument = this.providePolicyDocument(clusterInfo);
        if (policyDocument) {
            const policy = new aws_iam_1.ManagedPolicy(clusterInfo.cluster, `${this.coreAddOnProps.addOnName}-managed-policy`, {
                document: policyDocument
            });
            result = [policy];
        }
        return result;
    }
    async provideVersion(clusterVersion, region) {
        var _a, _b;
        const client = new sdk.EKSClient({ region });
        const command = new sdk.DescribeAddonVersionsCommand({
            addonName: this.coreAddOnProps.addOnName,
            kubernetesVersion: clusterVersion.version
        });
        try {
            const response = await client.send(command);
            if (response.addons && response.addons.length > 0) {
                const defaultVersions = (_a = response.addons) === null || _a === void 0 ? void 0 : _a.flatMap(addon => {
                    var _a;
                    return (_a = addon.addonVersions) === null || _a === void 0 ? void 0 : _a.filter(version => { var _a; return (_a = version.compatibilities) === null || _a === void 0 ? void 0 : _a.some(compatibility => compatibility.defaultVersion === true); });
                });
                const version = (_b = defaultVersions[0]) === null || _b === void 0 ? void 0 : _b.addonVersion;
                if (!version) {
                    throw new Error(`No default version found for addo-on ${this.coreAddOnProps.addOnName}`);
                }
                utils_1.userLog.debug(`Core add-on ${this.coreAddOnProps.addOnName} has autoselected version ${version}`);
                return version;
            }
            else {
                throw new Error(`No add-on versions found for addon-on ${this.coreAddOnProps.addOnName}`);
            }
        }
        catch (error) {
            utils_1.logger.warn(error);
            utils_1.logger.warn(error);
            utils_1.logger.warn(`Failed to retrieve add-on versions from EKS for add-on ${this.coreAddOnProps.addOnName}.`);
            utils_1.logger.warn("Possible reasons for failures - Unauthorized or Authentication failure or Network failure on the terminal.");
            utils_1.logger.warn(" Falling back to default version.");
            let version = this.provideDefaultAutoVersion(clusterVersion);
            utils_1.userLog.debug(`Core add-on ${this.coreAddOnProps.addOnName} has autoselected version ${version}`);
            return version;
        }
    }
    provideDefaultAutoVersion(version) {
        var _a;
        const versionMap = this.coreAddOnProps.versionMap;
        if (versionMap && versionMap.size > 0) {
            return (_a = versionMap.get(version)) !== null && _a !== void 0 ? _a : versionMap.values().next().value;
        }
        throw new Error(`No default version found for add-on ${this.coreAddOnProps.addOnName}`);
    }
}
exports.CoreAddOn = CoreAddOn;
//# sourceMappingURL=data:application/json;base64,