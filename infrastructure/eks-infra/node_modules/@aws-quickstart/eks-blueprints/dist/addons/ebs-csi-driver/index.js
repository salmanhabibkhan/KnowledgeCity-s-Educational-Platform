"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EbsCsiDriverAddOn = void 0;
const core_addon_1 = require("../core-addon");
const iam_policy_1 = require("./iam-policy");
const utils = require("../../utils");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_eks_2 = require("aws-cdk-lib/aws-eks");
/* VersioMap showing the default version for 4 supported Kubernetes versions */
const versionMap = new Map([
    [aws_eks_1.KubernetesVersion.V1_31, "v1.42.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_30, "v1.36.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_29, "v1.36.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_28, "v1.36.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_27, "v1.36.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_26, "v1.36.0-eksbuild.1"],
]);
/**
 * Default values for the add-on
 */
const defaultProps = {
    addOnName: "aws-ebs-csi-driver",
    version: "auto",
    versionMap: versionMap,
    saName: "ebs-csi-controller-sa",
    storageClass: "gp3", // Set the default StorageClass to gp3
};
/**
 * Implementation of EBS CSI Driver EKS add-on
 */
let EbsCsiDriverAddOn = class EbsCsiDriverAddOn extends core_addon_1.CoreAddOn {
    constructor(options) {
        var _a;
        super({
            addOnName: defaultProps.addOnName,
            version: (_a = options === null || options === void 0 ? void 0 : options.version) !== null && _a !== void 0 ? _a : defaultProps.version,
            versionMap: defaultProps.versionMap,
            saName: defaultProps.saName,
            configurationValues: options === null || options === void 0 ? void 0 : options.configurationValues,
        });
        this.options = options;
        this.ebsProps = {
            ...defaultProps,
            ...options,
        };
    }
    providePolicyDocument(clusterInfo) {
        var _a;
        return (0, iam_policy_1.getEbsDriverPolicyDocument)(clusterInfo.cluster.stack.partition, (_a = this.options) === null || _a === void 0 ? void 0 : _a.kmsKeys);
    }
    async deploy(clusterInfo) {
        const baseDeployment = await super.deploy(clusterInfo);
        const cluster = clusterInfo.cluster;
        let updateSc;
        if (this.ebsProps.storageClass) {
            // patch resource on cluster
            const patchSc = new aws_eks_2.KubernetesPatch(cluster.stack, `${cluster}-RemoveGP2SC`, {
                cluster: cluster,
                resourceName: "storageclass/gp2",
                applyPatch: {
                    metadata: {
                        annotations: {
                            "storageclass.kubernetes.io/is-default-class": "false",
                        },
                    },
                },
                restorePatch: {
                    metadata: {
                        annotations: {
                            "storageclass.kubernetes.io/is-default-class": "true",
                        },
                    },
                },
            });
            // Create and set gp3 StorageClass as cluster-wide default
            updateSc = new aws_eks_2.KubernetesManifest(cluster.stack, `${cluster}-SetDefaultSC`, {
                cluster: cluster,
                manifest: [
                    {
                        apiVersion: "storage.k8s.io/v1",
                        kind: "StorageClass",
                        metadata: {
                            name: "gp3",
                            annotations: {
                                "storageclass.kubernetes.io/is-default-class": "true",
                            },
                        },
                        provisioner: "ebs.csi.aws.com",
                        reclaimPolicy: "Delete",
                        volumeBindingMode: "WaitForFirstConsumer",
                        parameters: {
                            type: "gp3",
                            fsType: "ext4",
                            encrypted: "true",
                        },
                    },
                ],
            });
            patchSc.node.addDependency(baseDeployment);
            updateSc.node.addDependency(patchSc);
            return updateSc;
        }
        else {
            return baseDeployment;
        }
    }
};
exports.EbsCsiDriverAddOn = EbsCsiDriverAddOn;
__decorate([
    utils.conflictsWithAutoMode("v1.37.0-eksbuild.1")
], EbsCsiDriverAddOn.prototype, "deploy", null);
exports.EbsCsiDriverAddOn = EbsCsiDriverAddOn = __decorate([
    utils.supportsALL
], EbsCsiDriverAddOn);
//# sourceMappingURL=data:application/json;base64,