"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluxCDAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const gitrepository_1 = require("./gitrepository");
const kustomization_1 = require("./kustomization");
const bucket_1 = require("./bucket");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Default props to be used when creating the Helm chart.
 * Find the latest version using the GitHub CLI command:
 * `$ gh release  list --repo fluxcd-community/helm-charts`
 * or from the packages page:
 * @link https://github.com/fluxcd-community/helm-charts/pkgs/container/charts%2Fflux2
 */
const defaultProps = {
    name: "fluxcd-addon",
    namespace: "flux-system",
    chart: "flux2",
    version: "2.13.0",
    release: "blueprints-fluxcd-addon",
    repository: "oci://ghcr.io/fluxcd-community/charts/flux2",
    values: {},
    createNamespace: true,
};
const defaultRepoProps = {
    syncInterval: "5m0s",
};
const defaultBucketProps = {
    syncInterval: "5m0s",
    endpoint: "s3.amazonaws.com",
    provider: "aws",
};
const defaultKustomizationProps = {
    kustomizationPath: ".",
    syncInterval: "5m0s",
    prune: true,
    timeout: "1m",
};
/**
 * Main class to instantiate the Helm chart
 */
let FluxCDAddOn = class FluxCDAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b;
        const cluster = clusterInfo.cluster;
        let values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        values = (0, ts_deepmerge_1.merge)(values, (_b = this.props.values) !== null && _b !== void 0 ? _b : {});
        const chart = this.addHelmChart(clusterInfo, values, false, true, aws_cdk_lib_1.Duration.minutes(15));
        if (this.options.createNamespace == true) {
            // Let CDK Create the Namespace
            const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
            chart.node.addDependency(namespace);
        }
        //Create GitRepository sources and Kustomizations
        if (this.options.repositories) {
            this.options.repositories.map((repo) => {
                repo = { ...defaultRepoProps, ...repo };
                const gitRepositoryConstruct = createGitRepository(clusterInfo, this.options.name, this.options.namespace, repo);
                gitRepositoryConstruct.node.addDependency(chart);
                const kustomizationConstructs = createKustomizations(clusterInfo, this.options.name, this.options.namespace, repo);
                kustomizationConstructs.map(kustomizationConstruct => kustomizationConstruct.node.addDependency(gitRepositoryConstruct));
            });
        }
        // Create Bucket sources and Kustomizations
        if (this.options.buckets) {
            this.options.buckets.map((bucket) => {
                bucket = { ...defaultBucketProps, ...bucket };
                const bucketConstruct = createBucket(clusterInfo, this.options.name, this.options.namespace, bucket);
                bucketConstruct.node.addDependency(chart);
                const kustomizationConstructs = createKustomizations(clusterInfo, this.options.name, this.options.namespace, bucket, "Bucket");
                kustomizationConstructs.map(kustomizationConstruct => kustomizationConstruct.node.addDependency(bucketConstruct));
            });
        }
        return Promise.resolve(chart);
    }
};
exports.FluxCDAddOn = FluxCDAddOn;
exports.FluxCDAddOn = FluxCDAddOn = __decorate([
    utils_1.supportsALL
], FluxCDAddOn);
/**
 * create GitRepository calls the FluxGitRepository().generate to create GitRepostory resource.
 */
function createGitRepository(clusterInfo, name, namespace, fluxGitRepo) {
    var _a;
    if (fluxGitRepo.repository === undefined) {
        throw new Error("Missing Git repository");
    }
    const manifest = new gitrepository_1.FluxGitRepository(fluxGitRepo.repository).generate(fluxGitRepo.name, (_a = fluxGitRepo.namespace) !== null && _a !== void 0 ? _a : namespace, fluxGitRepo.syncInterval, fluxGitRepo.secretRefName);
    let manifestName = name + 'gitrepository' + fluxGitRepo.name;
    const construct = clusterInfo.cluster.addManifest(manifestName, manifest);
    return construct;
}
/**
 * create Bucket calls the FluxBucket().generate to create Bucket resource.
 */
function createBucket(clusterInfo, name, namespace, props) {
    var _a;
    const manifest = new bucket_1.FluxBucket(props.bucketName, props.bucketRegion, props.prefixPath).generate(props.name, (_a = props.namespace) !== null && _a !== void 0 ? _a : namespace, props.syncInterval, props.provider, props.endpoint, props.secretRefName);
    let manifestName = name + 'bucketrepository' + props.name;
    return clusterInfo.cluster.addManifest(manifestName, manifest);
}
/**
 * create Kustomizations calls the FluxKustomization().generate multiple times to create Kustomization resources.
 */
function createKustomizations(clusterInfo, name, namespace, fluxSource, fluxSourceKind) {
    var _a;
    const constructs = [];
    const kustomizations = (_a = fluxSource.kustomizations) !== null && _a !== void 0 ? _a : [{ kustomizationPath: "." }];
    const fluxKustomization = new kustomization_1.FluxKustomization();
    kustomizations === null || kustomizations === void 0 ? void 0 : kustomizations.map((kustomization, index) => {
        var _a;
        kustomization = { ...defaultKustomizationProps, ...kustomization };
        const manifest = fluxKustomization.generate(fluxSource.name + "-" + index, fluxSource.name, (_a = fluxSource.namespace) !== null && _a !== void 0 ? _a : namespace, kustomization.syncInterval, kustomization.prune, kustomization.timeout, fluxSource.values || {}, kustomization.kustomizationPath, kustomization.kustomizationTargetNamespace, fluxSourceKind);
        let manifestName = name + 'kustomization' + fluxSource.name + index;
        constructs.push(clusterInfo.cluster.addManifest(manifestName, manifest));
    });
    return constructs;
}
//# sourceMappingURL=data:application/json;base64,