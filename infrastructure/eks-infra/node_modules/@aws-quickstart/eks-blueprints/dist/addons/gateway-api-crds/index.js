"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatewayApiCrdsAddOn = exports.GatewayApiCrdsBuilder = exports.GatewayApiCrdsStack = exports.GatewayCrdChannels = void 0;
// gateway-api-crds-stack.ts
const aws_cdk_lib_1 = require("aws-cdk-lib");
const utils_1 = require("../../utils");
const nested_stack_1 = require("../nested-stack");
exports.GatewayCrdChannels = {
    STANDARD: 'https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/standard-install.yaml',
    EXPERIMENTAL: 'https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/experimental-install.yaml',
};
const defaultProps = {
    gatewayApiCrdsUrl: exports.GatewayCrdChannels.STANDARD
};
class GatewayApiCrdsStack extends aws_cdk_lib_1.NestedStack {
    constructor(scope, id, props) {
        var _a;
        super(scope, id, props);
        this.manifestIds = [];
        if (!(props === null || props === void 0 ? void 0 : props.cluster)) {
            throw new Error("GatewayApiCrdsStack: 'cluster' must be provided in props.");
        }
        const cluster = props.cluster;
        const url = (_a = props === null || props === void 0 ? void 0 : props.gatewayApiCrdsUrl) !== null && _a !== void 0 ? _a : defaultProps.gatewayApiCrdsUrl;
        try {
            const yamlDocuments = (0, utils_1.loadExternalYaml)(url)
                .filter((manifest) => manifest && manifest.metadata && manifest.metadata.name);
            yamlDocuments.forEach((manifest) => {
                const manifestName = `sig-gateway-api-${manifest.metadata.name}`;
                return cluster.addManifest(manifestName, manifest);
            });
        }
        catch (error) {
            console.error('Error reading or parsing YAML file:', error);
            throw error;
        }
    }
}
exports.GatewayApiCrdsStack = GatewayApiCrdsStack;
class GatewayApiCrdsBuilder {
    constructor(props) {
        this.props = props;
        this.options = this.props;
    }
    build(scope, id, nestedStackProps) {
        return new GatewayApiCrdsStack(scope, id, {
            ...this.props,
            ...nestedStackProps
        });
    }
}
exports.GatewayApiCrdsBuilder = GatewayApiCrdsBuilder;
class GatewayApiCrdsAddOn extends nested_stack_1.NestedStackAddOn {
    constructor(props) {
        super({
            id: 'GatewayApiCrdsAddOn',
            builder: new GatewayApiCrdsBuilder(),
            nestedStackProps: props
        });
        this.options = props;
    }
    // Override the deploy method to inject cluster into props
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster; // Access cluster from clusterInfo
        if (!cluster) {
            throw new Error("Cluster is required for deployment.");
        }
        const updatedProps = {
            ...this.options,
            cluster,
        };
        // Get the builder for creating the stack
        const builder = new GatewayApiCrdsBuilder(updatedProps);
        const stack = cluster.stack;
        return Promise.resolve(builder.build(stack, 'gateway-api-crds-stack', updatedProps));
    }
}
exports.GatewayApiCrdsAddOn = GatewayApiCrdsAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2dhdGV3YXktYXBpLWNyZHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNEJBQTRCO0FBQzVCLDZDQUE0RDtBQUc1RCx1Q0FBK0M7QUFFL0Msa0RBQTBFO0FBRTdELFFBQUEsa0JBQWtCLEdBQUc7SUFDOUIsUUFBUSxFQUFFLCtGQUErRjtJQUN6RyxZQUFZLEVBQUUsbUdBQW1HO0NBQ3BILENBQUM7QUFPRixNQUFNLFlBQVksR0FBNkI7SUFDM0MsaUJBQWlCLEVBQUUsMEJBQWtCLENBQUMsUUFBUTtDQUNqRCxDQUFDO0FBRUYsTUFBYSxtQkFBb0IsU0FBUSx5QkFBVztJQUdoRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWdDOztRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUhaLGdCQUFXLEdBQWEsRUFBRSxDQUFDO1FBS3ZDLElBQUksQ0FBQyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQztRQUNqRixDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxNQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxpQkFBaUIsbUNBQUksWUFBWSxDQUFDLGlCQUFpQixDQUFDO1FBRXZFLElBQUksQ0FBQztZQUNELE1BQU0sYUFBYSxHQUFHLElBQUEsd0JBQWdCLEVBQUMsR0FBSSxDQUFDO2lCQUN2QyxNQUFNLENBQUMsQ0FBQyxRQUE2QixFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXhHLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUE2QixFQUFFLEVBQUU7Z0JBQ3BELE1BQU0sWUFBWSxHQUFHLG1CQUFtQixRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNqRSxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBRVAsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzVELE1BQU0sS0FBSyxDQUFDO1FBQ2hCLENBQUM7SUFDTCxDQUFDO0NBQ0o7QUEzQkQsa0RBMkJDO0FBRUQsTUFBYSxxQkFBcUI7SUFHOUIsWUFBNkIsS0FBZ0M7UUFBaEMsVUFBSyxHQUFMLEtBQUssQ0FBMkI7UUFDekQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBaUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQWdCLEVBQUUsRUFBVSxFQUFFLGdCQUFtQztRQUNuRSxPQUFPLElBQUksbUJBQW1CLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUN0QyxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IsR0FBRyxnQkFBZ0I7U0FDdEIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBYkQsc0RBYUM7QUFFRCxNQUFhLG1CQUFvQixTQUFRLCtCQUFnQjtJQUdyRCxZQUFZLEtBQWdDO1FBQ3hDLEtBQUssQ0FBQztZQUNGLEVBQUUsRUFBRSxxQkFBcUI7WUFDekIsT0FBTyxFQUFFLElBQUkscUJBQXFCLEVBQUU7WUFDcEMsZ0JBQWdCLEVBQUUsS0FBSztTQUNELENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRUQsMERBQTBEO0lBQ2pELE1BQU0sQ0FBQyxXQUF3QjtRQUNwQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsa0NBQWtDO1FBRXZFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBRUQsTUFBTSxZQUFZLEdBQTZCO1lBQzNDLEdBQUcsSUFBSSxDQUFDLE9BQU87WUFDZixPQUFPO1NBQ1YsQ0FBQztRQUVGLHlDQUF5QztRQUN6QyxNQUFNLE9BQU8sR0FBRyxJQUFJLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFNUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLHdCQUF3QixFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDekYsQ0FBQztDQUNKO0FBL0JELGtEQStCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGdhdGV3YXktYXBpLWNyZHMtc3RhY2sudHNcbmltcG9ydCB7IE5lc3RlZFN0YWNrLCBOZXN0ZWRTdGFja1Byb3BzIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBJQ2x1c3RlciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1la3MnO1xuaW1wb3J0IHsgbG9hZEV4dGVybmFsWWFtbCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IENsdXN0ZXJJbmZvLCBOZXN0ZWRTdGFja0J1aWxkZXIgfSBmcm9tICcuLi8uLi9zcGknO1xuaW1wb3J0IHsgTmVzdGVkU3RhY2tBZGRPbiwgTmVzdGVkU3RhY2tBZGRPblByb3BzIH0gZnJvbSAnLi4vbmVzdGVkLXN0YWNrJztcblxuZXhwb3J0IGNvbnN0IEdhdGV3YXlDcmRDaGFubmVscyA9IHtcbiAgICBTVEFOREFSRDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzLXNpZ3MvZ2F0ZXdheS1hcGkvcmVsZWFzZXMvZG93bmxvYWQvdjEuMi4wL3N0YW5kYXJkLWluc3RhbGwueWFtbCcsXG4gICAgRVhQRVJJTUVOVEFMOiAnaHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtc2lncy9nYXRld2F5LWFwaS9yZWxlYXNlcy9kb3dubG9hZC92MS4yLjAvZXhwZXJpbWVudGFsLWluc3RhbGwueWFtbCcsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdhdGV3YXlBcGlDcmRzQWRkT25Qcm9wcyBleHRlbmRzIE5lc3RlZFN0YWNrUHJvcHMge1xuICAgIGdhdGV3YXlBcGlDcmRzVXJsPzogc3RyaW5nO1xuICAgIGNsdXN0ZXI/OiBJQ2x1c3Rlcjtcbn1cblxuY29uc3QgZGVmYXVsdFByb3BzOiBHYXRld2F5QXBpQ3Jkc0FkZE9uUHJvcHMgPSB7XG4gICAgZ2F0ZXdheUFwaUNyZHNVcmw6IEdhdGV3YXlDcmRDaGFubmVscy5TVEFOREFSRFxufTtcblxuZXhwb3J0IGNsYXNzIEdhdGV3YXlBcGlDcmRzU3RhY2sgZXh0ZW5kcyBOZXN0ZWRTdGFjayB7XG4gICAgcHVibGljIHJlYWRvbmx5IG1hbmlmZXN0SWRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBHYXRld2F5QXBpQ3Jkc0FkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKCFwcm9wcz8uY2x1c3Rlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2F0ZXdheUFwaUNyZHNTdGFjazogJ2NsdXN0ZXInIG11c3QgYmUgcHJvdmlkZWQgaW4gcHJvcHMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2x1c3RlciA9IHByb3BzLmNsdXN0ZXI7XG4gICAgICAgIGNvbnN0IHVybCA9IHByb3BzPy5nYXRld2F5QXBpQ3Jkc1VybCA/PyBkZWZhdWx0UHJvcHMuZ2F0ZXdheUFwaUNyZHNVcmw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHlhbWxEb2N1bWVudHMgPSBsb2FkRXh0ZXJuYWxZYW1sKHVybCEpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigobWFuaWZlc3Q6IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IG1hbmlmZXN0ICYmIG1hbmlmZXN0Lm1ldGFkYXRhICYmIG1hbmlmZXN0Lm1ldGFkYXRhLm5hbWUpO1xuXG4gICAgICAgICAgICB5YW1sRG9jdW1lbnRzLmZvckVhY2goKG1hbmlmZXN0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFuaWZlc3ROYW1lID0gYHNpZy1nYXRld2F5LWFwaS0ke21hbmlmZXN0Lm1ldGFkYXRhLm5hbWV9YDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2x1c3Rlci5hZGRNYW5pZmVzdChtYW5pZmVzdE5hbWUsIG1hbmlmZXN0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZWFkaW5nIG9yIHBhcnNpbmcgWUFNTCBmaWxlOicsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2F0ZXdheUFwaUNyZHNCdWlsZGVyIGltcGxlbWVudHMgTmVzdGVkU3RhY2tCdWlsZGVyIHtcbiAgICByZWFkb25seSBvcHRpb25zOiBHYXRld2F5QXBpQ3Jkc0FkZE9uUHJvcHM7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByb3BzPzogR2F0ZXdheUFwaUNyZHNBZGRPblByb3BzKSB7IFxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnByb3BzIGFzIEdhdGV3YXlBcGlDcmRzQWRkT25Qcm9wcztcbiAgICB9XG5cbiAgICBidWlsZChzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBuZXN0ZWRTdGFja1Byb3BzPzogTmVzdGVkU3RhY2tQcm9wcyk6IE5lc3RlZFN0YWNrIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHYXRld2F5QXBpQ3Jkc1N0YWNrKHNjb3BlLCBpZCwge1xuICAgICAgICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgICAgICAgIC4uLm5lc3RlZFN0YWNrUHJvcHNcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2F0ZXdheUFwaUNyZHNBZGRPbiBleHRlbmRzIE5lc3RlZFN0YWNrQWRkT24ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9ucz86IEdhdGV3YXlBcGlDcmRzQWRkT25Qcm9wcztcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogR2F0ZXdheUFwaUNyZHNBZGRPblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGlkOiAnR2F0ZXdheUFwaUNyZHNBZGRPbicsXG4gICAgICAgICAgICBidWlsZGVyOiBuZXcgR2F0ZXdheUFwaUNyZHNCdWlsZGVyKCksXG4gICAgICAgICAgICBuZXN0ZWRTdGFja1Byb3BzOiBwcm9wc1xuICAgICAgICB9IGFzIE5lc3RlZFN0YWNrQWRkT25Qcm9wcyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHByb3BzO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIHRoZSBkZXBsb3kgbWV0aG9kIHRvIGluamVjdCBjbHVzdGVyIGludG8gcHJvcHNcbiAgICBvdmVycmlkZSBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogdm9pZCB8IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBjbHVzdGVySW5mby5jbHVzdGVyOyAvLyBBY2Nlc3MgY2x1c3RlciBmcm9tIGNsdXN0ZXJJbmZvXG5cbiAgICAgICAgaWYgKCFjbHVzdGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDbHVzdGVyIGlzIHJlcXVpcmVkIGZvciBkZXBsb3ltZW50LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9wczogR2F0ZXdheUFwaUNyZHNBZGRPblByb3BzID0ge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLCBcbiAgICAgICAgICAgIGNsdXN0ZXIsICAgICAgICAgICAgIFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEdldCB0aGUgYnVpbGRlciBmb3IgY3JlYXRpbmcgdGhlIHN0YWNrXG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgR2F0ZXdheUFwaUNyZHNCdWlsZGVyKHVwZGF0ZWRQcm9wcyk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gY2x1c3Rlci5zdGFjaztcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGJ1aWxkZXIuYnVpbGQoc3RhY2ssICdnYXRld2F5LWFwaS1jcmRzLXN0YWNrJywgdXBkYXRlZFByb3BzKSk7XG4gICAgfVxufSJdfQ==