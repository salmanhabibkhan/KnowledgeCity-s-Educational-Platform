"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IngressNginxAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const dot = require("dot-object");
const utils_1 = require("../../utils");
const object_utils_1 = require("../../utils/object-utils");
const helm_addon_1 = require("../helm-addon");
const __1 = require("..");
// Set default properties for the add-on
const defaultProps = {
    name: "kubernetes-ingress",
    chart: "ingress-nginx",
    release: "k8s-ingress",
    version: "4.12.1",
    repository: "https://kubernetes.github.io/ingress-nginx",
    backendProtocol: 'http',
    crossZoneEnabled: true,
    internetFacing: true,
    targetType: 'ip',
    namespace: 'kube-system',
    sslPort: 'https',
    httpTargetPort: 'http',
    httpsTargetPort: 'https',
    forceSSLRedirect: true,
    loadBalancerType: 'external',
    serviceType: "LoadBalancer",
    idleTimeout: '3600'
};
// Define the class for the Kubernetes Ingress Add-On, extending HelmAddOn
let IngressNginxAddOn = class IngressNginxAddOn extends helm_addon_1.HelmAddOn {
    // Constructor for the class, merging default props with user-defined props
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = { ...defaultProps, ...props };
    }
    // Dependency decorator to ensure this add-on is deployed after the AWS Load Balancer Controller
    async deploy(clusterInfo) {
        var _a, _b;
        const props = this.options;
        // Setup service annotations based on the properties provided
        const loadBalancerAnnotations = {
            'service.beta.kubernetes.io/aws-load-balancer-backend-protocol': props.backendProtocol,
            'service.beta.kubernetes.io/aws-load-balancer-attributes': `load_balancing.cross_zone.enabled=${props.crossZoneEnabled}`,
            'service.beta.kubernetes.io/aws-load-balancer-scheme': props.internetFacing ? 'internet-facing' : 'internal',
            'service.beta.kubernetes.io/aws-load-balancer-type': props.loadBalancerType,
            'service.beta.kubernetes.io/aws-load-balancer-nlb-target-type': props.targetType,
            'external-dns.alpha.kubernetes.io/hostname': props.externalDnsHostname,
            'service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout': '3600'
        };
        // Define values for Helm chart based on properties and annotations
        const values = {
            controller: {
                service: {
                    annotations: props.serviceType == 'LoadBalancer' ? loadBalancerAnnotations : {}
                },
                ingressClassResource: {
                    name: props.ingressClassName || "ingress-nginx",
                    enabled: true,
                    default: (_a = props.isDefaultClass) !== null && _a !== void 0 ? _a : false,
                    controllerValue: props.controllerClass || "k8s.io/ingress-nginx"
                },
                electionID: props.electionId || "ingress-controller-leader"
            }
        };
        // Combine logic for handling certificate annotations
        let certificateResourceARN = props.certificateResourceARN;
        if (!certificateResourceARN && props.certificateResourceName) {
            const certificate = clusterInfo.getResource(props.certificateResourceName);
            certificateResourceARN = certificate === null || certificate === void 0 ? void 0 : certificate.certificateArn;
        }
        if (certificateResourceARN) {
            loadBalancerAnnotations['service.beta.kubernetes.io/aws-load-balancer-ssl-ports'] = props.sslPort;
            loadBalancerAnnotations['service.beta.kubernetes.io/aws-load-balancer-ssl-cert'] = certificateResourceARN;
            if (props.forceSSLRedirect) {
                loadBalancerAnnotations['nginx.ingress.kubernetes.io/force-ssl-redirect'] = true;
            }
        }
        // Set HTTP and HTTPS target ports
        (0, object_utils_1.setPath)(values, "controller.service.targetPorts.http", props.httpTargetPort);
        const httpsTargetPort = dot.pick("controller.service.targetPorts.https", props.values) || props.httpsTargetPort;
        (0, object_utils_1.setPath)(values, "controller.service.targetPorts.https", httpsTargetPort);
        // Merge user-defined values with defaults for the Helm chart deployment
        const mergedValues = (0, ts_deepmerge_1.merge)(values, (_b = this.props.values) !== null && _b !== void 0 ? _b : {});
        const nginxHelmChart = this.addHelmChart(clusterInfo, mergedValues);
        return Promise.resolve(nginxHelmChart);
    }
};
exports.IngressNginxAddOn = IngressNginxAddOn;
__decorate([
    (0, utils_1.dependable)(__1.AwsLoadBalancerControllerAddOn.name)
], IngressNginxAddOn.prototype, "deploy", null);
exports.IngressNginxAddOn = IngressNginxAddOn = __decorate([
    utils_1.supportsALL
], IngressNginxAddOn);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2luZ3Jlc3MtbmdpbngvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0EsK0NBQXFDO0FBQ3JDLGtDQUFrQztBQUNsQyx1Q0FBc0Q7QUFDdEQsMkRBQW1EO0FBRW5ELDhDQUE4RTtBQUM5RSwwQkFBb0Q7QUF1SnBELHdDQUF3QztBQUN4QyxNQUFNLFlBQVksR0FBMkI7SUFDekMsSUFBSSxFQUFFLG9CQUFvQjtJQUMxQixLQUFLLEVBQUUsZUFBZTtJQUN0QixPQUFPLEVBQUUsYUFBYTtJQUN0QixPQUFPLEVBQUUsUUFBUTtJQUNqQixVQUFVLEVBQUUsNENBQTRDO0lBQ3hELGVBQWUsRUFBRSxNQUFNO0lBQ3ZCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsVUFBVSxFQUFFLElBQUk7SUFDaEIsU0FBUyxFQUFFLGFBQWE7SUFDeEIsT0FBTyxFQUFFLE9BQU87SUFDaEIsY0FBYyxFQUFFLE1BQU07SUFDdEIsZUFBZSxFQUFFLE9BQU87SUFDeEIsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixnQkFBZ0IsRUFBRSxVQUFVO0lBQzVCLFdBQVcsRUFBRSxjQUFjO0lBQzNCLFdBQVcsRUFBRSxNQUFNO0NBQ3RCLENBQUM7QUFFRiwwRUFBMEU7QUFFbkUsSUFBTSxpQkFBaUIsR0FBdkIsTUFBTSxpQkFBa0IsU0FBUSxzQkFBUztJQUc1QywyRUFBMkU7SUFDM0UsWUFBWSxLQUE4QjtRQUN0QyxLQUFLLENBQUMsRUFBRSxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBb0IsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBNEIsQ0FBQztJQUMzRSxDQUFDO0lBRUQsZ0dBQWdHO0lBRTFGLEFBQU4sS0FBSyxDQUFDLE1BQU0sQ0FBQyxX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Q0F5RC9DOzRCQW5FUSxpQkFBaUI7SUFEN0IsbUJBQVc7R0FDQyxpQkFBaUIsQ0FvRTdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IG5lY2Vzc2FyeSBBV1MgQ0RLIGFuZCB1dGlsaXR5IG1vZHVsZXNcbmltcG9ydCB7IElDZXJ0aWZpY2F0ZSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tIFwidHMtZGVlcG1lcmdlXCI7XG5pbXBvcnQgKiBhcyBkb3QgZnJvbSAnZG90LW9iamVjdCc7XG5pbXBvcnQgeyBkZXBlbmRhYmxlLCBzdXBwb3J0c0FMTCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgc2V0UGF0aCB9IGZyb20gXCIuLi8uLi91dGlscy9vYmplY3QtdXRpbHNcIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvLCBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblByb3BzLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xuaW1wb3J0IHsgQXdzTG9hZEJhbGFuY2VyQ29udHJvbGxlckFkZE9uIH0gZnJvbSBcIi4uXCI7XG5cbi8qKlxuICogUHJvcGVydGllcyBhdmFpbGFibGUgdG8gY29uZmlndXJlIHRoZSBuZ2lueCBpbmdyZXNzIGNvbnRyb2xsZXIuXG4gKiBWYWx1ZXMgdG8gcGFzcyB0byB0aGUgY2hhcnQgYXMgcGVyIGh0dHBzOi8va3ViZXJuZXRlcy5naXRodWIuaW8vaW5ncmVzcy1uZ2lueC91c2VyLWd1aWRlL25naW54LWNvbmZpZ3VyYXRpb24vYW5ub3RhdGlvbnMvXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5ncmVzc05naW54QWRkT25Qcm9wcyBleHRlbmRzIEhlbG1BZGRPblVzZXJQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIEt1YmVybmV0ZXMgSW5ncmVzcyBIZWxtIHJlbGVhc2UuXG4gICAgICovXG4gICAgbmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBjaGFydCB3aXRoaW4gdGhlIEhlbG0gcmVsZWFzZS5cbiAgICAgKi9cbiAgICBjaGFydD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgcmVsZWFzZS5cbiAgICAgKi9cbiAgICByZWxlYXNlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgY2hhcnQgdG8gYmUgZGVwbG95ZWQuXG4gICAgICovXG4gICAgdmVyc2lvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFVSTCBvZiB0aGUgY2hhcnQgcmVwb3NpdG9yeS5cbiAgICAgKi9cbiAgICByZXBvc2l0b3J5Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogS3ViZXJuZXRlcyBuYW1lc3BhY2Ugd2hlcmUgdGhlIGluZ3Jlc3MgY29udHJvbGxlciB3aWxsIGJlIGluc3RhbGxlZC5cbiAgICAgKiBAZGVmYXVsdCAna3ViZS1zeXN0ZW0nXG4gICAgICovXG4gICAgbmFtZXNwYWNlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHZhbHVlcyBwYXNzZWQgdG8gdGhlIEhlbG0gY2hhcnQuXG4gICAgICovXG4gICAgdmFsdWVzPzogVmFsdWVzO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBwcm90b2NvbCB1c2VkIGJ5IHRoZSBsb2FkIGJhbGFuY2VyLlxuICAgICAqIEhUVFAsIEhUVFBTLCBBVVRPX0hUVFAsIEdSUEMsIEdSUENTLCBhbmQgRkNHSSBhcmUgc3VwcG9ydGVkLlxuICAgICAqIEBkZWZhdWx0ICdodHRwJ1xuICAgICAqL1xuICAgIGJhY2tlbmRQcm90b2NvbD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciBjcm9zcy16b25lIGxvYWQgYmFsYW5jaW5nIGlzIGVuYWJsZWQgZm9yIHRoZSBsb2FkIGJhbGFuY2VyLlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBjcm9zc1pvbmVFbmFibGVkPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBsb2FkIGJhbGFuY2VyIGlzIGV4cG9zZWQgdG8gdGhlIGludGVybmV0LlxuICAgICAqIFNldCB0byBmYWxzZSBmb3IgYW4gaW50ZXJuYWwgbG9hZCBiYWxhbmNlci5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgaW50ZXJuZXRGYWNpbmc/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGhvdyB0cmFmZmljIGlzIHJvdXRlZCB0byBwb2RzLiBDYW4gYmUgZWl0aGVyICdpcCcgb3IgJ2luc3RhbmNlJy5cbiAgICAgKiAnaXAnIG1vZGUgaXMgbW9yZSBwZXJmb3JtYW50IGFuZCByZXF1aXJlcyBWUEMtQ05JLlxuICAgICAqIEBkZWZhdWx0ICdpcCdcbiAgICAgKi9cbiAgICB0YXJnZXRUeXBlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogSG9zdG5hbWUgdG8gYmUgdXNlZCB3aXRoIGV4dGVybmFsIEROUyBzZXJ2aWNlcyBmb3IgYXV0b21hdGljIEROUyBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIGV4dGVybmFsRG5zSG9zdG5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGNsYXNzIG9mIHRoZSBpbmdyZXNzIGNvbnRyb2xsZXIuIFVzZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIG11bHRpcGxlIGluZ3Jlc3MgY29udHJvbGxlcnMuXG4gICAgICogQGRlZmF1bHQgJ2luZ3Jlc3MtbmdpbngnXG4gICAgICovXG4gICAgaW5ncmVzc0NsYXNzTmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgY29udHJvbGxlciBjbGFzcyB1c2VkIGZvciBoYW5kbGluZyBpbmdyZXNzIGluIGEgY2x1c3Rlci5cbiAgICAgKi9cbiAgICBjb250cm9sbGVyQ2xhc3M/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBJZGVudGlmaWVyIHVzZWQgZm9yIGxlYWRlciBlbGVjdGlvbiBkdXJpbmcgdGhlIGRlcGxveW1lbnQgb2YgbXVsdGlwbGUgaW5ncmVzcyBjb250cm9sbGVycy5cbiAgICAgKi9cbiAgICBlbGVjdGlvbklkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgaW5ncmVzcyBjb250cm9sbGVyIHNob3VsZCBiZSBzZXQgYXMgdGhlIGRlZmF1bHQgY29udHJvbGxlciBmb3IgaGFuZGxpbmcgaW5ncmVzcyByZXNvdXJjZXMuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBpc0RlZmF1bHRDbGFzcz86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIHRoZSBjZXJ0aWZpY2F0ZSB7QGxpbmsgTmFtZWRSZXNvdXJjZVByb3ZpZGVyfSB0byBiZSB1c2VkIGZvciBjZXJ0aWZpY2F0ZSBsb29rIHVwLiBcbiAgICAgKiBAc2VlIHtAbGluayBJbXBvcnRDZXJ0aWZpY2F0ZVByb3ZpZGVyfSBhbmQge0BsaW5rIENyZWF0ZUNlcnRpZmljYXRlUHJvdmlkZXJ9IGZvciBleGFtcGxlcyBvZiBjZXJ0aWZpY2F0ZSBwcm92aWRlcnMuXG4gICAgICovXG4gICAgY2VydGlmaWNhdGVSZXNvdXJjZU5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBUk4gb2YgdGhlIEFXUyBDZXJ0aWZpY2F0ZSBNYW5hZ2VyIGNlcnRpZmljYXRlIHRvIGJlIHVzZWQgZm9yIEhUVFBTLlxuICAgICAqL1xuICAgIGNlcnRpZmljYXRlUmVzb3VyY2VBUk4/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQcm90b2NvbCBmb3IgdGhlIGxvYWQgYmFsYW5jZXIgU1NMIHBvcnQuXG4gICAgICogQGRlZmF1bHQgJ2h0dHBzJ1xuICAgICAqL1xuICAgIHNzbFBvcnQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQcm90b2NvbCBmb3IgdGhlIGxvYWQgYmFsYW5jZXIgSFRUUCB0YXJnZXQgcG9ydC5cbiAgICAgKiBAZGVmYXVsdCAnaHR0cCdcbiAgICAgKi9cbiAgICBodHRwVGFyZ2V0UG9ydD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFByb3RvY29sIGZvciB0aGUgbG9hZCBiYWxhbmNlciBIVFRQUyB0YXJnZXQgcG9ydC5cbiAgICAgKiBAZGVmYXVsdCAnaHR0cHMnXG4gICAgICovXG4gICAgaHR0cHNUYXJnZXRQb3J0Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBTU0wgcmVkaXJlY3Rpb24gc2hvdWxkIGJlIGZvcmNlZC5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZm9yY2VTU0xSZWRpcmVjdD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHRoZSBsb2FkIGJhbGFuY2VyLlxuICAgICAqIEBkZWZhdWx0ICdleHRlcm5hbCdcbiAgICAgKi9cbiAgICBsb2FkQmFsYW5jZXJUeXBlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQVJOIG9mIHRoZSBBV1MgQ2VydGlmaWNhdGUgTWFuYWdlciBjZXJ0aWZpY2F0ZSB0byBiZSB1c2VkIGZvciBIVFRQUy5cbiAgICAgKiBAZGVmYXVsdCBcIjM2MDBcIlxuICAgICAqL1xuICAgIGlkbGVUaW1lb3V0Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogS3ViZXJuZXRlcyBzZXJ2aWNlIHR5cGUgZm9yIHRoZSBpbmdyZXNzIGNvbnRyb2xsZXIuIFN1cHBvcnRlZCB2YWx1ZXMgYXJlICdDbHVzdGVySVAnLCAnTG9hZEJhbGFuY2VyJyBhbmQgJ05vZGVQb3J0Jy5cbiAgICAgKiBAZGVmYXVsdCAnTG9hZEJhbGFuY2VyJ1xuICAgICAqL1xuICAgIHNlcnZpY2VUeXBlPzogc3RyaW5nO1xufVxuXG4vLyBTZXQgZGVmYXVsdCBwcm9wZXJ0aWVzIGZvciB0aGUgYWRkLW9uXG5jb25zdCBkZWZhdWx0UHJvcHM6IEluZ3Jlc3NOZ2lueEFkZE9uUHJvcHMgPSB7XG4gICAgbmFtZTogXCJrdWJlcm5ldGVzLWluZ3Jlc3NcIixcbiAgICBjaGFydDogXCJpbmdyZXNzLW5naW54XCIsXG4gICAgcmVsZWFzZTogXCJrOHMtaW5ncmVzc1wiLFxuICAgIHZlcnNpb246IFwiNC4xMi4xXCIsXG4gICAgcmVwb3NpdG9yeTogXCJodHRwczovL2t1YmVybmV0ZXMuZ2l0aHViLmlvL2luZ3Jlc3MtbmdpbnhcIixcbiAgICBiYWNrZW5kUHJvdG9jb2w6ICdodHRwJyxcbiAgICBjcm9zc1pvbmVFbmFibGVkOiB0cnVlLFxuICAgIGludGVybmV0RmFjaW5nOiB0cnVlLFxuICAgIHRhcmdldFR5cGU6ICdpcCcsXG4gICAgbmFtZXNwYWNlOiAna3ViZS1zeXN0ZW0nLFxuICAgIHNzbFBvcnQ6ICdodHRwcycsXG4gICAgaHR0cFRhcmdldFBvcnQ6ICdodHRwJyxcbiAgICBodHRwc1RhcmdldFBvcnQ6ICdodHRwcycsXG4gICAgZm9yY2VTU0xSZWRpcmVjdDogdHJ1ZSxcbiAgICBsb2FkQmFsYW5jZXJUeXBlOiAnZXh0ZXJuYWwnLFxuICAgIHNlcnZpY2VUeXBlOiBcIkxvYWRCYWxhbmNlclwiLFxuICAgIGlkbGVUaW1lb3V0OiAnMzYwMCdcbn07XG5cbi8vIERlZmluZSB0aGUgY2xhc3MgZm9yIHRoZSBLdWJlcm5ldGVzIEluZ3Jlc3MgQWRkLU9uLCBleHRlbmRpbmcgSGVsbUFkZE9uXG5Ac3VwcG9ydHNBTExcbmV4cG9ydCBjbGFzcyBJbmdyZXNzTmdpbnhBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBJbmdyZXNzTmdpbnhBZGRPblByb3BzO1xuXG4gICAgLy8gQ29uc3RydWN0b3IgZm9yIHRoZSBjbGFzcywgbWVyZ2luZyBkZWZhdWx0IHByb3BzIHdpdGggdXNlci1kZWZpbmVkIHByb3BzXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBJbmdyZXNzTmdpbnhBZGRPblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHsgLi4uZGVmYXVsdFByb3BzLCAuLi5wcm9wcyB9IGFzIEhlbG1BZGRPblByb3BzKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5kZWZhdWx0UHJvcHMsIC4uLnByb3BzIH0gYXMgSW5ncmVzc05naW54QWRkT25Qcm9wcztcbiAgICB9XG5cbiAgICAvLyBEZXBlbmRlbmN5IGRlY29yYXRvciB0byBlbnN1cmUgdGhpcyBhZGQtb24gaXMgZGVwbG95ZWQgYWZ0ZXIgdGhlIEFXUyBMb2FkIEJhbGFuY2VyIENvbnRyb2xsZXJcbiAgICBAZGVwZW5kYWJsZShBd3NMb2FkQmFsYW5jZXJDb250cm9sbGVyQWRkT24ubmFtZSlcbiAgICBhc3luYyBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgLy8gU2V0dXAgc2VydmljZSBhbm5vdGF0aW9ucyBiYXNlZCBvbiB0aGUgcHJvcGVydGllcyBwcm92aWRlZFxuICAgICAgICBjb25zdCBsb2FkQmFsYW5jZXJBbm5vdGF0aW9uczogYW55ID0ge1xuICAgICAgICAgICAgJ3NlcnZpY2UuYmV0YS5rdWJlcm5ldGVzLmlvL2F3cy1sb2FkLWJhbGFuY2VyLWJhY2tlbmQtcHJvdG9jb2wnOiBwcm9wcy5iYWNrZW5kUHJvdG9jb2wsXG4gICAgICAgICAgICAnc2VydmljZS5iZXRhLmt1YmVybmV0ZXMuaW8vYXdzLWxvYWQtYmFsYW5jZXItYXR0cmlidXRlcyc6IGBsb2FkX2JhbGFuY2luZy5jcm9zc196b25lLmVuYWJsZWQ9JHtwcm9wcy5jcm9zc1pvbmVFbmFibGVkfWAsXG4gICAgICAgICAgICAnc2VydmljZS5iZXRhLmt1YmVybmV0ZXMuaW8vYXdzLWxvYWQtYmFsYW5jZXItc2NoZW1lJzogcHJvcHMuaW50ZXJuZXRGYWNpbmcgPyAnaW50ZXJuZXQtZmFjaW5nJyA6ICdpbnRlcm5hbCcsXG4gICAgICAgICAgICAnc2VydmljZS5iZXRhLmt1YmVybmV0ZXMuaW8vYXdzLWxvYWQtYmFsYW5jZXItdHlwZSc6IHByb3BzLmxvYWRCYWxhbmNlclR5cGUsXG4gICAgICAgICAgICAnc2VydmljZS5iZXRhLmt1YmVybmV0ZXMuaW8vYXdzLWxvYWQtYmFsYW5jZXItbmxiLXRhcmdldC10eXBlJzogcHJvcHMudGFyZ2V0VHlwZSxcbiAgICAgICAgICAgICdleHRlcm5hbC1kbnMuYWxwaGEua3ViZXJuZXRlcy5pby9ob3N0bmFtZSc6IHByb3BzLmV4dGVybmFsRG5zSG9zdG5hbWUsXG4gICAgICAgICAgICAnc2VydmljZS5iZXRhLmt1YmVybmV0ZXMuaW8vYXdzLWxvYWQtYmFsYW5jZXItY29ubmVjdGlvbi1pZGxlLXRpbWVvdXQnOiAnMzYwMCdcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBEZWZpbmUgdmFsdWVzIGZvciBIZWxtIGNoYXJ0IGJhc2VkIG9uIHByb3BlcnRpZXMgYW5kIGFubm90YXRpb25zXG4gICAgICAgIGNvbnN0IHZhbHVlczogVmFsdWVzID0ge1xuICAgICAgICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICAgICAgICAgIHNlcnZpY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbnM6IHByb3BzLnNlcnZpY2VUeXBlID09ICdMb2FkQmFsYW5jZXInID8gbG9hZEJhbGFuY2VyQW5ub3RhdGlvbnMgOiB7fVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5ncmVzc0NsYXNzUmVzb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcHMuaW5ncmVzc0NsYXNzTmFtZSB8fCBcImluZ3Jlc3MtbmdpbnhcIixcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogcHJvcHMuaXNEZWZhdWx0Q2xhc3MgPz8gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJWYWx1ZTogcHJvcHMuY29udHJvbGxlckNsYXNzIHx8IFwiazhzLmlvL2luZ3Jlc3MtbmdpbnhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZWxlY3Rpb25JRDogcHJvcHMuZWxlY3Rpb25JZCB8fCBcImluZ3Jlc3MtY29udHJvbGxlci1sZWFkZXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENvbWJpbmUgbG9naWMgZm9yIGhhbmRsaW5nIGNlcnRpZmljYXRlIGFubm90YXRpb25zXG4gICAgICAgIGxldCBjZXJ0aWZpY2F0ZVJlc291cmNlQVJOID0gcHJvcHMuY2VydGlmaWNhdGVSZXNvdXJjZUFSTjtcblxuICAgICAgICBpZiAoIWNlcnRpZmljYXRlUmVzb3VyY2VBUk4gJiYgcHJvcHMuY2VydGlmaWNhdGVSZXNvdXJjZU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNlcnRpZmljYXRlID0gY2x1c3RlckluZm8uZ2V0UmVzb3VyY2U8SUNlcnRpZmljYXRlPihwcm9wcy5jZXJ0aWZpY2F0ZVJlc291cmNlTmFtZSk7XG4gICAgICAgICAgICBjZXJ0aWZpY2F0ZVJlc291cmNlQVJOID0gY2VydGlmaWNhdGU/LmNlcnRpZmljYXRlQXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNlcnRpZmljYXRlUmVzb3VyY2VBUk4pIHtcbiAgICAgICAgICAgIGxvYWRCYWxhbmNlckFubm90YXRpb25zWydzZXJ2aWNlLmJldGEua3ViZXJuZXRlcy5pby9hd3MtbG9hZC1iYWxhbmNlci1zc2wtcG9ydHMnXSA9IHByb3BzLnNzbFBvcnQ7XG4gICAgICAgICAgICBsb2FkQmFsYW5jZXJBbm5vdGF0aW9uc1snc2VydmljZS5iZXRhLmt1YmVybmV0ZXMuaW8vYXdzLWxvYWQtYmFsYW5jZXItc3NsLWNlcnQnXSA9IGNlcnRpZmljYXRlUmVzb3VyY2VBUk47XG4gICAgICAgICAgICBpZiAocHJvcHMuZm9yY2VTU0xSZWRpcmVjdCkge1xuICAgICAgICAgICAgICAgIGxvYWRCYWxhbmNlckFubm90YXRpb25zWyduZ2lueC5pbmdyZXNzLmt1YmVybmV0ZXMuaW8vZm9yY2Utc3NsLXJlZGlyZWN0J10gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IEhUVFAgYW5kIEhUVFBTIHRhcmdldCBwb3J0c1xuICAgICAgICBzZXRQYXRoKHZhbHVlcywgXCJjb250cm9sbGVyLnNlcnZpY2UudGFyZ2V0UG9ydHMuaHR0cFwiLCBwcm9wcy5odHRwVGFyZ2V0UG9ydCk7XG4gICAgICAgIGNvbnN0IGh0dHBzVGFyZ2V0UG9ydCA9IGRvdC5waWNrKFwiY29udHJvbGxlci5zZXJ2aWNlLnRhcmdldFBvcnRzLmh0dHBzXCIsIHByb3BzLnZhbHVlcykgfHwgcHJvcHMuaHR0cHNUYXJnZXRQb3J0O1xuICAgICAgICBzZXRQYXRoKHZhbHVlcywgXCJjb250cm9sbGVyLnNlcnZpY2UudGFyZ2V0UG9ydHMuaHR0cHNcIiwgaHR0cHNUYXJnZXRQb3J0KTtcblxuICAgICAgICAvLyBNZXJnZSB1c2VyLWRlZmluZWQgdmFsdWVzIHdpdGggZGVmYXVsdHMgZm9yIHRoZSBIZWxtIGNoYXJ0IGRlcGxveW1lbnRcbiAgICAgICAgY29uc3QgbWVyZ2VkVmFsdWVzID0gbWVyZ2UodmFsdWVzLCB0aGlzLnByb3BzLnZhbHVlcyA/PyB7fSk7XG4gICAgICAgIGNvbnN0IG5naW54SGVsbUNoYXJ0ID0gdGhpcy5hZGRIZWxtQ2hhcnQoY2x1c3RlckluZm8sIG1lcmdlZFZhbHVlcyk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZ2lueEhlbG1DaGFydCk7XG4gICAgfVxufVxuIl19