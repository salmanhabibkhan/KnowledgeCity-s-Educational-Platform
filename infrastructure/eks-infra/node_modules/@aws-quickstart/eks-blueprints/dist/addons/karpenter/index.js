"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KarpenterAddOn = void 0;
const assert = require("assert");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_events_1 = require("aws-cdk-lib/aws-events");
const aws_events_targets_1 = require("aws-cdk-lib/aws-events-targets");
const iam = require("aws-cdk-lib/aws-iam");
const sqs = require("aws-cdk-lib/aws-sqs");
const semver = require("semver");
const ts_deepmerge_1 = require("ts-deepmerge");
const md5 = require("ts-md5");
const utils = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const iam_1 = require("./iam");
const types_1 = require("./types");
__exportStar(require("./types"), exports);
__exportStar(require("./karpenter-v1"), exports);
class versionMap {
    static has(version) {
        return this.versionMap.has(version.version);
    }
    static get(version) {
        return this.versionMap.get(version.version);
    }
}
versionMap.versionMap = new Map([
    [aws_eks_1.KubernetesVersion.V1_32.version, '1.2.0'],
    [aws_eks_1.KubernetesVersion.V1_31.version, '0.37.5'],
    [aws_eks_1.KubernetesVersion.V1_30.version, '0.37.5'],
    [aws_eks_1.KubernetesVersion.V1_29.version, '0.34.0'],
    [aws_eks_1.KubernetesVersion.V1_28.version, '0.31.0'],
    [aws_eks_1.KubernetesVersion.V1_27.version, '0.28.0'],
    [aws_eks_1.KubernetesVersion.V1_26.version, '0.28.0'],
    [aws_eks_1.KubernetesVersion.V1_25.version, '0.25.0'],
    [aws_eks_1.KubernetesVersion.V1_24.version, '0.21.0'],
    [aws_eks_1.KubernetesVersion.V1_23.version, '0.21.0'],
]);
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: types_1.KARPENTER,
    namespace: "kube-system",
    version: '1.2.1',
    chart: types_1.KARPENTER,
    release: types_1.KARPENTER,
    repository: 'oci://public.ecr.aws/karpenter/karpenter',
};
/**
 * Implementation of the Karpenter add-on.
 * @deprecated use KarpenterV1AddOn moving forward
 */
let KarpenterAddOn = class KarpenterAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4;
        assert(clusterInfo.cluster instanceof aws_eks_1.Cluster, "KarpenterAddOn cannot be used with imported clusters as it requires changes to the cluster authentication.");
        const cluster = clusterInfo.cluster;
        const endpoint = cluster.clusterEndpoint;
        const name = cluster.clusterName;
        const partition = cluster.stack.partition;
        const stackName = cluster.stack.stackName;
        const region = cluster.stack.region;
        let values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        const version = this.options.version;
        const interruption = this.options.interruptionHandling || false;
        const installCRDs = this.options.installCRDs || false;
        const podIdentity = this.options.podIdentity || false;
        // NodePool variables
        const labels = ((_b = this.options.nodePoolSpec) === null || _b === void 0 ? void 0 : _b.labels) || {};
        const annotations = ((_c = this.options.nodePoolSpec) === null || _c === void 0 ? void 0 : _c.annotations) || {};
        const taints = ((_d = this.options.nodePoolSpec) === null || _d === void 0 ? void 0 : _d.taints) || [];
        const startupTaints = ((_e = this.options.nodePoolSpec) === null || _e === void 0 ? void 0 : _e.startupTaints) || [];
        const requirements = ((_f = this.options.nodePoolSpec) === null || _f === void 0 ? void 0 : _f.requirements) || [];
        const consol = ((_g = this.options.nodePoolSpec) === null || _g === void 0 ? void 0 : _g.consolidation) || null;
        const ttlSecondsAfterEmpty = ((_h = this.options.nodePoolSpec) === null || _h === void 0 ? void 0 : _h.ttlSecondsAfterEmpty) || null;
        const ttlSecondsUntilExpired = ((_j = this.options.nodePoolSpec) === null || _j === void 0 ? void 0 : _j.ttlSecondsUntilExpired) || null;
        const disruption = ((_k = this.options.nodePoolSpec) === null || _k === void 0 ? void 0 : _k.disruption) || null;
        const limits = ((_l = this.options.nodePoolSpec) === null || _l === void 0 ? void 0 : _l.limits) || null;
        const weight = ((_m = this.options.nodePoolSpec) === null || _m === void 0 ? void 0 : _m.weight) || null;
        // NodeClass variables
        const subnetSelector = (_o = this.options.ec2NodeClassSpec) === null || _o === void 0 ? void 0 : _o.subnetSelector;
        const sgSelector = (_p = this.options.ec2NodeClassSpec) === null || _p === void 0 ? void 0 : _p.securityGroupSelector;
        const subnetSelectorTerms = (_q = this.options.ec2NodeClassSpec) === null || _q === void 0 ? void 0 : _q.subnetSelectorTerms;
        const sgSelectorTerms = (_r = this.options.ec2NodeClassSpec) === null || _r === void 0 ? void 0 : _r.securityGroupSelectorTerms;
        const amiFamily = (_s = this.options.ec2NodeClassSpec) === null || _s === void 0 ? void 0 : _s.amiFamily;
        const amiSelector = ((_t = this.options.ec2NodeClassSpec) === null || _t === void 0 ? void 0 : _t.amiSelector) || {};
        const amiSelectorTerms = (_u = this.options.ec2NodeClassSpec) === null || _u === void 0 ? void 0 : _u.amiSelectorTerms;
        const instanceStorePolicy = ((_v = this.options.ec2NodeClassSpec) === null || _v === void 0 ? void 0 : _v.instanceStorePolicy) || undefined;
        const userData = ((_w = this.options.ec2NodeClassSpec) === null || _w === void 0 ? void 0 : _w.userData) || "";
        const instanceProf = (_x = this.options.ec2NodeClassSpec) === null || _x === void 0 ? void 0 : _x.instanceProfile;
        const tags = ((_y = this.options.ec2NodeClassSpec) === null || _y === void 0 ? void 0 : _y.tags) || {};
        const metadataOptions = ((_z = this.options.ec2NodeClassSpec) === null || _z === void 0 ? void 0 : _z.metadataOptions) || {
            httpEndpoint: "enabled",
            httpProtocolIPv6: "disabled",
            httpPutResponseHopLimit: 2,
            httpTokens: "required"
        };
        if (cluster.ipFamily == aws_eks_1.IpFamily.IP_V6) {
            metadataOptions.httpProtocolIPv6 = "enabled";
        }
        const blockDeviceMappings = ((_0 = this.options.ec2NodeClassSpec) === null || _0 === void 0 ? void 0 : _0.blockDeviceMappings) || [];
        const detailedMonitoring = ((_1 = this.options.ec2NodeClassSpec) === null || _1 === void 0 ? void 0 : _1.detailedMonitoring) || false;
        // Check Kubernetes and Karpenter version compatibility for warning
        this.isCompatible(version, clusterInfo.version);
        // Version feature checks for errors
        this.versionFeatureChecksForError(clusterInfo, version, disruption, consol, ttlSecondsAfterEmpty, ttlSecondsUntilExpired, this.options.ec2NodeClassSpec, amiFamily);
        // Set up the node role and instance profile
        const [karpenterNodeRole, karpenterInstanceProfile] = this.setUpNodeRole(cluster, stackName, region);
        // Create the controller policy
        let karpenterPolicyDocument;
        if (semver.gte(version, "v0.32.0")) {
            karpenterPolicyDocument = iam.PolicyDocument.fromJson((0, iam_1.KarpenterControllerPolicyBeta)(cluster, partition, region));
        }
        else {
            karpenterPolicyDocument = iam.PolicyDocument.fromJson(iam_1.KarpenterControllerPolicy);
        }
        karpenterPolicyDocument.addStatements(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                "iam:PassRole",
            ],
            resources: [`${karpenterNodeRole.roleArn}`]
        }));
        // Support for Native spot interruption
        if (interruption) {
            // Create Interruption Queue
            const queue = new sqs.Queue(cluster.stack, 'karpenter-queue', {
                queueName: stackName,
                retentionPeriod: aws_cdk_lib_1.Duration.seconds(300),
            });
            queue.addToResourcePolicy(new iam.PolicyStatement({
                sid: 'EC2InterruptionPolicy',
                effect: iam.Effect.ALLOW,
                principals: [
                    new iam.ServicePrincipal('sqs.amazonaws.com'),
                    new iam.ServicePrincipal('events.amazonaws.com'),
                ],
                actions: [
                    "sqs:SendMessage"
                ],
                resources: [`${queue.queueArn}`]
            }));
            // Add Interruption Rules
            new aws_events_1.Rule(cluster.stack, 'schedule-change-rule', {
                eventPattern: {
                    source: ["aws.health"],
                    detailType: ['AWS Health Event']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            new aws_events_1.Rule(cluster.stack, 'spot-interruption-rule', {
                eventPattern: {
                    source: ["aws.ec2"],
                    detailType: ['EC2 Spot Instance Interruption Warning']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            new aws_events_1.Rule(cluster.stack, 'rebalance-rule', {
                eventPattern: {
                    source: ["aws.ec2"],
                    detailType: ['EC2 Instance Rebalance Recommendation']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            new aws_events_1.Rule(cluster.stack, 'inst-state-change-rule', {
                eventPattern: {
                    source: ["aws.ec2"],
                    detailType: ['C2 Instance State-change Notification']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            // Add policy to the node role to allow access to the Interruption Queue
            const interruptionQueueStatement = new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: [
                    "sqs:DeleteMessage",
                    "sqs:GetQueueUrl",
                    "sqs:GetQueueAttributes",
                    "sqs:ReceiveMessage"
                ],
                resources: [`${queue.queueArn}`]
            });
            karpenterPolicyDocument.addStatements(interruptionQueueStatement);
        }
        // Create Namespace
        const ns = utils.createNamespace(this.options.namespace, cluster, true, true);
        let sa;
        let saAnnotation;
        if (podIdentity && semver.gte(`${clusterInfo.version.version}.0`, '1.24.0') && semver.gte(version, "v0.35.0")) {
            sa = utils.podIdentityAssociation(cluster, types_1.RELEASE, this.options.namespace, karpenterPolicyDocument);
            saAnnotation = {};
        }
        else {
            sa = utils.createServiceAccount(cluster, types_1.RELEASE, this.options.namespace, karpenterPolicyDocument);
            saAnnotation = { "eks.amazonaws.com/role-arn": sa.role.roleArn };
        }
        sa.node.addDependency(ns);
        // Create global helm values based on v1beta1 migration as shown below:
        // https://karpenter.sh/v0.32/upgrading/v1beta1-migration/#helm-values
        let globalSettings = {
            clusterName: name,
            clusterEndpoint: endpoint
        };
        if (semver.lt(version, '0.32.0')) {
            globalSettings = (0, ts_deepmerge_1.merge)(globalSettings, {
                defaultInstanceProfile: karpenterInstanceProfile.instanceProfileName,
                interruptionQueueName: interruption ? stackName : ""
            });
        }
        else {
            globalSettings = (0, ts_deepmerge_1.merge)(globalSettings, {
                interruptionQueue: interruption ? stackName : ""
            });
        }
        if (semver.lt(version, '0.32.0')) {
            utils.setPath(values, "settings.aws", (0, ts_deepmerge_1.merge)(globalSettings, (_3 = (_2 = values === null || values === void 0 ? void 0 : values.settings) === null || _2 === void 0 ? void 0 : _2.aws) !== null && _3 !== void 0 ? _3 : {}));
        }
        else {
            utils.setPath(values, "settings", (0, ts_deepmerge_1.merge)(globalSettings, (_4 = values === null || values === void 0 ? void 0 : values.settings) !== null && _4 !== void 0 ? _4 : {}));
        }
        // Let Helm create the service account if using pod identity
        const saValues = {
            serviceAccount: {
                create: podIdentity,
                name: types_1.RELEASE,
                annotations: saAnnotation,
            }
        };
        values = (0, ts_deepmerge_1.merge)(values, saValues);
        // Install HelmChart using user defined value or default of 5 minutes.
        const helmChartTimeout = this.options.helmChartTimeout || aws_cdk_lib_1.Duration.minutes(5);
        const karpenterChart = this.addHelmChart(clusterInfo, values, false, true, helmChartTimeout);
        karpenterChart.node.addDependency(sa);
        if (clusterInfo.nodeGroups) {
            clusterInfo.nodeGroups.forEach(n => karpenterChart.node.addDependency(n));
        }
        if (semver.gte(version, "0.32.0") && installCRDs) {
            let _version = version;
            if (!version.startsWith('v')) {
                _version = `v${version}`;
            }
            const CRDs = [
                ["karpentersh-nodepool-beta1-crd", `https://raw.githubusercontent.com/aws/karpenter/${_version}/pkg/apis/crds/karpenter.sh_nodepools.yaml`],
                ["karpentersh-nodeclaims-beta1-crd", `https://raw.githubusercontent.com/aws/karpenter/${_version}/pkg/apis/crds/karpenter.sh_nodeclaims.yaml`],
                ["karpenterk8s-ec2nodeclasses-beta1-crd", `https://raw.githubusercontent.com/aws/karpenter/${_version}/pkg/apis/crds/karpenter.k8s.aws_ec2nodeclasses.yaml`],
            ];
            // loop over the CRD's and load the yaml and deploy the manifest
            for (const [crdName, crdUrl] of CRDs) {
                const crdManifest = utils.loadExternalYaml(crdUrl);
                const manifest = cluster.addManifest(crdName, crdManifest);
                // We want these installed before the karpenterChart, or helm will timeout waiting for it to stabilize
                karpenterChart.node.addDependency(manifest);
            }
        }
        // Deploy Provisioner (Alpha) or NodePool (Beta) CRD based on the Karpenter Version
        if (this.options.nodePoolSpec) {
            let pool;
            if (semver.gte(version, '0.32.0')) {
                pool = {
                    apiVersion: 'karpenter.sh/v1beta1',
                    kind: 'NodePool',
                    metadata: { name: 'default-nodepool' },
                    spec: {
                        template: {
                            metadata: {
                                labels: labels,
                                annotations: annotations,
                            },
                            spec: {
                                nodeClassRef: {
                                    name: "default-ec2nodeclass"
                                },
                                taints: taints,
                                startupTaints: startupTaints,
                                requirements: this.convert(requirements),
                            }
                        },
                        disruption: disruption,
                        limits: limits,
                        weight: weight,
                    },
                };
            }
            else {
                pool = {
                    apiVersion: 'karpenter.sh/v1alpha5',
                    kind: 'Provisioner',
                    metadata: { name: 'default-provisioner' },
                    spec: {
                        providerRef: {
                            name: "default-nodetemplate"
                        },
                        taints: taints,
                        startupTaints: startupTaints,
                        labels: labels,
                        annotations: annotations,
                        requirements: this.convert(requirements),
                        limits: {
                            resources: limits,
                        },
                        consolidation: consol,
                        ttlSecondsUntilExpired: ttlSecondsUntilExpired,
                        ttlSecondsAfterEmpty: ttlSecondsAfterEmpty,
                        weight: weight,
                    },
                };
            }
            const poolManifest = cluster.addManifest('default-pool', pool);
            poolManifest.node.addDependency(karpenterChart);
            // Deploy AWSNodeTemplate (Alpha) or EC2NodeClass (Beta) CRD based on the Karpenter Version
            if (this.options.ec2NodeClassSpec) {
                let ec2Node;
                if (semver.gte(version, '0.32.0')) {
                    ec2Node = {
                        apiVersion: "karpenter.k8s.aws/v1beta1",
                        kind: "EC2NodeClass",
                        metadata: {
                            name: "default-ec2nodeclass"
                        },
                        spec: {
                            amiFamily: amiFamily,
                            subnetSelectorTerms: subnetSelectorTerms,
                            securityGroupSelectorTerms: sgSelectorTerms,
                            amiSelectorTerms: amiSelectorTerms,
                            userData: userData,
                            tags: tags,
                            metadataOptions: metadataOptions,
                            blockDeviceMappings: blockDeviceMappings,
                            detailedMonitoring: detailedMonitoring,
                        },
                    };
                    // Provide custom Instance Profile to replace role if provided, else use the role created with the addon
                    if (instanceProf) {
                        ec2Node = (0, ts_deepmerge_1.merge)(ec2Node, { spec: { instanceProfile: instanceProf } });
                    }
                    else {
                        ec2Node = (0, ts_deepmerge_1.merge)(ec2Node, { spec: { role: karpenterNodeRole.roleName } });
                    }
                    // Instance Store Policy added for v0.34.0 and up
                    if (semver.gte(version, '0.34.0') && instanceStorePolicy) {
                        ec2Node = (0, ts_deepmerge_1.merge)(ec2Node, { spec: { instanceStorePolicy: instanceStorePolicy } });
                    }
                }
                else {
                    ec2Node = {
                        apiVersion: "karpenter.k8s.aws/v1alpha1",
                        kind: "AWSNodeTemplate",
                        metadata: {
                            name: "default-nodetemplate"
                        },
                        spec: {
                            subnetSelector: subnetSelector,
                            securityGroupSelector: sgSelector,
                            instanceProfile: instanceProf ? instanceProf : null,
                            amiFamily: amiFamily ? amiFamily : "AL2",
                            amiSelector: amiSelector,
                            tags: tags,
                            metadataOptions: metadataOptions,
                            blockDeviceMappings: blockDeviceMappings,
                            userData: userData,
                        },
                    };
                    // Add EC2 Detailed Monitoring for v0.22.0 and up
                    if (semver.gte(version, '0.22.0')) {
                        ec2Node = (0, ts_deepmerge_1.merge)(ec2Node, { spec: { detailedMonitoring: detailedMonitoring } });
                    }
                }
                const nodeManifest = cluster.addManifest('default-node-template', ec2Node);
                nodeManifest.node.addDependency(poolManifest);
            }
        }
        return Promise.resolve(karpenterChart);
    }
    /**
     * Helper function to convert a key-pair values (with an operator)
     * of spec configurations to appropriate json format for addManifest function
     * @param reqs
     * @returns newReqs
     * */
    convert(reqs) {
        const newReqs = [];
        for (let req of reqs) {
            const key = req['key'];
            const op = req['operator'];
            const val = req['values'];
            const requirement = {
                "key": key,
                "operator": op,
                "values": val
            };
            newReqs.push(requirement);
        }
        return newReqs;
    }
    /**
     * Helper function to ensure right features are added as part of the configuration
     * for the right version of the add-on
     * @param clusterInfo
     * @param version version of the add-on
     * @param disruption disruption feature available with the Beta CRDs
     * @param consolidation consolidation setting available with the Alpha CRDs
     * @param ttlSecondsAfterEmpty ttlSecondsAfterEmpty setting
     * @param ttlSecondsUntilExpired ttlSecondsUntilExpired setting
     * @param ec2NodeClassSpec Node Class Spec
     * @param amiFamily AMI Family
     * @returns
     */
    versionFeatureChecksForError(clusterInfo, version, disruption, consolidation, ttlSecondsAfterEmpty, ttlSecondsUntilExpired, ec2NodeClassSpec, amiFamily) {
        // EC2 Detailed Monitoring is only available in versions 0.23.0 and above
        if (semver.lt(version, '0.23.0') && ec2NodeClassSpec) {
            assert(ec2NodeClassSpec["detailedMonitoring"] === undefined, "Detailed Monitoring is not available in this version of Karpenter. Please upgrade to at least 0.23.0.");
        }
        // Disruption budget should not exist for versions below 0.34.x
        if (semver.lt(version, '0.34.0')) {
            if (disruption) {
                assert(!disruption["budgets"], "You cannot set disruption budgets for this version of Karpenter. Please upgrade to 0.34.0 or higher.");
            }
        }
        // version check errors for v0.32.0 and up (beta CRDs)
        if (semver.gte(version, '0.32.0')) {
            // Consolidation features don't exist in beta CRDs
            assert(!consolidation && !ttlSecondsAfterEmpty && !ttlSecondsUntilExpired, 'Consolidation features are only available for previous versions of Karpenter.');
            // consolidateAfter cannot be set if policy is set to WhenUnderutilized
            if (disruption && disruption["consolidationPolicy"] == "WhenUnderutilized") {
                assert(!disruption["consolidateAfter"], 'You cannot set consolidateAfter value if the consolidation policy is set to Underutilized.');
            }
            // AMI Family, Security Group and Subnet terms must be provided, given EC2 NodeSpec
            if (ec2NodeClassSpec) {
                assert(amiFamily !== undefined, "Please provide the AMI Family for your EC2NodeClass.");
                assert(ec2NodeClassSpec["securityGroupSelectorTerms"] !== undefined, "Please provide SecurityGroupTerm for your EC2NodeClass.");
                assert(ec2NodeClassSpec["subnetSelectorTerms"] !== undefined, "Please provide subnetGroupTerm for your EC2NodeClass.");
            }
        }
        // version check errors for v0.31.x and down (alpha CRDs)
        // Includes checks for consolidation and disruption features
        if (semver.lt(version, '0.32.0')) {
            if (consolidation) {
                assert(!(consolidation.enabled && ttlSecondsAfterEmpty), 'Consolidation and ttlSecondsAfterEmpty must be mutually exclusive.');
            }
            assert(!disruption, 'Disruption configuration is only supported on versions v0.32.0 and later.');
            //Security Group and Subnet terms must be provided, given EC2 NodeSpec
            if (ec2NodeClassSpec) {
                assert(ec2NodeClassSpec["securityGroupSelector"] !== undefined, "Please provide SecurityGroupTerm for your AWSNodeTemplate.");
                assert(ec2NodeClassSpec["subnetSelector"] !== undefined, "Please provide subnetGroupTerm for your AWSNodeTemplate.");
            }
        }
        // We should block Node Termination Handler usage once Karpenter is leveraged
        assert(!clusterInfo.getProvisionedAddOn('AwsNodeTerminationHandlerAddOn'), 'Karpenter supports native interruption handling, so Node Termination Handler will not be necessary.');
    }
    /**
     * Helper function to set up the Karpenter Node Role and Instance Profile
     * Outputs to CloudFormation and map the role to the aws-auth ConfigMap
     * @param cluster EKS Cluster
     * @param stackName Name of the stack
     * @param region Region of the stack
     * @returns [karpenterNodeRole, karpenterInstanceProfile]
     */
    setUpNodeRole(cluster, stackName, region) {
        // Set up Node Role
        const karpenterNodeRole = new iam.Role(cluster, 'karpenter-node-role', {
            assumedBy: new iam.ServicePrincipal(`ec2.${cluster.stack.urlSuffix}`),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSWorkerNodePolicy"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKS_CNI_Policy"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEC2ContainerRegistryReadOnly"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonSSMManagedInstanceCore"),
            ],
            //roleName: `KarpenterNodeRole-${name}` // let role name to be generated as unique
        });
        // Attach ipv6 related policies based on cluster IPFamily
        if (cluster.ipFamily === aws_eks_1.IpFamily.IP_V6) {
            const nodeIpv6Policy = new iam.Policy(cluster, 'karpenter-node-Ipv6-Policy', {
                document: utils.getEKSNodeIpv6PolicyDocument()
            });
            karpenterNodeRole.attachInlinePolicy(nodeIpv6Policy);
        }
        // Set up Instance Profile
        const instanceProfileName = md5.Md5.hashStr(stackName + region);
        const karpenterInstanceProfile = new iam.CfnInstanceProfile(cluster, 'karpenter-instance-profile', {
            roles: [karpenterNodeRole.roleName],
            instanceProfileName: `KarpenterNodeInstanceProfile-${instanceProfileName}`,
            path: '/'
        });
        karpenterInstanceProfile.node.addDependency(karpenterNodeRole);
        const clusterId = aws_cdk_lib_1.Names.uniqueId(cluster);
        //Cfn output for Node Role in case of needing to add additional policies
        new aws_cdk_lib_1.CfnOutput(cluster.stack, 'Karpenter Instance Node Role', {
            value: karpenterNodeRole.roleName,
            description: "Karpenter add-on Node Role name",
            exportName: clusterId + "KarpenterNodeRoleName",
        });
        //Cfn output for Instance Profile for creating additional provisioners
        new aws_cdk_lib_1.CfnOutput(cluster.stack, 'Karpenter Instance Profile name', {
            value: karpenterInstanceProfile ? karpenterInstanceProfile.instanceProfileName : "none",
            description: "Karpenter add-on Instance Profile name",
            exportName: clusterId + "KarpenterInstanceProfileName",
        });
        // Map Node Role to aws-auth
        cluster.awsAuth.addRoleMapping(karpenterNodeRole, {
            groups: ['system:bootstrapper', 'system:nodes'],
            username: 'system:node:{{EC2PrivateDNSName}}'
        });
        return [karpenterNodeRole, karpenterInstanceProfile];
    }
    /**
     * Helper function to check whether:
     * 1. Supported Karpenter versions are implemented, and
     * 2. Supported Kubernetes versions are deployed on the cluster to use Karpenter
     * It will reject the addon if the cluster uses deprecated Kubernetes version, and
     * Warn users about issues if incompatible Karpenter version is used for a particular cluster
     * given its Kubernetes version
     * @param karpenterVersion Karpenter version to be deployed
     * @param kubeVersion Cluster's Kubernetes version
     */
    isCompatible(karpenterVersion, kubeVersion) {
        assert(versionMap.has(kubeVersion), 'Please upgrade your EKS Kubernetes version to start using Karpenter.');
        assert(semver.gte(karpenterVersion, '0.21.0'), 'Please use Karpenter version 0.21.0 or above.');
        const compatibleVersion = versionMap.get(kubeVersion);
        if (semver.gt(compatibleVersion, karpenterVersion)) {
            console.warn(`Please use minimum Karpenter version for this Kubernetes Version: ${compatibleVersion}, otherwise you will run into compatibility issues.`);
        }
    }
};
exports.KarpenterAddOn = KarpenterAddOn;
__decorate([
    utils.conflictsWith('ClusterAutoScalerAddOn'),
    utils.conflictsWithAutoMode("fail")
], KarpenterAddOn.prototype, "deploy", null);
exports.KarpenterAddOn = KarpenterAddOn = __decorate([
    utils.supportsALL
], KarpenterAddOn);
//# sourceMappingURL=data:application/json;base64,