"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KarpenterV1AddOn = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_events_1 = require("aws-cdk-lib/aws-events");
const aws_events_targets_1 = require("aws-cdk-lib/aws-events-targets");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const iam = require("aws-cdk-lib/aws-iam");
const sqs = require("aws-cdk-lib/aws-sqs");
const ts_deepmerge_1 = require("ts-deepmerge");
const utils = require("../../utils");
const semver = require("semver");
const assert = require("assert");
const helm_addon_1 = require("../helm-addon");
const iam_1 = require("./iam");
const types_1 = require("./types");
const md5 = require("ts-md5");
const defaultProps = {
    name: types_1.KARPENTER,
    namespace: "kube-system",
    version: "1.3.0",
    chart: types_1.KARPENTER,
    release: types_1.KARPENTER,
    repository: "oci://public.ecr.aws/karpenter/karpenter",
};
/**
 * Implementation of the Karpenter add-on
 */
let KarpenterV1AddOn = class KarpenterV1AddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        assert(clusterInfo.cluster instanceof aws_eks_1.Cluster, "KarpenterAddOn cannot be used with imported clusters as it requires changes to the cluster authentication.");
        assert(semver.gte(this.options.version, "0.32.0"), `Karpenter interruption handling requires version >= 0.32.0. Current version: ${this.props.version}`);
        assert(semver.gte(semver.coerce(clusterInfo.version.version), "1.29.0", true), `Cluster version must be >= 1.29 for Karpenter interruption handling. Current version: ${clusterInfo.version.version}`);
        const cluster = clusterInfo.cluster;
        const endpoint = cluster.clusterEndpoint;
        const name = cluster.clusterName;
        const partition = cluster.stack.partition;
        const stackName = cluster.stack.stackName;
        const region = cluster.stack.region;
        let values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        const interruption = this.options.interruptionHandling || false;
        const podIdentity = this.options.podIdentity || false;
        // NodePool variables
        const labels = ((_b = this.options.nodePoolSpec) === null || _b === void 0 ? void 0 : _b.labels) || {};
        const annotations = ((_c = this.options.nodePoolSpec) === null || _c === void 0 ? void 0 : _c.annotations) || {};
        const taints = ((_d = this.options.nodePoolSpec) === null || _d === void 0 ? void 0 : _d.taints) || [];
        const startupTaints = ((_e = this.options.nodePoolSpec) === null || _e === void 0 ? void 0 : _e.startupTaints) || [];
        const requirements = ((_f = this.options.nodePoolSpec) === null || _f === void 0 ? void 0 : _f.requirements) || [];
        const disruption = ((_g = this.options.nodePoolSpec) === null || _g === void 0 ? void 0 : _g.disruption) || null;
        const limits = ((_h = this.options.nodePoolSpec) === null || _h === void 0 ? void 0 : _h.limits) || null;
        const weight = ((_j = this.options.nodePoolSpec) === null || _j === void 0 ? void 0 : _j.weight) || null;
        // NodeClass variables
        const subnetSelectorTerms = (_k = this.options.ec2NodeClassSpec) === null || _k === void 0 ? void 0 : _k.subnetSelectorTerms;
        const sgSelectorTerms = (_l = this.options.ec2NodeClassSpec) === null || _l === void 0 ? void 0 : _l.securityGroupSelectorTerms;
        const amiFamily = (_m = this.options.ec2NodeClassSpec) === null || _m === void 0 ? void 0 : _m.amiFamily;
        const amiSelectorTerms = (_o = this.options.ec2NodeClassSpec) === null || _o === void 0 ? void 0 : _o.amiSelectorTerms;
        const instanceStorePolicy = ((_p = this.options.ec2NodeClassSpec) === null || _p === void 0 ? void 0 : _p.instanceStorePolicy) || undefined;
        const userData = ((_q = this.options.ec2NodeClassSpec) === null || _q === void 0 ? void 0 : _q.userData) || "";
        const instanceProf = (_r = this.options.ec2NodeClassSpec) === null || _r === void 0 ? void 0 : _r.instanceProfile;
        const tags = ((_s = this.options.ec2NodeClassSpec) === null || _s === void 0 ? void 0 : _s.tags) || {};
        const metadataOptions = ((_t = this.options.ec2NodeClassSpec) === null || _t === void 0 ? void 0 : _t.metadataOptions) || {
            httpEndpoint: "enabled",
            httpProtocolIPv6: "disabled",
            httpPutResponseHopLimit: 2,
            httpTokens: "required",
        };
        if (cluster.ipFamily == aws_eks_1.IpFamily.IP_V6) {
            metadataOptions.httpProtocolIPv6 = "enabled";
        }
        const blockDeviceMappings = ((_u = this.options.ec2NodeClassSpec) === null || _u === void 0 ? void 0 : _u.blockDeviceMappings) || [];
        const detailedMonitoring = ((_v = this.options.ec2NodeClassSpec) === null || _v === void 0 ? void 0 : _v.detailedMonitoring) || false;
        // Set up the node role and instance profile
        const [karpenterNodeRole] = this.setUpNodeRole(cluster, stackName, region);
        // Create the controller policy
        let karpenterPolicyDocument;
        karpenterPolicyDocument = iam.PolicyDocument.fromJson((0, iam_1.KarpenterControllerPolicyV1)(cluster, partition, region));
        karpenterPolicyDocument.addStatements(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ["iam:PassRole"],
            resources: [`${karpenterNodeRole.roleArn}`],
        }));
        // Support for Native spot interruption
        if (interruption) {
            // Add policy to the node role to allow access to the Interruption Queue
            const interruptionQueueStatement = this.createInterruptionQueue(cluster, stackName);
            karpenterPolicyDocument.addStatements(interruptionQueueStatement);
        }
        // Create Namespace
        const ns = utils.createNamespace(this.options.namespace, cluster, true, true);
        let sa;
        let saAnnotation;
        if (podIdentity) {
            sa = utils.podIdentityAssociation(cluster, types_1.RELEASE, this.options.namespace, karpenterPolicyDocument);
            saAnnotation = {};
        }
        else {
            sa = utils.createServiceAccount(cluster, types_1.RELEASE, this.options.namespace, karpenterPolicyDocument);
            saAnnotation = { "eks.amazonaws.com/role-arn": sa.role.roleArn };
        }
        sa.node.addDependency(ns);
        // Create global helm values based on v1beta1 migration as shown below:
        // https://karpenter.sh/v0.32/upgrading/v1beta1-migration/#helm-values
        let globalSettings = { clusterName: name, clusterEndpoint: endpoint };
        globalSettings = (0, ts_deepmerge_1.merge)(globalSettings, { interruptionQueue: interruption ? stackName : "" });
        utils.setPath(values, "settings", (0, ts_deepmerge_1.merge)(globalSettings, (_w = values === null || values === void 0 ? void 0 : values.settings) !== null && _w !== void 0 ? _w : {}));
        // Let Helm create the service account if using pod identity
        const saValues = {
            serviceAccount: { create: podIdentity, name: types_1.RELEASE, annotations: saAnnotation },
        };
        values = (0, ts_deepmerge_1.merge)(values, saValues);
        // Install HelmChart using user defined value or default of 5 minutes.
        const helmChartTimeout = this.options.helmChartTimeout || aws_cdk_lib_1.Duration.minutes(5);
        const karpenterChart = this.addHelmChart(clusterInfo, values, false, true, helmChartTimeout);
        karpenterChart.node.addDependency(sa);
        if (clusterInfo.nodeGroups) {
            clusterInfo.nodeGroups.forEach((n) => karpenterChart.node.addDependency(n));
        }
        // Deploy Provisioner (Alpha) or NodePool (Beta) CRD based on the Karpenter Version
        if (this.options.nodePoolSpec) {
            const pool = {
                apiVersion: "karpenter.sh/v1",
                kind: "NodePool",
                metadata: { name: "default-nodepool" },
                spec: {
                    template: {
                        metadata: { labels: labels, annotations: annotations },
                        spec: {
                            nodeClassRef: {
                                name: "default-ec2nodeclass",
                                group: "karpenter.k8s.aws",
                                kind: "EC2NodeClass"
                            },
                            taints: taints,
                            startupTaints: startupTaints,
                            requirements: this.convert(requirements),
                            expireAfter: (_x = this.options.nodePoolSpec) === null || _x === void 0 ? void 0 : _x.expireAfter
                        },
                    },
                    disruption: disruption,
                    limits: limits,
                    weight: weight,
                },
            };
            const poolManifest = cluster.addManifest("default-pool", pool);
            poolManifest.node.addDependency(karpenterChart);
            // Deploy AWSNodeTemplate (Alpha) or EC2NodeClass (Beta) CRD based on the Karpenter Version
            if (this.options.ec2NodeClassSpec) {
                let ec2Node;
                ec2Node = {
                    apiVersion: "karpenter.k8s.aws/v1",
                    kind: "EC2NodeClass",
                    metadata: { name: "default-ec2nodeclass" },
                    spec: {
                        amiFamily: amiFamily,
                        subnetSelectorTerms: subnetSelectorTerms,
                        securityGroupSelectorTerms: sgSelectorTerms,
                        amiSelectorTerms: amiSelectorTerms ? amiSelectorTerms : [],
                        userData: userData,
                        tags: tags,
                        metadataOptions: metadataOptions,
                        blockDeviceMappings: blockDeviceMappings,
                        detailedMonitoring: detailedMonitoring,
                    },
                };
                // Provide custom Instance Profile to replace role if provided, else use the role created with the addon
                if (instanceProf) {
                    ec2Node = (0, ts_deepmerge_1.merge)(ec2Node, { spec: { instanceProfile: instanceProf } });
                }
                else {
                    ec2Node = (0, ts_deepmerge_1.merge)(ec2Node, { spec: { role: karpenterNodeRole.roleName } });
                }
                // Instance Store Policy added for v0.34.0 and up
                if (instanceStorePolicy) {
                    ec2Node = (0, ts_deepmerge_1.merge)(ec2Node, { spec: { instanceStorePolicy: instanceStorePolicy } });
                }
                const nodeManifest = cluster.addManifest("default-node-template", ec2Node);
                nodeManifest.node.addDependency(karpenterChart);
                poolManifest.node.addDependency(nodeManifest);
            }
        }
        return Promise.resolve(karpenterChart);
    }
    /**
     * Helper function to convert a key-pair values (with an operator)
     * of spec configurations to appropriate json format for addManifest function
     * @param reqs
     * @returns newReqs
     * */
    convert(reqs) {
        const newReqs = [];
        for (let req of reqs) {
            const key = req["key"];
            const op = req["operator"];
            const val = req["values"];
            const requirement = { key: key, operator: op, values: val };
            newReqs.push(requirement);
        }
        return newReqs;
    }
    /**
     * Helper function to set up the Karpenter Node Role and Instance Profile
     * Outputs to CloudFormation and map the role to the aws-auth ConfigMap
     * @param cluster EKS Cluster
     * @param stackName Name of the stack
     * @param region Region of the stack
     * @returns [karpenterNodeRole, karpenterInstanceProfile]
     */
    setUpNodeRole(cluster, stackName, region) {
        // Set up Node Role
        const karpenterNodeRole = new iam.Role(cluster, "karpenter-node-role", {
            assumedBy: new iam.ServicePrincipal(`ec2.${cluster.stack.urlSuffix}`),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSWorkerNodePolicy"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKS_CNI_Policy"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEC2ContainerRegistryReadOnly"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonSSMManagedInstanceCore"),
            ],
            //roleName: `KarpenterNodeRole-${name}` // let role name to be generated as unique
        });
        // Attach ipv6 related policies based on cluster IPFamily
        if (cluster.ipFamily === aws_eks_1.IpFamily.IP_V6) {
            const nodeIpv6Policy = new iam.Policy(cluster, "karpenter-node-Ipv6-Policy", {
                document: utils.getEKSNodeIpv6PolicyDocument(),
            });
            karpenterNodeRole.attachInlinePolicy(nodeIpv6Policy);
        }
        // Set up Instance Profile
        const instanceProfileName = md5.Md5.hashStr(stackName + region);
        const karpenterInstanceProfile = new iam.CfnInstanceProfile(cluster, "karpenter-instance-profile", {
            roles: [karpenterNodeRole.roleName],
            instanceProfileName: `KarpenterNodeInstanceProfile-${instanceProfileName}`,
            path: "/",
        });
        karpenterInstanceProfile.node.addDependency(karpenterNodeRole);
        const clusterId = aws_cdk_lib_1.Names.uniqueId(cluster);
        //Cfn output for Node Role in case of needing to add additional policies
        new aws_cdk_lib_1.CfnOutput(cluster.stack, "Karpenter Instance Node Role", {
            value: karpenterNodeRole.roleName,
            description: "Karpenter add-on Node Role name",
            exportName: clusterId + "KarpenterNodeRoleName",
        });
        //Cfn output for Instance Profile for creating additional provisioners
        new aws_cdk_lib_1.CfnOutput(cluster.stack, "Karpenter Instance Profile name", {
            value: karpenterInstanceProfile ? karpenterInstanceProfile.instanceProfileName : "none",
            description: "Karpenter add-on Instance Profile name",
            exportName: clusterId + "KarpenterInstanceProfileName",
        });
        // Map Node Role to aws-auth
        cluster.awsAuth.addRoleMapping(karpenterNodeRole, {
            groups: ["system:bootstrapper", "system:nodes"],
            username: "system:node:{{EC2PrivateDNSName}}",
        });
        return [karpenterNodeRole, karpenterInstanceProfile];
    }
    createInterruptionQueue(cluster, stackName) {
        // Create Interruption Queue
        const queue = new sqs.Queue(cluster.stack, "karpenter-queue", {
            queueName: stackName,
            retentionPeriod: aws_cdk_lib_1.Duration.seconds(300),
        });
        queue.addToResourcePolicy(new iam.PolicyStatement({
            sid: "EC2InterruptionPolicy",
            effect: iam.Effect.ALLOW,
            principals: [
                new iam.ServicePrincipal("sqs.amazonaws.com"),
                new iam.ServicePrincipal("events.amazonaws.com"),
            ],
            actions: ["sqs:SendMessage"],
            resources: [`${queue.queueArn}`],
        }));
        // Add Interruption Rules
        new aws_events_1.Rule(cluster.stack, "schedule-change-rule", {
            eventPattern: { source: ["aws.health"], detailType: ["AWS Health Event"] },
        }).addTarget(new aws_events_targets_1.SqsQueue(queue));
        new aws_events_1.Rule(cluster.stack, "spot-interruption-rule", {
            eventPattern: { source: ["aws.ec2"], detailType: ["EC2 Spot Instance Interruption Warning"] },
        }).addTarget(new aws_events_targets_1.SqsQueue(queue));
        new aws_events_1.Rule(cluster.stack, "rebalance-rule", {
            eventPattern: { source: ["aws.ec2"], detailType: ["EC2 Instance Rebalance Recommendation"] },
        }).addTarget(new aws_events_targets_1.SqsQueue(queue));
        new aws_events_1.Rule(cluster.stack, "inst-state-change-rule", {
            eventPattern: { source: ["aws.ec2"], detailType: ["C2 Instance State-change Notification"] },
        }).addTarget(new aws_events_targets_1.SqsQueue(queue));
        // Create and return the interruption queue policy statement
        return new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl",
                "sqs:GetQueueAttributes",
                "sqs:ReceiveMessage",
            ],
            resources: [`${queue.queueArn}`],
        });
    }
};
exports.KarpenterV1AddOn = KarpenterV1AddOn;
__decorate([
    utils.conflictsWith("ClusterAutoScalerAddOn")
], KarpenterV1AddOn.prototype, "deploy", null);
exports.KarpenterV1AddOn = KarpenterV1AddOn = __decorate([
    utils.supportsALL
], KarpenterV1AddOn);
//# sourceMappingURL=data:application/json;base64,