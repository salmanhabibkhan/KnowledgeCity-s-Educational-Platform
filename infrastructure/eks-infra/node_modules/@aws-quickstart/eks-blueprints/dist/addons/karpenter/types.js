"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RELEASE = exports.KARPENTER = void 0;
exports.KARPENTER = "karpenter";
exports.RELEASE = "blueprints-addon-karpenter";
//# sourceMappingURL=data:application/json;base64,