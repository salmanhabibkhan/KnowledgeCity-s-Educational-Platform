"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubeProxyAddOn = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const utils = require("../../utils");
const core_addon_1 = require("../core-addon");
const versionMap = new Map([
    [aws_eks_1.KubernetesVersion.V1_31, "v1.31.2-eksbuild.3"],
    [aws_eks_1.KubernetesVersion.V1_30, "v1.30.0-eksbuild.3"],
    [aws_eks_1.KubernetesVersion.V1_29, "v1.29.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_28, "v1.28.2-eksbuild.2"],
    [aws_eks_1.KubernetesVersion.V1_27, "v1.27.6-eksbuild.2"],
    [aws_eks_1.KubernetesVersion.V1_26, "v1.26.9-eksbuild.2"],
]);
const defaultProps = {
    addOnName: "kube-proxy",
    saName: "kube-proxy",
    versionMap: versionMap,
};
/**
 * Implementation of KubeProxy EKS add-on.
 */
let KubeProxyAddOn = class KubeProxyAddOn extends core_addon_1.CoreAddOn {
    deploy(clusterInfo) {
        return super.deploy(clusterInfo);
    }
    constructor(version, props) {
        super({
            version: version !== null && version !== void 0 ? version : "auto",
            ...defaultProps,
            ...props
        });
    }
};
exports.KubeProxyAddOn = KubeProxyAddOn;
__decorate([
    utils.conflictsWithAutoMode(null)
], KubeProxyAddOn.prototype, "deploy", null);
exports.KubeProxyAddOn = KubeProxyAddOn = __decorate([
    utils.supportsALL
], KubeProxyAddOn);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2t1YmUtcHJveHkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsaURBQXdEO0FBQ3hELHFDQUFxQztBQUNyQyw4Q0FBMEQ7QUFJMUQsTUFBTSxVQUFVLEdBQW1DLElBQUksR0FBRyxDQUFDO0lBQ3pELENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDO0lBQy9DLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDO0lBQy9DLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDO0lBQy9DLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDO0lBQy9DLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDO0lBQy9DLENBQUMsMkJBQWlCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDO0NBQ2hELENBQUMsQ0FBQztBQU9ILE1BQU0sWUFBWSxHQUFHO0lBQ2pCLFNBQVMsRUFBRSxZQUFZO0lBQ3ZCLE1BQU0sRUFBRSxZQUFZO0lBQ3BCLFVBQVUsRUFBRSxVQUFVO0NBQ3pCLENBQUM7QUFFRjs7R0FFRztBQUVJLElBQU0sY0FBYyxHQUFwQixNQUFNLGNBQWUsU0FBUSxzQkFBUztJQUd6QyxNQUFNLENBQUMsV0FBd0I7UUFDM0IsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxZQUFZLE9BQWdCLEVBQUUsS0FBMkI7UUFDckQsS0FBSyxDQUFDO1lBQ0YsT0FBTyxFQUFFLE9BQU8sYUFBUCxPQUFPLGNBQVAsT0FBTyxHQUFJLE1BQU07WUFDMUIsR0FBSSxZQUFZO1lBQ2hCLEdBQUksS0FBSztTQUNaLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSixDQUFBO0FBZFksd0NBQWM7QUFHdkI7SUFEQyxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDOzRDQUdqQzt5QkFMUSxjQUFjO0lBRDFCLEtBQUssQ0FBQyxXQUFXO0dBQ0wsY0FBYyxDQWMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEt1YmVybmV0ZXNWZXJzaW9uIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1la3NcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgQ29yZUFkZE9uLCBDb3JlQWRkT25Qcm9wcyB9IGZyb20gXCIuLi9jb3JlLWFkZG9uXCI7XG5pbXBvcnQgeyBDbHVzdGVySW5mbyB9IGZyb20gXCIuLi8uLi9zcGkvdHlwZXNcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5cbmNvbnN0IHZlcnNpb25NYXA6IE1hcDxLdWJlcm5ldGVzVmVyc2lvbiwgc3RyaW5nPiA9IG5ldyBNYXAoW1xuICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMzEsIFwidjEuMzEuMi1la3NidWlsZC4zXCJdLFxuICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMzAsIFwidjEuMzAuMC1la3NidWlsZC4zXCJdLFxuICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMjksIFwidjEuMjkuMC1la3NidWlsZC4xXCJdLFxuICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMjgsIFwidjEuMjguMi1la3NidWlsZC4yXCJdLFxuICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMjcsIFwidjEuMjcuNi1la3NidWlsZC4yXCJdLFxuICBbS3ViZXJuZXRlc1ZlcnNpb24uVjFfMjYsIFwidjEuMjYuOS1la3NidWlsZC4yXCJdLFxuXSk7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgY29yZWRucyBhZGQtb24uXG4gKi9cbmV4cG9ydCB0eXBlIGt1YmVQcm94eUFkZE9uUHJvcHMgPSBPbWl0PENvcmVBZGRPblByb3BzLCBcInNhTmFtZVwiIHwgXCJhZGRPbk5hbWVcIiB8IFwidmVyc2lvblwiID47XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBhZGRPbk5hbWU6IFwia3ViZS1wcm94eVwiLFxuICAgIHNhTmFtZTogXCJrdWJlLXByb3h5XCIsXG4gICAgdmVyc2lvbk1hcDogdmVyc2lvbk1hcCxcbn07XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgS3ViZVByb3h5IEVLUyBhZGQtb24uXG4gKi9cbkB1dGlscy5zdXBwb3J0c0FMTFxuZXhwb3J0IGNsYXNzIEt1YmVQcm94eUFkZE9uIGV4dGVuZHMgQ29yZUFkZE9uIHtcblxuICAgIEB1dGlscy5jb25mbGljdHNXaXRoQXV0b01vZGUobnVsbClcbiAgICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlcGxveShjbHVzdGVySW5mbyk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IodmVyc2lvbj86IHN0cmluZywgcHJvcHM/OiBrdWJlUHJveHlBZGRPblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIHZlcnNpb246IHZlcnNpb24gPz8gXCJhdXRvXCIsXG4gICAgICAgICAgICAuLi4gZGVmYXVsdFByb3BzLFxuICAgICAgICAgICAgLi4uIHByb3BzXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==