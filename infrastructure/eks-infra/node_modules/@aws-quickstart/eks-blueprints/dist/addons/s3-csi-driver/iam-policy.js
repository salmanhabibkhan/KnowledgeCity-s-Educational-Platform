"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getS3DriverPolicyStatements = getS3DriverPolicyStatements;
const iam = require("aws-cdk-lib/aws-iam");
/**
 * IAM policy to grant access to S3 buckets and, optionally, KMS keys
 * https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md#iam-permissions
 */
function getS3DriverPolicyStatements(bucketNames, kmsArns) {
    const arns = bucketNames.map((name) => `arn:aws:s3:::${name}`);
    const bucketPolicy = [
        new iam.PolicyStatement({
            sid: 'S3MountpointFullBucketAccess',
            actions: [
                "s3:ListBucket"
            ],
            resources: arns
        }),
        new iam.PolicyStatement({
            sid: 'S3MountpointFullObjectAccess',
            actions: [
                "s3:GetObject",
                "s3:PutObject",
                "s3:AbortMultipartUpload",
                "s3:DeleteObject"
            ],
            resources: arns.map((arn) => `${arn}/*`)
        }),
    ];
    const kmsPolicy = kmsArns.length > 0 ? [
        new iam.PolicyStatement({
            sid: "S3MountpointKmsAccess",
            actions: [
                "kms:Decrypt",
                "kms:GenerateDataKey"
            ],
            resources: kmsArns
        })
    ] : [];
    return [...bucketPolicy, ...kmsPolicy];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWFtLXBvbGljeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGRvbnMvczMtY3NpLWRyaXZlci9pYW0tcG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsa0VBZ0NDO0FBdENELDJDQUEyQztBQUUzQzs7O0dBR0c7QUFDSCxTQUFnQiwyQkFBMkIsQ0FBQyxXQUFxQixFQUFFLE9BQWlCO0lBQ2hGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sWUFBWSxHQUFHO1FBQ2pCLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUNwQixHQUFHLEVBQUUsOEJBQThCO1lBQ25DLE9BQU8sRUFBRTtnQkFDTCxlQUFlO2FBQ2xCO1lBQ0QsU0FBUyxFQUFFLElBQUk7U0FDbEIsQ0FBQztRQUNGLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUNwQixHQUFHLEVBQUUsOEJBQThCO1lBQ25DLE9BQU8sRUFBRTtnQkFDTCxjQUFjO2dCQUNkLGNBQWM7Z0JBQ2QseUJBQXlCO2dCQUN6QixpQkFBaUI7YUFDcEI7WUFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztTQUMzQyxDQUFDO0tBQ0wsQ0FBQztJQUNGLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7WUFDcEIsR0FBRyxFQUFFLHVCQUF1QjtZQUM1QixPQUFPLEVBQUU7Z0JBQ0wsYUFBYTtnQkFDYixxQkFBcUI7YUFDeEI7WUFDRCxTQUFTLEVBQUUsT0FBTztTQUNyQixDQUFDO0tBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRWIsT0FBTyxDQUFDLEdBQUcsWUFBWSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDM0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcblxuLyoqXG4gKiBJQU0gcG9saWN5IHRvIGdyYW50IGFjY2VzcyB0byBTMyBidWNrZXRzIGFuZCwgb3B0aW9uYWxseSwgS01TIGtleXNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3NsYWJzL21vdW50cG9pbnQtczMvYmxvYi9tYWluL2RvYy9DT05GSUdVUkFUSU9OLm1kI2lhbS1wZXJtaXNzaW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UzNEcml2ZXJQb2xpY3lTdGF0ZW1lbnRzKGJ1Y2tldE5hbWVzOiBzdHJpbmdbXSwga21zQXJuczogc3RyaW5nW10pOiBpYW0uUG9saWN5U3RhdGVtZW50W10ge1xuICAgIGNvbnN0IGFybnMgPSBidWNrZXROYW1lcy5tYXAoKG5hbWUpID0+IGBhcm46YXdzOnMzOjo6JHtuYW1lfWApO1xuICAgIGNvbnN0IGJ1Y2tldFBvbGljeSA9IFtcbiAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgc2lkOiAnUzNNb3VudHBvaW50RnVsbEJ1Y2tldEFjY2VzcycsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgXCJzMzpMaXN0QnVja2V0XCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZXNvdXJjZXM6IGFybnNcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgIHNpZDogJ1MzTW91bnRwb2ludEZ1bGxPYmplY3RBY2Nlc3MnLFxuICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAgIFwiczM6R2V0T2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgXCJzMzpQdXRPYmplY3RcIixcbiAgICAgICAgICAgICAgICBcInMzOkFib3J0TXVsdGlwYXJ0VXBsb2FkXCIsXG4gICAgICAgICAgICAgICAgXCJzMzpEZWxldGVPYmplY3RcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHJlc291cmNlczogYXJucy5tYXAoKGFybikgPT4gYCR7YXJufS8qYClcbiAgICAgICAgfSksXG4gICAgXTtcbiAgICBjb25zdCBrbXNQb2xpY3kgPSBrbXNBcm5zLmxlbmd0aCA+IDAgPyBbXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgIHNpZDogXCJTM01vdW50cG9pbnRLbXNBY2Nlc3NcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICBcImttczpEZWNyeXB0XCIsXG4gICAgICAgICAgICAgICAgXCJrbXM6R2VuZXJhdGVEYXRhS2V5XCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZXNvdXJjZXM6IGttc0FybnNcbiAgICAgICAgfSldIDogW107XG5cbiAgICByZXR1cm4gWy4uLmJ1Y2tldFBvbGljeSwgLi4ua21zUG9saWN5XTtcbn1cbiJdfQ==