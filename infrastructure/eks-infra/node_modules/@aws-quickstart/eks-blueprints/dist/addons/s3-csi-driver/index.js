"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3CSIDriverAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const iam = require("aws-cdk-lib/aws-iam");
const utils_1 = require("../../utils");
const iam_policy_1 = require("./iam-policy");
const S3_CSI_DRIVER_SA = 's3-csi-driver-sa';
const S3_CSI_DRIVER = "aws-mountpoint-s3-csi-driver";
const S3_CSI_DRIVER_RELEASE = 's3-csi-driver-release';
const S3_DRIVER_POLICY = 's3-csi-driver-policy';
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    chart: S3_CSI_DRIVER,
    name: S3_CSI_DRIVER,
    namespace: "kube-system",
    release: S3_CSI_DRIVER_RELEASE,
    version: "v1.14.1",
    repository: "https://awslabs.github.io/mountpoint-s3-csi-driver",
    createNamespace: false,
    bucketNames: [],
    kmsArns: []
};
let S3CSIDriverAddOn = class S3CSIDriverAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        // Create service account and policy
        const cluster = clusterInfo.cluster;
        const serviceAccount = cluster.addServiceAccount(S3_CSI_DRIVER_SA, {
            name: S3_CSI_DRIVER_SA,
            namespace: this.options.namespace,
        });
        const s3BucketPolicy = new iam.Policy(cluster, S3_DRIVER_POLICY, {
            statements: (0, iam_policy_1.getS3DriverPolicyStatements)(this.options.bucketNames, (_a = this.options.kmsArns) !== null && _a !== void 0 ? _a : [])
        });
        serviceAccount.role.attachInlinePolicy(s3BucketPolicy);
        // Create namespace
        if (this.options.createNamespace) {
            const ns = (0, utils_1.createNamespace)(this.options.namespace, cluster, true);
            serviceAccount.node.addDependency(ns);
        }
        // setup value for helm chart
        const chartValues = populateValues(this.options);
        const s3CsiDriverChart = this.addHelmChart(clusterInfo, chartValues, true, true);
        s3CsiDriverChart.node.addDependency(serviceAccount);
        return Promise.resolve(s3CsiDriverChart);
    }
};
exports.S3CSIDriverAddOn = S3CSIDriverAddOn;
exports.S3CSIDriverAddOn = S3CSIDriverAddOn = __decorate([
    utils_1.supportsALL
], S3CSIDriverAddOn);
function populateValues(helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, 'node.serviceAccount.create', false);
    (0, utils_1.setPath)(values, 'node.tolerateAllTaints', true);
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL3MzLWNzaS1kcml2ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUEsOENBQThEO0FBQzlELDJDQUEyQztBQUMzQyx1Q0FBb0U7QUFDcEUsNkNBQTJEO0FBRTNELE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDNUMsTUFBTSxhQUFhLEdBQUcsOEJBQThCLENBQUM7QUFFckQsTUFBTSxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQztBQUN0RCxNQUFNLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDO0FBb0JoRDs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUErQztJQUMvRCxLQUFLLEVBQUUsYUFBYTtJQUNwQixJQUFJLEVBQUUsYUFBYTtJQUNuQixTQUFTLEVBQUUsYUFBYTtJQUN4QixPQUFPLEVBQUUscUJBQXFCO0lBQzlCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFVBQVUsRUFBRSxvREFBb0Q7SUFDaEUsZUFBZSxFQUFFLEtBQUs7SUFDdEIsV0FBVyxFQUFFLEVBQUU7SUFDZixPQUFPLEVBQUUsRUFBRTtDQUNaLENBQUM7QUFHSyxJQUFNLGdCQUFnQixHQUF0QixNQUFNLGdCQUFpQixTQUFRLHNCQUFTO0lBSTNDLFlBQVksS0FBNEI7UUFDcEMsS0FBSyxDQUFDLEVBQUUsR0FBRyxZQUFtQixFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUE4QixDQUFDO0lBQ3ZELENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7O1FBQzNCLG9DQUFvQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3BDLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRTtZQUMvRCxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRTtZQUM3RCxVQUFVLEVBQ04sSUFBQSx3Q0FBMkIsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxtQ0FBSSxFQUFFLENBQUM7U0FDeEYsQ0FBQyxDQUFDO1FBQ0gsY0FBYyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV2RCxtQkFBbUI7UUFDbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUEsdUJBQWUsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkUsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELDZCQUE2QjtRQUM3QixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWpELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDSixDQUFBO0FBcENZLDRDQUFnQjsyQkFBaEIsZ0JBQWdCO0lBRDVCLG1CQUFXO0dBQ0MsZ0JBQWdCLENBb0M1QjtBQUVELFNBQVMsY0FBYyxDQUFDLFdBQWtDOztJQUN0RCxNQUFNLE1BQU0sR0FBRyxNQUFBLFdBQVcsQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBQztJQUN4QyxJQUFBLGVBQU8sRUFBQyxNQUFNLEVBQUUsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckQsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLHdCQUF3QixFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQ2x1c3RlckluZm8gfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBjcmVhdGVOYW1lc3BhY2UsIHNldFBhdGgsIHN1cHBvcnRzQUxMIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyBnZXRTM0RyaXZlclBvbGljeVN0YXRlbWVudHMgfSBmcm9tIFwiLi9pYW0tcG9saWN5XCI7XG5cbmNvbnN0IFMzX0NTSV9EUklWRVJfU0EgPSAnczMtY3NpLWRyaXZlci1zYSc7XG5jb25zdCBTM19DU0lfRFJJVkVSID0gXCJhd3MtbW91bnRwb2ludC1zMy1jc2ktZHJpdmVyXCI7XG5cbmNvbnN0IFMzX0NTSV9EUklWRVJfUkVMRUFTRSA9ICdzMy1jc2ktZHJpdmVyLXJlbGVhc2UnO1xuY29uc3QgUzNfRFJJVkVSX1BPTElDWSA9ICdzMy1jc2ktZHJpdmVyLXBvbGljeSc7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgYWRkLW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFMzQ1NJRHJpdmVyQWRkT25Qcm9wcyBleHRlbmRzIEhlbG1BZGRPblVzZXJQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWVzIG9mIHRoZSBTMyBidWNrZXRzIHRvIGJlIHVzZWQgYnkgdGhlIGRyaXZlclxuICAgICAqL1xuICAgIGJ1Y2tldE5hbWVzOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgQVJOcyBvZiBLTVMgS2V5cyB0byBiZSB1c2VkIGJ5IHRoZSBkcml2ZXIuICBSZXF1aXJlZCBpZiB5b3UgYXJlIHVzaW5nIEN1c3RvbWVyIE1hbmFnZWQgS2V5cyBmb3IgUzNcbiAgICAgKi9cbiAgICBrbXNBcm5zPzogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIE5hbWVzcGFjZSB3aXRoIHRoZSBwcm92aWRlZCBvbmUgKHdpbGwgbm90IGlmIG5hbWVzcGFjZSBpcyBrdWJlLXN5c3RlbSlcbiAgICAgKi9cbiAgICBjcmVhdGVOYW1lc3BhY2U/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIERlZmF1bHRzIG9wdGlvbnMgZm9yIHRoZSBhZGQtb25cbiAqL1xuY29uc3QgZGVmYXVsdFByb3BzOiBIZWxtQWRkT25Vc2VyUHJvcHMgJiBTM0NTSURyaXZlckFkZE9uUHJvcHMgPSB7XG4gIGNoYXJ0OiBTM19DU0lfRFJJVkVSLFxuICBuYW1lOiBTM19DU0lfRFJJVkVSLFxuICBuYW1lc3BhY2U6IFwia3ViZS1zeXN0ZW1cIixcbiAgcmVsZWFzZTogUzNfQ1NJX0RSSVZFUl9SRUxFQVNFLFxuICB2ZXJzaW9uOiBcInYxLjE0LjFcIixcbiAgcmVwb3NpdG9yeTogXCJodHRwczovL2F3c2xhYnMuZ2l0aHViLmlvL21vdW50cG9pbnQtczMtY3NpLWRyaXZlclwiLFxuICBjcmVhdGVOYW1lc3BhY2U6IGZhbHNlLFxuICBidWNrZXROYW1lczogW10sXG4gIGttc0FybnM6IFtdXG59O1xuXG5Ac3VwcG9ydHNBTExcbmV4cG9ydCBjbGFzcyBTM0NTSURyaXZlckFkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcblxuICAgIHJlYWRvbmx5IG9wdGlvbnM6IFMzQ1NJRHJpdmVyQWRkT25Qcm9wcztcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBTM0NTSURyaXZlckFkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoeyAuLi5kZWZhdWx0UHJvcHMgYXMgYW55LCAuLi5wcm9wcyB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wcm9wcyBhcyBTM0NTSURyaXZlckFkZE9uUHJvcHM7XG4gICAgfVxuXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgICAgIC8vIENyZWF0ZSBzZXJ2aWNlIGFjY291bnQgYW5kIHBvbGljeVxuICAgICAgICBjb25zdCBjbHVzdGVyID0gY2x1c3RlckluZm8uY2x1c3RlcjtcbiAgICAgICAgY29uc3Qgc2VydmljZUFjY291bnQgPSBjbHVzdGVyLmFkZFNlcnZpY2VBY2NvdW50KFMzX0NTSV9EUklWRVJfU0EsIHtcbiAgICAgICAgICAgIG5hbWU6IFMzX0NTSV9EUklWRVJfU0EsXG4gICAgICAgICAgICBuYW1lc3BhY2U6IHRoaXMub3B0aW9ucy5uYW1lc3BhY2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHMzQnVja2V0UG9saWN5ID0gbmV3IGlhbS5Qb2xpY3koY2x1c3RlciwgUzNfRFJJVkVSX1BPTElDWSwge1xuICAgICAgICAgICAgc3RhdGVtZW50czpcbiAgICAgICAgICAgICAgICBnZXRTM0RyaXZlclBvbGljeVN0YXRlbWVudHModGhpcy5vcHRpb25zLmJ1Y2tldE5hbWVzLCB0aGlzLm9wdGlvbnMua21zQXJucyA/PyBbXSlcbiAgICAgICAgfSk7XG4gICAgICAgIHNlcnZpY2VBY2NvdW50LnJvbGUuYXR0YWNoSW5saW5lUG9saWN5KHMzQnVja2V0UG9saWN5KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBuYW1lc3BhY2VcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jcmVhdGVOYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IG5zID0gY3JlYXRlTmFtZXNwYWNlKHRoaXMub3B0aW9ucy5uYW1lc3BhY2UhLCBjbHVzdGVyLCB0cnVlKTtcbiAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50Lm5vZGUuYWRkRGVwZW5kZW5jeShucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXR1cCB2YWx1ZSBmb3IgaGVsbSBjaGFydFxuICAgICAgICBjb25zdCBjaGFydFZhbHVlcyA9IHBvcHVsYXRlVmFsdWVzKHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgY29uc3QgczNDc2lEcml2ZXJDaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCBjaGFydFZhbHVlcywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHMzQ3NpRHJpdmVyQ2hhcnQubm9kZS5hZGREZXBlbmRlbmN5KHNlcnZpY2VBY2NvdW50KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzM0NzaURyaXZlckNoYXJ0KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBvcHVsYXRlVmFsdWVzKGhlbG1PcHRpb25zOiBTM0NTSURyaXZlckFkZE9uUHJvcHMpOiBhbnkge1xuICAgIGNvbnN0IHZhbHVlcyA9IGhlbG1PcHRpb25zLnZhbHVlcyA/PyB7fTtcbiAgICBzZXRQYXRoKHZhbHVlcywgJ25vZGUuc2VydmljZUFjY291bnQuY3JlYXRlJywgZmFsc2UpO1xuICAgIHNldFBhdGgodmFsdWVzLCAnbm9kZS50b2xlcmF0ZUFsbFRhaW50cycsIHRydWUpO1xuICAgIHJldHVybiB2YWx1ZXM7XG59XG4iXX0=