"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcCniAddOn = void 0;
const utils_1 = require("../../utils");
const core_addon_1 = require("../core-addon");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const versionMap = new Map([
    [aws_eks_1.KubernetesVersion.V1_32, "v1.19.2-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_31, "v1.19.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_30, "v1.19.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_29, "v1.19.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_28, "v1.19.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_27, "v1.19.0-eksbuild.1"],
    [aws_eks_1.KubernetesVersion.V1_26, "v1.19.0-eksbuild.1"],
]);
const defaultProps = {
    addOnName: 'vpc-cni',
    version: 'auto',
    versionMap: versionMap,
    saName: 'aws-node',
    namespace: 'kube-system',
    controlPlaneAddOn: false,
    configurationValues: {}
};
/**
 * Implementation of VpcCni EKS add-on with Advanced Configurations.
 */
let VpcCniAddOn = class VpcCniAddOn extends core_addon_1.CoreAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.vpcCniAddOnProps = { ...defaultProps, ...props };
        this.coreAddOnProps.configurationValues = populateVpcCniConfigurationValues(props);
    }
    deploy(clusterInfo) {
        var _a, _b;
        const cluster = clusterInfo.cluster;
        let securityGroupId = cluster.clusterSecurityGroupId;
        if ((_a = this.vpcCniAddOnProps.customNetworkingConfig) === null || _a === void 0 ? void 0 : _a.securityGroup) {
            securityGroupId = this.vpcCniAddOnProps.customNetworkingConfig.securityGroup.securityGroupId;
        }
        if (((_b = this.vpcCniAddOnProps.customNetworkingConfig) === null || _b === void 0 ? void 0 : _b.subnets)) {
            for (let subnet of this.vpcCniAddOnProps.customNetworkingConfig.subnets) {
                const doc = (0, utils_1.readYamlDocument)(__dirname + '/eniConfig.ytpl');
                const manifest = doc.split("---").map(e => (0, utils_1.loadYaml)(e));
                const values = {
                    availabilityZone: subnet.availabilityZone,
                    securityGroupId: securityGroupId,
                    subnetId: subnet.subnetId
                };
                const manifestDeployment = {
                    name: "EniCustomConfig" + subnet,
                    namespace: this.coreAddOnProps.namespace,
                    manifest,
                    values,
                };
                const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
                kubectlProvider.addManifest(manifestDeployment);
            }
        }
        const addOnPromise = super.deploy(clusterInfo);
        return addOnPromise;
    }
    /**
     * Overrides the core method to provide managed policies.
     * @param _clusterInfo
     * @returns
     */
    provideManagedPolicies(_clusterInfo) {
        return this.vpcCniAddOnProps.serviceAccountPolicies;
    }
    /**
     * Overrides the core addon method in order to replace the SA if exists (which is the case for aws-node).
     * @param clusterInfo
     * @param saNamespace
     * @param policies
     * @returns
     */
    createServiceAccount(clusterInfo, saNamespace, policies) {
        const sa = new utils_1.ReplaceServiceAccount(clusterInfo.cluster, `${this.coreAddOnProps.saName}-sa`, {
            cluster: clusterInfo.cluster,
            name: this.coreAddOnProps.saName,
            namespace: saNamespace
        });
        policies.forEach(p => sa.role.addManagedPolicy(p));
        return sa;
    }
};
exports.VpcCniAddOn = VpcCniAddOn;
__decorate([
    (0, utils_1.conflictsWithAutoMode)("v1.19.0-eksbuild.1")
], VpcCniAddOn.prototype, "deploy", null);
exports.VpcCniAddOn = VpcCniAddOn = __decorate([
    utils_1.supportsALL
], VpcCniAddOn);
/**
 * Iterates over all Values including nested child objects and removes undefined entries
 */
function RemoveUndefined(helmValues) {
    Object.keys(helmValues).forEach(key => {
        if (helmValues[key] === undefined) {
            delete helmValues[key];
        }
        else if (typeof helmValues[key] === 'object') {
            RemoveUndefined(helmValues[key]);
        }
    });
}
function populateVpcCniConfigurationValues(props) {
    if (props === null) {
        return {};
    }
    const result = {
        init: {
            env: {
                DISABLE_TCP_EARLY_DEMUX: JSON.stringify(props === null || props === void 0 ? void 0 : props.disableTcpEarlyDemux), // format: boolean, type: string
                ENABLE_V6_EGRESS: JSON.stringify(props === null || props === void 0 ? void 0 : props.enableV6Egress), // format: boolean, type: string
            }
        },
        env: {
            AWS_EC2_ENDPOINT: props === null || props === void 0 ? void 0 : props.awsEc2Endpoint, // type: string
            ADDITIONAL_ENI_TAGS: props === null || props === void 0 ? void 0 : props.additionalEniTags, // type: string
            ANNOTATE_POD_IP: JSON.stringify(props === null || props === void 0 ? void 0 : props.annotatePodIp), // format: boolean, type: string
            AWS_EXTERNAL_SERVICE_CIDR: props === null || props === void 0 ? void 0 : props.awsExternalServiceCidrs, // type: string
            AWS_MANAGE_ENIS_NON_SCHEDULABLE: JSON.stringify(props === null || props === void 0 ? void 0 : props.awsManageEnisNonSchedulable), // format: boolean, type: string
            AWS_VPC_CNI_NODE_PORT_SUPPORT: JSON.stringify(props === null || props === void 0 ? void 0 : props.awsVpcCniNodePortSupport), // format: boolean, type: string
            AWS_VPC_ENI_MTU: JSON.stringify(props === null || props === void 0 ? void 0 : props.awsVpcEniMtu), // format: integer, type: string
            AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG: JSON.stringify(props === null || props === void 0 ? void 0 : props.awsVpcK8sCniCustomNetworkCfg), // format: boolean, type: string
            AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRS: props === null || props === void 0 ? void 0 : props.awsVpcK8sExcludeSnatCidrs, // type: string
            ENI_CONFIG_LABEL_DEF: props === null || props === void 0 ? void 0 : props.eniConfigLabelDef, // type: string
            ENI_CONFIG_ANNOTATION_DEF: props === null || props === void 0 ? void 0 : props.eniConfigAnnotationDef, // type: string
            AWS_VPC_K8S_CNI_EXTERNALSNAT: JSON.stringify(props === null || props === void 0 ? void 0 : props.awsVpcK8sCniExternalSnat), // format: boolean, type: string
            AWS_VPC_K8S_CNI_LOGLEVEL: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniLogLevel, // type: string
            AWS_VPC_K8S_CNI_LOG_FILE: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniLogFile, // type: string
            AWS_VPC_K8S_CNI_RANDOMIZESNAT: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniRandomizeSnat, // type: string
            AWS_VPC_K8S_CNI_VETHPREFIX: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniVethPrefix, // type: string
            AWS_VPC_K8S_PLUGIN_LOG_FILE: props === null || props === void 0 ? void 0 : props.awsVpcK8sPluginLogFile, // type: string
            AWS_VPC_K8S_PLUGIN_LOG_LEVEL: props === null || props === void 0 ? void 0 : props.awsVpcK8sPluginLogLevel, // type: string
            CLUSTER_ENDPOINT: props === null || props === void 0 ? void 0 : props.clusterEndpoint, // type: string
            DISABLE_LEAKED_ENI_CLEANUP: JSON.stringify(props === null || props === void 0 ? void 0 : props.disableLeakedEniCleanup), // format: boolean, type: string
            DISABLE_INTROSPECTION: JSON.stringify(props === null || props === void 0 ? void 0 : props.disableIntrospection), // format: boolean, type: string
            DISABLE_METRICS: JSON.stringify(props === null || props === void 0 ? void 0 : props.disableMetrics), // format: boolean, type: string
            DISABLE_NETWORK_RESOURCE_PROVISIONING: JSON.stringify(props === null || props === void 0 ? void 0 : props.disablenetworkResourceProvisioning), // format: boolean, type: string
            ENABLE_BANDWIDTH_PLUGIN: JSON.stringify(props === null || props === void 0 ? void 0 : props.enableBandwidthPlugin), // format: boolean, type: string
            ENABLE_NFTABLES: JSON.stringify(props === null || props === void 0 ? void 0 : props.enableNftables), // format: boolean, type: string
            ENABLE_POD_ENI: JSON.stringify(props === null || props === void 0 ? void 0 : props.enablePodEni), // format: boolean, type: string
            ENABLE_PREFIX_DELEGATION: JSON.stringify(props === null || props === void 0 ? void 0 : props.enablePrefixDelegation), // format: boolean, type: string
            INTROSPECTION_BIND_ADDRESS: props === null || props === void 0 ? void 0 : props.introspectionBindAddress, // type: string
            MAX_ENI: JSON.stringify(props === null || props === void 0 ? void 0 : props.maxEni), // format: integer, type: string
            MINIMUM_IP_TARGET: JSON.stringify(props === null || props === void 0 ? void 0 : props.minimumIpTarget), // format: integer, type: string
            POD_SECURITY_GROUP_ENFORCING_MODE: props === null || props === void 0 ? void 0 : props.podSecurityGroupEnforcingMode, // type: string
            WARM_ENI_TARGET: JSON.stringify(props === null || props === void 0 ? void 0 : props.warmEniTarget), // format: integer, type: string
            WARM_IP_TARGET: JSON.stringify(props === null || props === void 0 ? void 0 : props.warmIpTarget), // format: integer, type: string
            WARM_PREFIX_TARGET: JSON.stringify(props === null || props === void 0 ? void 0 : props.warmPrefixTarget), // format: integer, type: string
        },
        enableNetworkPolicy: JSON.stringify(props === null || props === void 0 ? void 0 : props.enableNetworkPolicy), // format: boolean, type: string
        enableWindowsIpam: JSON.stringify(props === null || props === void 0 ? void 0 : props.enableWindowsIpam), // format: boolean, type: string
        enableWindowsPrefixDelegation: JSON.stringify(props === null || props === void 0 ? void 0 : props.enableWindowsPrefixDelegation), // format: boolean, type: string
        warmWindowsPrefixTarget: props === null || props === void 0 ? void 0 : props.warmWindowsPrefixTarget, // type: integer
        warmWindowsIPTarget: props === null || props === void 0 ? void 0 : props.warmWindowsIPTarget, // type: integer
        minimumWindowsIPTarget: props === null || props === void 0 ? void 0 : props.minimumWindowsIPTarget, // type: integer
        branchENICooldown: props === null || props === void 0 ? void 0 : props.branchENICooldown, // type: integer
    };
    RemoveUndefined(result);
    return result;
}
//# sourceMappingURL=data:application/json;base64,