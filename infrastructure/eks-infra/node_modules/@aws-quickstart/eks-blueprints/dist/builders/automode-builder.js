"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutomodeBuilder = void 0;
const cluster_providers_1 = require("../cluster-providers");
const eks = require("aws-cdk-lib/aws-eks");
const ts_deepmerge_1 = require("ts-deepmerge");
const stacks_1 = require("../stacks");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const addons = require("../addons");
const utils = require("../utils");
const defaultOptions = {
    version: eks.KubernetesVersion.V1_31,
    nodePools: ['system', 'general-purpose']
};
class AutomodeBuilder extends stacks_1.BlueprintBuilder {
    static builder(options) {
        const builder = new AutomodeBuilder();
        const mergedOptions = (0, ts_deepmerge_1.merge)(defaultOptions, options);
        builder
            .clusterProvider(new cluster_providers_1.AutomodeClusterProvider(mergedOptions))
            .addOns(new addons.NestedStackAddOn({
            id: "usage-tracking-addon",
            builder: UsageTrackingAddOn.builder(),
        }));
        return builder;
    }
}
exports.AutomodeBuilder = AutomodeBuilder;
/**
 * Nested stack that is used as tracker for GPU Accelerator
 */
class UsageTrackingAddOn extends aws_cdk_lib_1.NestedStack {
    static builder() {
        return {
            build(scope, id, props) {
                return new UsageTrackingAddOn(scope, id, props);
            }
        };
    }
    constructor(scope, id, props) {
        super(scope, id, utils.withUsageTracking(UsageTrackingAddOn.USAGE_ID, props));
    }
}
UsageTrackingAddOn.USAGE_ID = "SOME_VALUE";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b21vZGUtYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9idWlsZGVycy9hdXRvbW9kZS1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDREQUE2RjtBQUM3RiwyQ0FBMkM7QUFDM0MsK0NBQXFDO0FBQ3JDLHNDQUE2QztBQUM3Qyw2Q0FBNEQ7QUFDNUQsb0NBQW9DO0FBRXBDLGtDQUFrQztBQUdsQyxNQUFNLGNBQWMsR0FBMEM7SUFDMUQsT0FBTyxFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLO0lBQ3BDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBQyxpQkFBaUIsQ0FBQztDQUMxQyxDQUFDO0FBRUYsTUFBYSxlQUFnQixTQUFRLHlCQUFnQjtJQUUxQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQThDO1FBQ2hFLE1BQU0sT0FBTyxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7UUFDdEMsTUFBTSxhQUFhLEdBQUcsSUFBQSxvQkFBSyxFQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVyRCxPQUFPO2FBQ0YsZUFBZSxDQUFDLElBQUksMkNBQXVCLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDM0QsTUFBTSxDQUNILElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQ3hCLEVBQUUsRUFBRSxzQkFBc0I7WUFDMUIsT0FBTyxFQUFFLGtCQUFrQixDQUFDLE9BQU8sRUFBRTtTQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVaLE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7Q0FDSjtBQWhCRCwwQ0FnQkM7QUFFRDs7R0FFRztBQUNILE1BQU0sa0JBQW1CLFNBQVEseUJBQVc7SUFJakMsTUFBTSxDQUFDLE9BQU87UUFDakIsT0FBTztZQUNILEtBQUssQ0FBQyxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF1QjtnQkFDdkQsT0FBTyxJQUFJLGtCQUFrQixDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDcEQsQ0FBQztTQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF1QjtRQUM3RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQzs7QUFaZSwyQkFBUSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF1dG9tb2RlQ2x1c3RlclByb3ZpZGVyLCBBdXRvbW9kZUNsdXN0ZXJQcm92aWRlclByb3BzIH0gZnJvbSBcIi4uL2NsdXN0ZXItcHJvdmlkZXJzXCI7XG5pbXBvcnQgKiBhcyBla3MgZnJvbSBcImF3cy1jZGstbGliL2F3cy1la3NcIjtcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcInRzLWRlZXBtZXJnZVwiO1xuaW1wb3J0IHsgQmx1ZXByaW50QnVpbGRlciB9IGZyb20gXCIuLi9zdGFja3NcIjtcbmltcG9ydCB7IE5lc3RlZFN0YWNrLCBOZXN0ZWRTdGFja1Byb3BzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgKiBhcyBhZGRvbnMgZnJvbSAnLi4vYWRkb25zJztcbmltcG9ydCAqIGFzIHNwaSBmcm9tICcuLi9zcGknO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFBhcnRpYWw8QXV0b21vZGVDbHVzdGVyUHJvdmlkZXJQcm9wcz4gPSB7XG4gICAgdmVyc2lvbjogZWtzLkt1YmVybmV0ZXNWZXJzaW9uLlYxXzMxLFxuICAgIG5vZGVQb29sczogWydzeXN0ZW0nLCdnZW5lcmFsLXB1cnBvc2UnXVxufTtcblxuZXhwb3J0IGNsYXNzIEF1dG9tb2RlQnVpbGRlciBleHRlbmRzIEJsdWVwcmludEJ1aWxkZXIge1xuXG4gICAgcHVibGljIHN0YXRpYyBidWlsZGVyKG9wdGlvbnM6IFBhcnRpYWw8QXV0b21vZGVDbHVzdGVyUHJvdmlkZXJQcm9wcz4pOiBBdXRvbW9kZUJ1aWxkZXIge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IEF1dG9tb2RlQnVpbGRlcigpO1xuICAgICAgICBjb25zdCBtZXJnZWRPcHRpb25zID0gbWVyZ2UoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGJ1aWxkZXJcbiAgICAgICAgICAgIC5jbHVzdGVyUHJvdmlkZXIobmV3IEF1dG9tb2RlQ2x1c3RlclByb3ZpZGVyKG1lcmdlZE9wdGlvbnMpKVxuICAgICAgICAgICAgLmFkZE9ucyhcbiAgICAgICAgICAgICAgICBuZXcgYWRkb25zLk5lc3RlZFN0YWNrQWRkT24oe1xuICAgICAgICAgICAgICAgICAgICBpZDogXCJ1c2FnZS10cmFja2luZy1hZGRvblwiLFxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiBVc2FnZVRyYWNraW5nQWRkT24uYnVpbGRlcigpLFxuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gYnVpbGRlcjsgXG4gICAgfVxufVxuXG4vKipcbiAqIE5lc3RlZCBzdGFjayB0aGF0IGlzIHVzZWQgYXMgdHJhY2tlciBmb3IgR1BVIEFjY2VsZXJhdG9yXG4gKi9cbmNsYXNzIFVzYWdlVHJhY2tpbmdBZGRPbiBleHRlbmRzIE5lc3RlZFN0YWNrIHtcblxuICAgIHN0YXRpYyByZWFkb25seSBVU0FHRV9JRCA9IFwiU09NRV9WQUxVRVwiO1xuXG4gICAgcHVibGljIHN0YXRpYyBidWlsZGVyKCk6IHNwaS5OZXN0ZWRTdGFja0J1aWxkZXIge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYnVpbGQoc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5lc3RlZFN0YWNrUHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVzYWdlVHJhY2tpbmdBZGRPbihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmVzdGVkU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHV0aWxzLndpdGhVc2FnZVRyYWNraW5nKFVzYWdlVHJhY2tpbmdBZGRPbi5VU0FHRV9JRCwgcHJvcHMpKTtcbiAgICB9XG59XG5cbiJdfQ==