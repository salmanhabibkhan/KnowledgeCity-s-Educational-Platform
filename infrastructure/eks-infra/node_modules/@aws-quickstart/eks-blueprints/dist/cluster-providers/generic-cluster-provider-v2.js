"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericClusterProviderV2 = exports.ClusterBuilderV2 = exports.defaultOptionsv2 = exports.GenericClusterPropsV2Constraints = exports.ComputeConfigConstraints = void 0;
exports.clusterBuilderv2 = clusterBuilderv2;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const autoscaling = require("aws-cdk-lib/aws-autoscaling");
const ec2 = require("aws-cdk-lib/aws-ec2");
const eks = require("@aws-cdk/aws-eks-v2-alpha");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const spi_1 = require("../spi");
const utils = require("../utils");
const constants = require("./constants");
const assert = require("assert");
const generic_cluster_provider_1 = require("./generic-cluster-provider");
function clusterBuilderv2() {
    return new ClusterBuilderV2();
}
class ComputeConfigConstraints {
    constructor() {
        this.nodePools = new utils.ArrayConstraint(0, 2);
    }
}
exports.ComputeConfigConstraints = ComputeConfigConstraints;
class GenericClusterPropsV2Constraints {
    constructor() {
        /**
        * managedNodeGroups per cluster have a soft limit of 30 managed node groups per EKS cluster, and as little as 0. But we multiply that
        * by a factor of 5 to 150 in case of situations of a hard limit request being accepted, and as a result the limit would be raised.
        * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
        */
        this.managedNodeGroups = new utils.ArrayConstraint(0, 150);
        /**
        * autoscalingNodeGroups per cluster have a soft limit of 500 autoscaling node groups per EKS cluster, and as little as 0. But we multiply that
        * by a factor of 5 to 2500 in case of situations of a hard limit request being accepted, and as a result the limit would be raised.
        * https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html
        */
        this.autoscalingNodeGroups = new utils.ArrayConstraint(0, 5000);
    }
}
exports.GenericClusterPropsV2Constraints = GenericClusterPropsV2Constraints;
exports.defaultOptionsv2 = {};
class ClusterBuilderV2 {
    constructor() {
        this.props = {};
        this.privateCluster = false;
        this.managedNodeGroups = [];
        this.autoscalingNodeGroups = [];
        this.fargateProfiles = {};
        this.props = { ...this.props };
    }
    withCommonOptions(options) {
        this.props = { ...this.props, ...options };
        return this;
    }
    managedNodeGroup(...nodeGroups) {
        this.managedNodeGroups = this.managedNodeGroups.concat(nodeGroups);
        return this;
    }
    autoscalingGroup(...nodeGroups) {
        this.autoscalingNodeGroups = this.autoscalingNodeGroups.concat(nodeGroups);
        return this;
    }
    computeConfig(config) {
        this.compute = config;
        return this;
    }
    fargateProfile(name, options) {
        this.fargateProfiles[name] = options;
        return this;
    }
    version(version) {
        this.props = { ...this.props, version };
        return this;
    }
    build() {
        return new GenericClusterProviderV2({
            ...this.props,
            privateCluster: this.privateCluster,
            managedNodeGroups: this.managedNodeGroups,
            autoscalingNodeGroups: this.autoscalingNodeGroups,
            compute: this.compute,
            fargateProfiles: this.fargateProfiles
        });
    }
}
exports.ClusterBuilderV2 = ClusterBuilderV2;
/**
 * Cluster provider implementation that supports multiple node groups.
 */
class GenericClusterProviderV2 {
    constructor(props) {
        this.props = props;
        this.validateInput(props);
        const computeTypesEnabled = [
            props.managedNodeGroups && props.managedNodeGroups.length > 0,
            props.autoscalingNodeGroups && props.autoscalingNodeGroups.length > 0,
            props.compute != undefined
        ].filter(Boolean).length;
        // Assert that only one compute type is enabled
        assert(computeTypesEnabled <= 1, 'Only one compute type can be enabled: managed node groups, autoscaling node groups, or automode configuration.  Mixing these is not supported. Please file a request on GitHub to add this support if needed.');
    }
    /**
     * @override
     */
    createCluster(scope, vpc, secretsEncryptionKey, kubernetesVersion, clusterLogging, ipFamily) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const id = scope.node.id;
        // Props for the cluster.
        const clusterName = (_a = this.props.clusterName) !== null && _a !== void 0 ? _a : id;
        if (!kubernetesVersion && !this.props.version) {
            throw new Error("Version was not specified by cluster builder or in cluster provider props, must be specified in one of these");
        }
        const version = kubernetesVersion || this.props.version || eks.KubernetesVersion.V1_30;
        let privateCluster = (_b = this.props.privateCluster) !== null && _b !== void 0 ? _b : utils.valueFromContext(scope, constants.PRIVATE_CLUSTER, false);
        privateCluster = privateCluster ? privateCluster === 'true' : false;
        let isolatedCluster = (_c = this.props.isolatedCluster) !== null && _c !== void 0 ? _c : utils.valueFromContext(scope, constants.ISOLATED_CLUSTER, false);
        isolatedCluster = isolatedCluster ? isolatedCluster === 'true' : false;
        const endpointAccess = (privateCluster === true) ? eks.EndpointAccess.PRIVATE : eks.EndpointAccess.PUBLIC_AND_PRIVATE;
        const vpcSubnets = (_d = this.props.vpcSubnets) !== null && _d !== void 0 ? _d : (isolatedCluster === true ? [{ subnetType: ec2.SubnetType.PRIVATE_ISOLATED }] : privateCluster === true ? [{ subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS }] : undefined);
        const mastersRole = (_e = this.props.mastersRole) !== null && _e !== void 0 ? _e : new aws_iam_1.Role(scope, `${clusterName}-AccessRole`, {
            assumedBy: new aws_iam_1.AccountRootPrincipal()
        });
        const kubectlLayer = this.getKubectlLayer(scope, version);
        const kubectlProviderOptions = kubectlLayer && { kubectlLayer };
        const tags = this.props.tags;
        const defaultOptionsv2 = {
            vpc,
            secretsEncryptionKey,
            clusterName,
            clusterLogging,
            version,
            vpcSubnets,
            endpointAccess,
            kubectlProviderOptions,
            tags,
            mastersRole,
            defaultCapacityType: eks.DefaultCapacityType.AUTOMODE
        };
        const clusterOptions = { ...defaultOptionsv2, ...this.props, version, ipFamily };
        // Create an EKS Cluster
        const cluster = this.internalCreateCluster(scope, id, clusterOptions);
        cluster.node.addDependency(vpc);
        const nodeGroups = [];
        (_f = this.props.managedNodeGroups) === null || _f === void 0 ? void 0 : _f.forEach(n => {
            const nodeGroup = this.addManagedNodeGroup(cluster, n);
            nodeGroups.push(nodeGroup);
        });
        const autoscalingGroups = [];
        (_g = this.props.autoscalingNodeGroups) === null || _g === void 0 ? void 0 : _g.forEach(n => {
            const autoscalingGroup = this.addAutoScalingGroup(cluster, n);
            autoscalingGroups.push(autoscalingGroup);
        });
        const autoMode = clusterOptions.defaultCapacityType != undefined && clusterOptions.defaultCapacityType == eks.DefaultCapacityType.AUTOMODE;
        const fargateProfiles = Object.entries((_h = this.props.fargateProfiles) !== null && _h !== void 0 ? _h : {});
        const fargateConstructs = [];
        fargateProfiles === null || fargateProfiles === void 0 ? void 0 : fargateProfiles.forEach(([key, options]) => fargateConstructs.push(this.addFargateProfile(cluster, key, options)));
        const nodePools = Object.entries((_k = (_j = this.props.compute) === null || _j === void 0 ? void 0 : _j.extraNodePools) !== null && _k !== void 0 ? _k : {});
        const nodePoolConstructs = [];
        nodePools.forEach(([key, options]) => nodePoolConstructs.push(this.addNodePool(cluster, key, options)));
        return new spi_1.ClusterInfo(cluster, version, nodeGroups, autoscalingGroups, autoMode, fargateConstructs, cluster, nodeGroups);
    }
    /**
     * Template method that may be overridden by subclasses to create a specific cluster flavor (e.g. FargateCluster vs eks.Cluster)
     * @param scope
     * @param id
     * @param clusterOptions
     * @returns
     */
    internalCreateCluster(scope, id, clusterOptions) {
        return new eks.Cluster(scope, id, clusterOptions);
    }
    /**
     * Can be overridden to provide a custom kubectl layer.
     * @param scope
     * @param version
     * @returns
     */
    getKubectlLayer(scope, version) {
        return (0, generic_cluster_provider_1.selectKubectlLayer)(scope, version);
    }
    /**
     * Adds an autoscaling group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addAutoScalingGroup(cluster, nodeGroup) {
        var _a, _b, _c, _d, _e, _f, _g;
        const machineImageType = (_a = nodeGroup.machineImageType) !== null && _a !== void 0 ? _a : eks.MachineImageType.AMAZON_LINUX_2;
        const instanceTypeContext = utils.valueFromContext(cluster, constants.INSTANCE_TYPE_KEY, constants.DEFAULT_INSTANCE_TYPE);
        const instanceType = (_b = nodeGroup.instanceType) !== null && _b !== void 0 ? _b : (typeof instanceTypeContext === 'string' ? new ec2.InstanceType(instanceTypeContext) : instanceTypeContext);
        const minSize = (_c = nodeGroup.minSize) !== null && _c !== void 0 ? _c : utils.valueFromContext(cluster, constants.MIN_SIZE_KEY, constants.DEFAULT_NG_MINSIZE);
        const maxSize = (_d = nodeGroup.maxSize) !== null && _d !== void 0 ? _d : utils.valueFromContext(cluster, constants.MAX_SIZE_KEY, constants.DEFAULT_NG_MAXSIZE);
        const desiredSize = (_e = nodeGroup.desiredSize) !== null && _e !== void 0 ? _e : utils.valueFromContext(cluster, constants.DESIRED_SIZE_KEY, minSize);
        const updatePolicy = (_f = nodeGroup.updatePolicy) !== null && _f !== void 0 ? _f : autoscaling.UpdatePolicy.rollingUpdate();
        // Create an autoscaling group
        return cluster.addAutoScalingGroupCapacity(nodeGroup.id, {
            ...nodeGroup,
            ...{
                autoScalingGroupName: (_g = nodeGroup.autoScalingGroupName) !== null && _g !== void 0 ? _g : nodeGroup.id,
                machineImageType,
                instanceType,
                minCapacity: minSize,
                maxCapacity: maxSize,
                desiredCapacity: desiredSize,
                updatePolicy,
                vpcSubnets: nodeGroup.nodeGroupSubnets,
            }
        });
    }
    /**
     * Adds a fargate profile to the cluster
     */
    addFargateProfile(cluster, name, profileOptions) {
        return cluster.addFargateProfile(name, profileOptions);
    }
    /**
     * Add a node pool to the cluster
     */
    addNodePool(cluster, name, pool) {
        const labels = pool.labels || {};
        const annotations = pool.annotations || {};
        const taints = pool.taints || [];
        const startupTaints = pool.startupTaints || [];
        const requirements = pool.requirements || [];
        const disruption = pool.disruption || null;
        const limits = pool.limits || null;
        const weight = pool.weight || null;
        const poolManifest = {
            apiVersion: "karpenter.sh/v1",
            kind: "NodePool",
            metadata: { name: name },
            spec: {
                template: {
                    metadata: { labels: labels, annotations: annotations },
                    spec: {
                        nodeClassRef: {
                            name: "default",
                            group: "eks.amazonaws.com",
                            kind: "NodeClass"
                        },
                        taints: taints,
                        startupTaints: startupTaints,
                        requirements: utils.convertKeyPair(requirements),
                        expireAfter: pool.expireAfter
                    },
                },
                disruption: disruption,
                limits: limits,
                weight: weight,
            },
        };
        return cluster.addManifest(name, poolManifest);
    }
    /**
     * Adds a managed node group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addManagedNodeGroup(cluster, nodeGroup) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const capacityType = nodeGroup.nodeGroupCapacityType;
        const releaseVersion = nodeGroup.amiReleaseVersion;
        const instanceTypeContext = utils.valueFromContext(cluster, constants.INSTANCE_TYPE_KEY, constants.DEFAULT_INSTANCE_TYPE);
        const instanceTypes = (_a = nodeGroup.instanceTypes) !== null && _a !== void 0 ? _a : ([typeof instanceTypeContext === 'string' ? new ec2.InstanceType(instanceTypeContext) : instanceTypeContext]);
        const minSize = (_b = nodeGroup.minSize) !== null && _b !== void 0 ? _b : utils.valueFromContext(cluster, constants.MIN_SIZE_KEY, constants.DEFAULT_NG_MINSIZE);
        const maxSize = (_c = nodeGroup.maxSize) !== null && _c !== void 0 ? _c : utils.valueFromContext(cluster, constants.MAX_SIZE_KEY, constants.DEFAULT_NG_MAXSIZE);
        const desiredSize = (_d = nodeGroup.desiredSize) !== null && _d !== void 0 ? _d : utils.valueFromContext(cluster, constants.DESIRED_SIZE_KEY, minSize);
        // Create a managed node group.
        const nodegroupOptions = {
            ...nodeGroup,
            amiType: nodeGroup.amiType,
            ...{
                nodegroupName: (_e = nodeGroup.nodegroupName) !== null && _e !== void 0 ? _e : nodeGroup.id,
                capacityType,
                instanceTypes,
                minSize,
                maxSize,
                desiredSize,
                releaseVersion,
                subnets: nodeGroup.nodeGroupSubnets
            }
        };
        if (nodeGroup.launchTemplate) {
            // Create launch template with provided launch template properties
            const lt = new ec2.LaunchTemplate(cluster, `${nodeGroup.id}-lt`, {
                blockDevices: nodeGroup.launchTemplate.blockDevices,
                machineImage: (_f = nodeGroup.launchTemplate) === null || _f === void 0 ? void 0 : _f.machineImage,
                securityGroup: nodeGroup.launchTemplate.securityGroup,
                userData: (_g = nodeGroup.launchTemplate) === null || _g === void 0 ? void 0 : _g.userData,
                requireImdsv2: (_h = nodeGroup.launchTemplate) === null || _h === void 0 ? void 0 : _h.requireImdsv2,
                httpPutResponseHopLimit: (_j = nodeGroup.launchTemplate) === null || _j === void 0 ? void 0 : _j.httpPutResponseHopLimit,
            });
            utils.setPath(nodegroupOptions, "launchTemplateSpec", {
                id: lt.launchTemplateId,
                version: lt.latestVersionNumber,
            });
            const tags = Object.entries((_k = nodeGroup.launchTemplate.tags) !== null && _k !== void 0 ? _k : {});
            tags.forEach(([key, options]) => aws_cdk_lib_1.Tags.of(lt).add(key, options));
            if ((_l = nodeGroup.launchTemplate) === null || _l === void 0 ? void 0 : _l.machineImage) {
                delete nodegroupOptions.amiType;
                delete nodegroupOptions.releaseVersion;
                delete nodeGroup.amiReleaseVersion;
            }
        }
        const result = cluster.addNodegroupCapacity(nodeGroup.id + "-ng", nodegroupOptions);
        if (nodeGroup.enableSsmPermissions) {
            result.role.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore'));
        }
        return result;
    }
    validateInput(props) {
        utils.validateConstraints(new GenericClusterPropsV2Constraints, GenericClusterProviderV2.name, props);
        if (props.managedNodeGroups != undefined)
            utils.validateConstraints(new generic_cluster_provider_1.ManagedNodeGroupConstraints, "ManagedNodeGroup", ...props.managedNodeGroups);
        if (props.autoscalingNodeGroups != undefined)
            utils.validateConstraints(new generic_cluster_provider_1.AutoscalingNodeGroupConstraints, "AutoscalingNodeGroups", ...props.autoscalingNodeGroups);
        if (props.compute != undefined)
            utils.validateConstraints(new ComputeConfigConstraints, "ComputeConfigConstraints", props.compute);
        if (props.fargateProfiles != undefined)
            utils.validateConstraints(new generic_cluster_provider_1.FargateProfileConstraints, "FargateProfiles", ...Object.values(props.fargateProfiles));
    }
}
exports.GenericClusterProviderV2 = GenericClusterProviderV2;
//# sourceMappingURL=data:application/json;base64,