"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MngClusterProvider = void 0;
exports.assertEC2NodeGroup = assertEC2NodeGroup;
const generic_cluster_provider_1 = require("./generic-cluster-provider");
/**
 * MngClusterProvider provisions an EKS cluster with a managed node group for managed capacity.
 */
class MngClusterProvider extends generic_cluster_provider_1.GenericClusterProvider {
    constructor(props) {
        var _a, _b;
        super({ ...generic_cluster_provider_1.defaultOptions, ...props, ...{
                managedNodeGroups: [{
                        ...props,
                        id: (_b = (_a = props === null || props === void 0 ? void 0 : props.id) !== null && _a !== void 0 ? _a : props === null || props === void 0 ? void 0 : props.clusterName) !== null && _b !== void 0 ? _b : "eks-blueprints-mng",
                        tags: props === null || props === void 0 ? void 0 : props.nodeGroupTags,
                    }]
            } });
    }
}
exports.MngClusterProvider = MngClusterProvider;
/**
 * Validates that cluster is backed by EC2 either through a managed node group or through a self-managed autoscaling group.
 * @param clusterInfo
 * @param source Used for error message to identify the source of the check
 * @returns
 */
//TODO: move to clusterInfo
function assertEC2NodeGroup(clusterInfo, source) {
    if (clusterInfo.nodeGroups != undefined && clusterInfo.nodeGroups.length > 0) {
        return clusterInfo.nodeGroups;
    }
    if (clusterInfo.autoscalingGroups != undefined && clusterInfo.autoscalingGroups.length > 0) {
        return clusterInfo.autoscalingGroups;
    }
    throw new Error(`${source} is supported with EKS EC2 only and is not supported for imported clusters`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW5nLWNsdXN0ZXItcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY2x1c3Rlci1wcm92aWRlcnMvbW5nLWNsdXN0ZXItcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBMkVBLGdEQVFDO0FBaEZELHlFQUFvRjtBQWlEcEY7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLGlEQUFzQjtJQUUxRCxZQUFZLEtBQStCOztRQUN2QyxLQUFLLENBQUMsRUFBQyxHQUFHLHlDQUFjLEVBQUUsR0FBRyxLQUFLLEVBQUUsR0FBRztnQkFDbkMsaUJBQWlCLEVBQUUsQ0FBQzt3QkFDaEIsR0FBRyxLQUE4Qzt3QkFDakQsRUFBRSxFQUFFLE1BQUEsTUFBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsRUFBRSxtQ0FBSSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsV0FBVyxtQ0FBSSxvQkFBb0I7d0JBQzNELElBQUksRUFBRSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsYUFBYTtxQkFDN0IsQ0FBQzthQUNMLEVBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztDQUNKO0FBWEQsZ0RBV0M7QUFFRDs7Ozs7R0FLRztBQUNILDJCQUEyQjtBQUMzQixTQUFnQixrQkFBa0IsQ0FBQyxXQUF3QixFQUFFLE1BQWM7SUFDdkUsSUFBRyxXQUFXLENBQUMsVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMxRSxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDbEMsQ0FBQztJQUNELElBQUcsV0FBVyxDQUFDLGlCQUFpQixJQUFJLFNBQVMsSUFBSSxXQUFXLENBQUMsaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3hGLE9BQU8sV0FBVyxDQUFDLGlCQUFpQixDQUFDO0lBQ3pDLENBQUM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsTUFBTSw0RUFBNEUsQ0FBQyxDQUFDO0FBQzNHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhd3NfYXV0b3NjYWxpbmcgYXMgYXNnLCBhd3NfZWtzIGFzIGVrcyB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuLy8gQ2x1c3RlclxuaW1wb3J0IHsgQ2x1c3RlckluZm8gfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IGRlZmF1bHRPcHRpb25zLCBHZW5lcmljQ2x1c3RlclByb3ZpZGVyIH0gZnJvbSBcIi4vZ2VuZXJpYy1jbHVzdGVyLXByb3ZpZGVyXCI7XG4vLyBDb25zdGFudHNcbmltcG9ydCB7IE1hbmFnZWROb2RlR3JvdXAgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgY2x1c3RlciBwcm92aWRlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNbmdDbHVzdGVyUHJvdmlkZXJQcm9wcyBleHRlbmRzIFBhcnRpYWw8ZWtzLkNvbW1vbkNsdXN0ZXJPcHRpb25zPiwgT21pdDxNYW5hZ2VkTm9kZUdyb3VwLCBcImlkXCI+IHtcbiAgICAvKipcbiAgICAqIFRoZSBuYW1lIGZvciB0aGUgY2x1c3Rlci5cbiAgICAqIEBkZXByZWNhdGVkIHVzZSAjY2x1c3Rlck5hbWVcbiAgICAqL1xuICAgIG5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBJbiB0aGlzIGNhc2UgaWQgaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIHRoZSBjbHVzdGVyIG5hbWVcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIElzIGl0IGEgcHJpdmF0ZSBvbmx5IEVLUyBDbHVzdGVyP1xuICAgICAqIERlZmF1bHRzIHRvIHByaXZhdGVfYW5kX3B1YmxpYyBjbHVzdGVyLCBzZXQgdG8gdHJ1ZSBmb3IgcHJpdmF0ZSBjbHVzdGVyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBwcml2YXRlQ2x1c3Rlcj86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBJcyB0aGUgRUtTIENsdXN0ZXIgaW4gaXNvbGF0ZWQgc3VibmV0cz9cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGlzb2xhdGVkQ2x1c3Rlcj86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUYWdzIGZvciB0aGUgQ2x1c3Rlci5cbiAgICAgKi9cbiAgICB0YWdzPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGFncyBmb3IgdGhlIG5vZGUgZ3JvdXAuXG4gICAgICovXG4gICAgbm9kZUdyb3VwVGFncz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH1cblxufVxuXG4vKipcbiAqIE1uZ0NsdXN0ZXJQcm92aWRlciBwcm92aXNpb25zIGFuIEVLUyBjbHVzdGVyIHdpdGggYSBtYW5hZ2VkIG5vZGUgZ3JvdXAgZm9yIG1hbmFnZWQgY2FwYWNpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNbmdDbHVzdGVyUHJvdmlkZXIgZXh0ZW5kcyBHZW5lcmljQ2x1c3RlclByb3ZpZGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogTW5nQ2x1c3RlclByb3ZpZGVyUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoey4uLmRlZmF1bHRPcHRpb25zLCAuLi5wcm9wcywgLi4ue1xuICAgICAgICAgICAgbWFuYWdlZE5vZGVHcm91cHM6IFt7XG4gICAgICAgICAgICAgICAgLi4ucHJvcHMgYXMgT21pdDxNYW5hZ2VkTm9kZUdyb3VwLCBcImlkXCIgfCBcInRhZ3NcIj4sXG4gICAgICAgICAgICAgICAgaWQ6IHByb3BzPy5pZCA/PyBwcm9wcz8uY2x1c3Rlck5hbWUgPz8gXCJla3MtYmx1ZXByaW50cy1tbmdcIixcbiAgICAgICAgICAgICAgICB0YWdzOiBwcm9wcz8ubm9kZUdyb3VwVGFncyxcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH19KTtcbiAgICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgY2x1c3RlciBpcyBiYWNrZWQgYnkgRUMyIGVpdGhlciB0aHJvdWdoIGEgbWFuYWdlZCBub2RlIGdyb3VwIG9yIHRocm91Z2ggYSBzZWxmLW1hbmFnZWQgYXV0b3NjYWxpbmcgZ3JvdXAuXG4gKiBAcGFyYW0gY2x1c3RlckluZm9cbiAqIEBwYXJhbSBzb3VyY2UgVXNlZCBmb3IgZXJyb3IgbWVzc2FnZSB0byBpZGVudGlmeSB0aGUgc291cmNlIG9mIHRoZSBjaGVja1xuICogQHJldHVybnNcbiAqL1xuLy9UT0RPOiBtb3ZlIHRvIGNsdXN0ZXJJbmZvXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RUMyTm9kZUdyb3VwKGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbywgc291cmNlOiBzdHJpbmcpOiBla3MuTm9kZWdyb3VwW10gfCBhc2cuQXV0b1NjYWxpbmdHcm91cFtdIHtcbiAgICBpZihjbHVzdGVySW5mby5ub2RlR3JvdXBzICE9IHVuZGVmaW5lZCAmJiBjbHVzdGVySW5mby5ub2RlR3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGNsdXN0ZXJJbmZvLm5vZGVHcm91cHM7XG4gICAgfVxuICAgIGlmKGNsdXN0ZXJJbmZvLmF1dG9zY2FsaW5nR3JvdXBzICE9IHVuZGVmaW5lZCAmJiBjbHVzdGVySW5mby5hdXRvc2NhbGluZ0dyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBjbHVzdGVySW5mby5hdXRvc2NhbGluZ0dyb3VwcztcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3NvdXJjZX0gaXMgc3VwcG9ydGVkIHdpdGggRUtTIEVDMiBvbmx5IGFuZCBpcyBub3Qgc3VwcG9ydGVkIGZvciBpbXBvcnRlZCBjbHVzdGVyc2ApO1xufVxuIl19