"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateIPv6NodeRoleProvider = void 0;
const iam = require("aws-cdk-lib/aws-iam");
const ipv6_utils_1 = require("../utils/ipv6-utils");
/**
 * Resource provider that creates a new role with ipv6 permissions.
 * Especially, Node management roles (requires ipv6 permissions).
 */
class CreateIPv6NodeRoleProvider {
    /**
     * Constructor to create role provider.
     * @param roleId role id
     * @param assumedBy @example  new iam.ServicePrincipal('ec2.amazonaws.com')
     * @param policies
     */
    constructor(roleId, policies) {
        this.roleId = roleId;
        this.policies = policies;
    }
    provide(context) {
        const assumedBy = new iam.ServicePrincipal("ec2.amazonaws.com");
        const defaultNodePolicies = [
            iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSWorkerNodePolicy"),
            iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEC2ContainerRegistryReadOnly"),
            iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonSSMManagedInstanceCore")
        ];
        const nodePolicies = this.policies ? defaultNodePolicies.concat(this.policies) : defaultNodePolicies;
        const role = new iam.Role(context.scope, this.roleId, {
            assumedBy: assumedBy,
            managedPolicies: nodePolicies
        });
        const nodeIpv6Policy = new iam.Policy(context.scope, 'node-Ipv6-Policy', {
            document: (0, ipv6_utils_1.getEKSNodeIpv6PolicyDocument)()
        });
        role.attachInlinePolicy(nodeIpv6Policy);
        return role;
    }
}
exports.CreateIPv6NodeRoleProvider = CreateIPv6NodeRoleProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXB2Ni1pYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVzb3VyY2UtcHJvdmlkZXJzL2lwdjYtaWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJDQUEyQztBQUUzQyxvREFBaUU7QUFFakU7OztHQUdHO0FBQ0gsTUFBYSwwQkFBMEI7SUFDbkM7Ozs7O09BS0c7SUFDSCxZQUFvQixNQUFjLEVBQVUsUUFBMkI7UUFBbkQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQW1CO0lBQUUsQ0FBQztJQUUxRSxPQUFPLENBQUMsT0FBNEI7UUFDaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNoRSxNQUFNLG1CQUFtQixHQUFHO1lBQ3BCLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsMkJBQTJCLENBQUM7WUFDdkUsR0FBRyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxvQ0FBb0MsQ0FBQztZQUNoRixHQUFHLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLDhCQUE4QixDQUFDO1NBQ2pGLENBQUM7UUFDRixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztRQUNyRyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2xELFNBQVMsRUFBRSxTQUFTO1lBQ3BCLGVBQWUsRUFBRSxZQUFZO1NBQ2hDLENBQUMsQ0FBQztRQUNILE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFFO1lBQ3JFLFFBQVEsRUFBRSxJQUFBLHlDQUE0QixHQUFFO1NBQUUsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0o7QUExQkQsZ0VBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc3BpIGZyb20gXCIuLi9zcGlcIjtcbmltcG9ydCAqIGFzIGlhbSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWlhbVwiO1xuaW1wb3J0IHtJTWFuYWdlZFBvbGljeX0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7Z2V0RUtTTm9kZUlwdjZQb2xpY3lEb2N1bWVudH0gZnJvbSAnLi4vdXRpbHMvaXB2Ni11dGlscyc7XG5cbi8qKlxuICogUmVzb3VyY2UgcHJvdmlkZXIgdGhhdCBjcmVhdGVzIGEgbmV3IHJvbGUgd2l0aCBpcHY2IHBlcm1pc3Npb25zLlxuICogRXNwZWNpYWxseSwgTm9kZSBtYW5hZ2VtZW50IHJvbGVzIChyZXF1aXJlcyBpcHY2IHBlcm1pc3Npb25zKS5cbiAqL1xuZXhwb3J0IGNsYXNzIENyZWF0ZUlQdjZOb2RlUm9sZVByb3ZpZGVyIGltcGxlbWVudHMgc3BpLlJlc291cmNlUHJvdmlkZXI8aWFtLlJvbGU+IHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgcm9sZSBwcm92aWRlci5cbiAgICAgKiBAcGFyYW0gcm9sZUlkIHJvbGUgaWRcbiAgICAgKiBAcGFyYW0gYXNzdW1lZEJ5IEBleGFtcGxlICBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2VjMi5hbWF6b25hd3MuY29tJylcbiAgICAgKiBAcGFyYW0gcG9saWNpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvbGVJZDogc3RyaW5nLCBwcml2YXRlIHBvbGljaWVzPzogSU1hbmFnZWRQb2xpY3lbXSl7fVxuXG4gICAgcHJvdmlkZShjb250ZXh0OiBzcGkuUmVzb3VyY2VDb250ZXh0KTogaWFtLlJvbGUge1xuICAgICAgICBjb25zdCBhc3N1bWVkQnkgPSBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoXCJlYzIuYW1hem9uYXdzLmNvbVwiKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdE5vZGVQb2xpY2llcyA9IFtcbiAgICAgICAgICAgICAgICBpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoXCJBbWF6b25FS1NXb3JrZXJOb2RlUG9saWN5XCIpLFxuICAgICAgICAgICAgICAgIGlhbS5NYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShcIkFtYXpvbkVDMkNvbnRhaW5lclJlZ2lzdHJ5UmVhZE9ubHlcIiksXG4gICAgICAgICAgICAgICAgaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwiQW1hem9uU1NNTWFuYWdlZEluc3RhbmNlQ29yZVwiKVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBub2RlUG9saWNpZXMgPSB0aGlzLnBvbGljaWVzID8gZGVmYXVsdE5vZGVQb2xpY2llcy5jb25jYXQodGhpcy5wb2xpY2llcykgOiBkZWZhdWx0Tm9kZVBvbGljaWVzO1xuICAgICAgICBjb25zdCByb2xlID0gbmV3IGlhbS5Sb2xlKGNvbnRleHQuc2NvcGUsIHRoaXMucm9sZUlkLCB7XG4gICAgICAgICAgICBhc3N1bWVkQnk6IGFzc3VtZWRCeSxcbiAgICAgICAgICAgIG1hbmFnZWRQb2xpY2llczogbm9kZVBvbGljaWVzXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBub2RlSXB2NlBvbGljeSA9IG5ldyBpYW0uUG9saWN5KGNvbnRleHQuc2NvcGUsICdub2RlLUlwdjYtUG9saWN5Jywge1xuICAgICAgICAgICAgZG9jdW1lbnQ6IGdldEVLU05vZGVJcHY2UG9saWN5RG9jdW1lbnQoKSB9KTtcbiAgICAgICAgcm9sZS5hdHRhY2hJbmxpbmVQb2xpY3kobm9kZUlwdjZQb2xpY3kpO1xuICAgICAgICByZXR1cm4gcm9sZTtcbiAgICB9XG59XG4iXX0=