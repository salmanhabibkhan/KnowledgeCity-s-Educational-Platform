"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ipv6VpcProvider = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const vpc_1 = require("./vpc");
/**
 * IPV6 VPC resource provider
 */
class Ipv6VpcProvider {
    constructor(vpcId) {
        this.vpcId = vpcId;
    }
    provide(context) {
        const id = context.scope.node.id;
        let vpc = (0, vpc_1.getVPCFromId)(context, id, this.vpcId);
        if (vpc == null) {
            // It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.
            // Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.
            // Network routing for the private subnets will be configured to allow outbound access via a one NAT Gateway to reduce the cost.
            // IPv6 does not require NAT for pod to pod communication. By default, we are creating one NAT for cluster communications outside endpoints if any.
            return this.getIPv6VPC(context, id);
        }
        return vpc;
    }
    /*
    ** AWS recommend to have dual stack vpc for ipv6 EKS clusters. This functions creates VPC required for IPV6 cluster.
    ** For more info refer: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-migrate-ipv6-add.html
     */
    getIPv6VPC(context, id) {
        // Create VPC with dual stack mode
        // Setting natGateways lower than the number of Availability Zones in VPC in order to save on NAT cost.
        const vpc = new ec2.Vpc(context.scope, id + "-vpc", { natGateways: 1,
            ipProtocol: aws_ec2_1.IpProtocol.DUAL_STACK, restrictDefaultSecurityGroup: false });
        // Create and associate IPV6 CIDR blocks
        const ipv6Cidr = new ec2.CfnVPCCidrBlock(context.scope, id + "-CIDR6", {
            vpcId: vpc.vpcId,
            amazonProvidedIpv6CidrBlock: true,
        });
        let subnetCount = 0;
        let subnets = [...vpc.publicSubnets, ...vpc.privateSubnets];
        // associate an IPv6 CIDR block with a subnet
        for (let subnet of subnets) {
            // Wait for the ipv6 cidr to complete
            subnet.node.addDependency(ipv6Cidr);
            this.associateSubnetsWithIpv6CIDR(subnetCount, subnet, vpc);
            subnetCount++;
        }
        return vpc;
    }
    /*
    ** For IPV6 vpc we need to attach subnets with available ipv6Cidr blocks in the vpc.
    ** Refer steps in here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
     */
    associateSubnetsWithIpv6CIDR(count, subnet, vpc) {
        const cfnSubnet = subnet.node.defaultChild;
        // The VPC is associated with /56 for amazonProvidedIpv6CidrBlock. So value of 64 subnet mask. so 256 cidr blocks are available.
        // Having 64 as subnet mask will give 2^64 IP's for each subnet. Which high enough for any kind of workload.
        const ipv6CIDRSubnetMask = "64";
        cfnSubnet.ipv6CidrBlock = aws_cdk_lib_1.Fn.select(count, aws_cdk_lib_1.Fn.cidr(aws_cdk_lib_1.Fn.select(0, vpc.vpcIpv6CidrBlocks), 256, ipv6CIDRSubnetMask));
        cfnSubnet.assignIpv6AddressOnCreation = true;
    }
}
exports.Ipv6VpcProvider = Ipv6VpcProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXB2Ni12cGMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVzb3VyY2UtcHJvdmlkZXJzL2lwdjYtdnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUErQjtBQUMvQiwyQ0FBMkM7QUFDM0MsaURBQXFEO0FBRXJELCtCQUFtQztBQUVuQzs7R0FFRztBQUNILE1BQWEsZUFBZTtJQUd4QixZQUFZLEtBQWM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUF3QjtRQUM1QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakMsSUFBSSxHQUFHLEdBQUcsSUFBQSxrQkFBWSxFQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ2QseUhBQXlIO1lBQ3pILHVIQUF1SDtZQUN2SCxnSUFBZ0k7WUFDaEksbUpBQW1KO1lBQ25KLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsQ0FBQztRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxPQUF3QixFQUFFLEVBQVU7UUFDM0Msa0NBQWtDO1FBQ2xDLHVHQUF1RztRQUN2RyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUMsTUFBTSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDOUQsVUFBVSxFQUFFLG9CQUFVLENBQUMsVUFBVSxFQUFFLDRCQUE0QixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFOUUsd0NBQXdDO1FBQ3hDLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBQyxRQUFRLEVBQUU7WUFDakUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1lBQ2hCLDJCQUEyQixFQUFFLElBQUk7U0FDcEMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTVELDZDQUE2QztRQUM3QyxLQUFNLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQzFCLHFDQUFxQztZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM1RCxXQUFXLEVBQUUsQ0FBQztRQUNsQixDQUFDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsNEJBQTRCLENBQUMsS0FBYSxFQUFFLE1BQW1CLEVBQUUsR0FBUTtRQUNyRSxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQTZCLENBQUM7UUFDNUQsZ0lBQWdJO1FBQ2hJLDRHQUE0RztRQUM1RyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUNoQyxTQUFTLENBQUMsYUFBYSxHQUFHLGdCQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBRSxDQUFDLElBQUksQ0FBQyxnQkFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUNsSCxTQUFTLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDO0lBQ2pELENBQUM7Q0FFSjtBQTdERCwwQ0E2REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQge0lwUHJvdG9jb2wsIFZwYyB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xuaW1wb3J0IHsgUmVzb3VyY2VDb250ZXh0LCBSZXNvdXJjZVByb3ZpZGVyIH0gZnJvbSBcIi4uL3NwaVwiO1xuaW1wb3J0IHtnZXRWUENGcm9tSWR9IGZyb20gXCIuL3ZwY1wiO1xuXG4vKipcbiAqIElQVjYgVlBDIHJlc291cmNlIHByb3ZpZGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBJcHY2VnBjUHJvdmlkZXIgaW1wbGVtZW50cyBSZXNvdXJjZVByb3ZpZGVyPGVjMi5JVnBjPiB7XG4gICAgcmVhZG9ubHkgdnBjSWQ/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcih2cGNJZD86IHN0cmluZykge1xuICAgICAgICB0aGlzLnZwY0lkID0gdnBjSWQ7XG4gICAgfVxuXG4gICAgcHJvdmlkZShjb250ZXh0OiBSZXNvdXJjZUNvbnRleHQpOiBlYzIuSVZwYyB7XG4gICAgICAgIGNvbnN0IGlkID0gY29udGV4dC5zY29wZS5ub2RlLmlkO1xuICAgICAgICBsZXQgdnBjID0gZ2V0VlBDRnJvbUlkKGNvbnRleHQsIGlkLCB0aGlzLnZwY0lkKTtcbiAgICAgICAgaWYgKHZwYyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJdCB3aWxsIGF1dG9tYXRpY2FsbHkgZGl2aWRlIHRoZSBwcm92aWRlZCBWUEMgQ0lEUiByYW5nZSwgYW5kIGNyZWF0ZSBwdWJsaWMgYW5kIHByaXZhdGUgc3VibmV0cyBwZXIgQXZhaWxhYmlsaXR5IFpvbmUuXG4gICAgICAgICAgICAvLyBOZXR3b3JrIHJvdXRpbmcgZm9yIHRoZSBwdWJsaWMgc3VibmV0cyB3aWxsIGJlIGNvbmZpZ3VyZWQgdG8gYWxsb3cgb3V0Ym91bmQgYWNjZXNzIGRpcmVjdGx5IHZpYSBhbiBJbnRlcm5ldCBHYXRld2F5LlxuICAgICAgICAgICAgLy8gTmV0d29yayByb3V0aW5nIGZvciB0aGUgcHJpdmF0ZSBzdWJuZXRzIHdpbGwgYmUgY29uZmlndXJlZCB0byBhbGxvdyBvdXRib3VuZCBhY2Nlc3MgdmlhIGEgb25lIE5BVCBHYXRld2F5IHRvIHJlZHVjZSB0aGUgY29zdC5cbiAgICAgICAgICAgIC8vIElQdjYgZG9lcyBub3QgcmVxdWlyZSBOQVQgZm9yIHBvZCB0byBwb2QgY29tbXVuaWNhdGlvbi4gQnkgZGVmYXVsdCwgd2UgYXJlIGNyZWF0aW5nIG9uZSBOQVQgZm9yIGNsdXN0ZXIgY29tbXVuaWNhdGlvbnMgb3V0c2lkZSBlbmRwb2ludHMgaWYgYW55LlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SVB2NlZQQyhjb250ZXh0LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZwYztcbiAgICB9XG5cbiAgICAvKlxuICAgICoqIEFXUyByZWNvbW1lbmQgdG8gaGF2ZSBkdWFsIHN0YWNrIHZwYyBmb3IgaXB2NiBFS1MgY2x1c3RlcnMuIFRoaXMgZnVuY3Rpb25zIGNyZWF0ZXMgVlBDIHJlcXVpcmVkIGZvciBJUFY2IGNsdXN0ZXIuXG4gICAgKiogRm9yIG1vcmUgaW5mbyByZWZlcjogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3ZwYy9sYXRlc3QvdXNlcmd1aWRlL3ZwYy1taWdyYXRlLWlwdjYtYWRkLmh0bWxcbiAgICAgKi9cbiAgICBnZXRJUHY2VlBDKGNvbnRleHQ6IFJlc291cmNlQ29udGV4dCwgaWQ6IHN0cmluZyk6ZWMyLklWcGMge1xuICAgICAgICAvLyBDcmVhdGUgVlBDIHdpdGggZHVhbCBzdGFjayBtb2RlXG4gICAgICAgIC8vIFNldHRpbmcgbmF0R2F0ZXdheXMgbG93ZXIgdGhhbiB0aGUgbnVtYmVyIG9mIEF2YWlsYWJpbGl0eSBab25lcyBpbiBWUEMgaW4gb3JkZXIgdG8gc2F2ZSBvbiBOQVQgY29zdC5cbiAgICAgICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoY29udGV4dC5zY29wZSwgaWQrXCItdnBjXCIsIHsgbmF0R2F0ZXdheXM6IDEsXG4gICAgICAgICAgICBpcFByb3RvY29sOiBJcFByb3RvY29sLkRVQUxfU1RBQ0ssIHJlc3RyaWN0RGVmYXVsdFNlY3VyaXR5R3JvdXA6IGZhbHNlIH0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbmQgYXNzb2NpYXRlIElQVjYgQ0lEUiBibG9ja3NcbiAgICAgICAgY29uc3QgaXB2NkNpZHIgPSBuZXcgZWMyLkNmblZQQ0NpZHJCbG9jayhjb250ZXh0LnNjb3BlLCBpZCtcIi1DSURSNlwiLCB7XG4gICAgICAgICAgICB2cGNJZDogdnBjLnZwY0lkLFxuICAgICAgICAgICAgYW1hem9uUHJvdmlkZWRJcHY2Q2lkckJsb2NrOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHN1Ym5ldENvdW50ID0gMDtcbiAgICAgICAgbGV0IHN1Ym5ldHMgPSBbLi4udnBjLnB1YmxpY1N1Ym5ldHMsIC4uLnZwYy5wcml2YXRlU3VibmV0c107XG5cbiAgICAgICAgLy8gYXNzb2NpYXRlIGFuIElQdjYgQ0lEUiBibG9jayB3aXRoIGEgc3VibmV0XG4gICAgICAgIGZvciAoIGxldCBzdWJuZXQgb2Ygc3VibmV0cykge1xuICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGlwdjYgY2lkciB0byBjb21wbGV0ZVxuICAgICAgICAgICAgc3VibmV0Lm5vZGUuYWRkRGVwZW5kZW5jeShpcHY2Q2lkcik7XG4gICAgICAgICAgICB0aGlzLmFzc29jaWF0ZVN1Ym5ldHNXaXRoSXB2NkNJRFIoc3VibmV0Q291bnQsIHN1Ym5ldCwgdnBjKTtcbiAgICAgICAgICAgIHN1Ym5ldENvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZwYztcbiAgICB9XG5cbiAgICAvKlxuICAgICoqIEZvciBJUFY2IHZwYyB3ZSBuZWVkIHRvIGF0dGFjaCBzdWJuZXRzIHdpdGggYXZhaWxhYmxlIGlwdjZDaWRyIGJsb2NrcyBpbiB0aGUgdnBjLlxuICAgICoqIFJlZmVyIHN0ZXBzIGluIGhlcmU6IGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NDbG91ZEZvcm1hdGlvbi9sYXRlc3QvVXNlckd1aWRlL2ludHJpbnNpYy1mdW5jdGlvbi1yZWZlcmVuY2UtY2lkci5odG1sXG4gICAgICovXG4gICAgYXNzb2NpYXRlU3VibmV0c1dpdGhJcHY2Q0lEUihjb3VudDogbnVtYmVyLCBzdWJuZXQ6IGVjMi5JU3VibmV0LCB2cGM6IFZwYykge1xuICAgICAgICBjb25zdCBjZm5TdWJuZXQgPSBzdWJuZXQubm9kZS5kZWZhdWx0Q2hpbGQgYXMgZWMyLkNmblN1Ym5ldDtcbiAgICAgICAgLy8gVGhlIFZQQyBpcyBhc3NvY2lhdGVkIHdpdGggLzU2IGZvciBhbWF6b25Qcm92aWRlZElwdjZDaWRyQmxvY2suIFNvIHZhbHVlIG9mIDY0IHN1Ym5ldCBtYXNrLiBzbyAyNTYgY2lkciBibG9ja3MgYXJlIGF2YWlsYWJsZS5cbiAgICAgICAgLy8gSGF2aW5nIDY0IGFzIHN1Ym5ldCBtYXNrIHdpbGwgZ2l2ZSAyXjY0IElQJ3MgZm9yIGVhY2ggc3VibmV0LiBXaGljaCBoaWdoIGVub3VnaCBmb3IgYW55IGtpbmQgb2Ygd29ya2xvYWQuXG4gICAgICAgIGNvbnN0IGlwdjZDSURSU3VibmV0TWFzayA9IFwiNjRcIjtcbiAgICAgICAgY2ZuU3VibmV0LmlwdjZDaWRyQmxvY2sgPSBGbi5zZWxlY3QoY291bnQsIEZuLmNpZHIoRm4uc2VsZWN0KDAsIHZwYy52cGNJcHY2Q2lkckJsb2NrcyksIDI1NiwgaXB2NkNJRFJTdWJuZXRNYXNrKSk7XG4gICAgICAgIGNmblN1Ym5ldC5hc3NpZ25JcHY2QWRkcmVzc09uQ3JlYXRpb24gPSB0cnVlO1xuICAgIH1cblxufVxuIl19