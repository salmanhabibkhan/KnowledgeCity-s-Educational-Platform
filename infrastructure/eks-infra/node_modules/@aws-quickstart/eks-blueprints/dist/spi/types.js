"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitOpsMode = exports.ClusterInfo = exports.GlobalResources = exports.ResourceContext = exports.ApplicationRepositoryConstraints = void 0;
const assert = require("assert");
const log_utils_1 = require("../utils/log-utils");
const constraints = require("../utils/constraints-utils");
/**
 * Adds Constraints to application repository
 */
class ApplicationRepositoryConstraints {
    constructor() {
        this.credentialsSecretName = new constraints.InternetHostStringConstraint();
    }
}
exports.ApplicationRepositoryConstraints = ApplicationRepositoryConstraints;
/**
 * Provides API to register resource providers and get access to the provided resources.
 */
class ResourceContext {
    constructor(scope, blueprintProps) {
        this.scope = scope;
        this.blueprintProps = blueprintProps;
        this.resources = new Map();
    }
    /**
     * Adds a new resource provider and specifies the name under which the provided resource will be registered,
     * @param name Specifies the name key under which the provided resources will be registered for subsequent look-ups.
     * @param provider Implementation of the resource provider interface
     * @returns the provided resource
     */
    add(name, provider) {
        const resource = provider.provide(this);
        assert(!this.resources.has(name), `Overwriting ${name} resource during execution is not allowed.`);
        this.resources.set(name, resource);
        return resource;
    }
    /**
     * Gets the provided resource by the supplied name.
     * @param name under which the resource provider was registered
     * @returns the resource or undefined if the specified resource was not found
     */
    get(name) {
        return this.resources.get(name);
    }
}
exports.ResourceContext = ResourceContext;
var GlobalResources;
(function (GlobalResources) {
    GlobalResources["Vpc"] = "vpc";
    GlobalResources["HostedZone"] = "hosted-zone";
    GlobalResources["Certificate"] = "certificate";
    GlobalResources["KmsKey"] = "kms-key";
    GlobalResources["Amp"] = "amp";
})(GlobalResources || (exports.GlobalResources = GlobalResources = {}));
/**
 * Cluster info supplies required information on the cluster configuration, registered resources and add-ons
 * which could be leveraged by the framework, add-on implementations and teams.
 */
class ClusterInfo {
    /**
     * Constructor for ClusterInfo
     * @param props
     */
    constructor(cluster, version, nodeGroups, autoscalingGroups, autoMode, fargateProfiles, clusterv2, nodegroupsv2) {
        this.cluster = cluster;
        this.version = version;
        this.nodeGroups = nodeGroups;
        this.autoscalingGroups = autoscalingGroups;
        this.autoMode = autoMode;
        this.fargateProfiles = fargateProfiles;
        this.clusterv2 = clusterv2;
        this.nodegroupsv2 = nodegroupsv2;
        this.cluster = cluster;
        this.provisionedAddOns = new Map();
        this.scheduledAddOns = new Map();
        this.orderedAddOns = [];
        this.addonContext = new Map();
    }
    /**
     * Provides the resource context object associated with this instance of the EKS Blueprint.
     * @returns resource context object
     */
    getResourceContext() {
        return this.resourceContext;
    }
    /**
     * Injection method to provide resource context.
     * @param resourceContext
     */
    setResourceContext(resourceContext) {
        this.resourceContext = resourceContext;
    }
    /**
     * Update provisionedAddOns map
     * @param addOn
     * @param construct
     */
    addProvisionedAddOn(addOn, construct) {
        this.orderedAddOns.forEach(e => {
            const provisionedOrdered = this.provisionedAddOns.get(e);
            if (provisionedOrdered) {
                log_utils_1.logger.debug(`Adding dependency from ${addOn} to ${e}`);
                construct.node.addDependency(provisionedOrdered);
            }
        });
        this.provisionedAddOns.set(addOn, construct);
    }
    /**
     * Given the addOn name, return the provisioned addOn construct
     * @param addOn
     * @returns undefined
     */
    getProvisionedAddOn(addOn) {
        return this.provisionedAddOns.get(addOn);
    }
    /**
     * Returns all provisioned addons
     * @returns scheduledAddOns: Map<string, cdk.Construct>
     */
    getAllProvisionedAddons() {
        return this.provisionedAddOns;
    }
    /**
     * Set the preProvisionedAddOn map with the promise for the construct
     * of the addon being provisioned
     * @param addOn
     * @param promise
     * @param ordered if addon depends on previous addons for completion (runs serially)
     */
    addScheduledAddOn(addOn, promise, ordered) {
        this.scheduledAddOns.set(addOn, promise);
        if (ordered) {
            this.orderedAddOns.push(addOn);
        }
    }
    /**
     * Indicates if strict ordering is applied to the addon
     * @param addOn addOn key
     * @returns
     */
    isOrderedAddOn(addOn) {
        return this.orderedAddOns.includes(addOn);
    }
    /**
     * Returns the promise for the Addon construct
     * @param addOn
     * @returns Promise<cdk.Construct>
     */
    getScheduledAddOn(addOn) {
        return this.scheduledAddOns.get(addOn);
    }
    /**
     * Returns all scheduled addons
     * @returns scheduledAddOns: Map<string, Promise<cdk.Construct>>
     */
    getAllScheduledAddons() {
        return this.scheduledAddOns;
    }
    /**
     * Provides the resource registered under supplied name
     * @param name of the resource to be returned
     * @returns Resource object or undefined if no resource was found
     */
    getResource(name) {
        return this.resourceContext.get(name);
    }
    /**
     * Same as {@link getResource} but will fail if the specified resource is not found
     * @param name of the resource to be returned
     * @returns Resource object (fails if not found)
     */
    getRequiredResource(name) {
        const result = this.resourceContext.get(name);
        assert(result, 'Required resource ' + name + ' is missing.');
        return result;
    }
    /**
     * Update addonContext map
     * @param addOn
     * @param Values
     */
    addAddOnContext(addOn, values) {
        this.addonContext.set(addOn, values);
    }
    /**
    * Returns all addon contexts
    * @returns addonContext: Map<string, Values>
    */
    getAddOnContexts() {
        return this.addonContext;
    }
}
exports.ClusterInfo = ClusterInfo;
/**
 * Enum type for two different GitOps operating modes
 */
var GitOpsMode;
(function (GitOpsMode) {
    /**
     * CDK deploys the `Application` resource for each AddOn enabled or customer workloads,
     * and ArgoCD deploys the actual AddOn and workloads via GitOps based on the `Application` resource.
     */
    GitOpsMode[GitOpsMode["APPLICATION"] = 0] = "APPLICATION";
    /**
     * CDK deploys only one `Application` resource for the App of Apps, aka `bootstrap-apps`,
     * and ArgoCD deploys all the AddOns based on the child `Application` defined in `bootstrap-apps`.
     */
    GitOpsMode[GitOpsMode["APP_OF_APPS"] = 1] = "APP_OF_APPS";
})(GitOpsMode || (exports.GitOpsMode = GitOpsMode = {}));
//# sourceMappingURL=data:application/json;base64,