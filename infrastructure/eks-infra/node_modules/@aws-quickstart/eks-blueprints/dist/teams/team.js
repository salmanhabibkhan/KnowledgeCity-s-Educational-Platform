"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformTeam = exports.ApplicationTeam = exports.TeamProps = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const iam = require("aws-cdk-lib/aws-iam");
const eksv2 = require("@aws-cdk/aws-eks-v2-alpha");
const csi_driver_provider_aws_secrets_1 = require("../addons/secrets-store/csi-driver-provider-aws-secrets");
const yaml_utils_1 = require("../utils/yaml-utils");
const default_team_roles_1 = require("./default-team-roles");
const utils_1 = require("../utils");
/**
 * Team properties.
 */
class TeamProps {
    constructor() {
        /**
         *  Annotations such as necessary for GitOps engine.
         */
        this.namespaceAnnotations = { "argocd.argoproj.io/sync-wave": "-1" };
        /**
         * Optional, but highly recommended setting to ensure predictable demands.
         */
        this.namespaceHardLimits = {
            'requests.cpu': '10', // TODO verify sane defaults
            'requests.memory': '10Gi',
            'limits.cpu': '20',
            'limits.memory': '20Gi'
        };
    }
}
exports.TeamProps = TeamProps;
class ApplicationTeam {
    constructor(teamProps) {
        var _a;
        this.name = teamProps.name;
        this.teamProps = {
            name: teamProps.name,
            namespace: (_a = teamProps.namespace) !== null && _a !== void 0 ? _a : "team-" + teamProps.name,
            users: teamProps.users,
            namespaceAnnotations: teamProps.namespaceAnnotations,
            namespaceLabels: teamProps.namespaceLabels,
            namespaceHardLimits: teamProps.namespaceHardLimits,
            serviceAccountName: teamProps.serviceAccountName,
            serviceAccountPolicies: teamProps.serviceAccountPolicies,
            userRoleArn: teamProps.userRoleArn,
            teamSecrets: teamProps.teamSecrets,
            teamManifestDir: teamProps.teamManifestDir,
            extensionFunction: teamProps.extensionFunction
        };
    }
    setup(clusterInfo) {
        this.defaultSetupAccess(clusterInfo);
        this.setupNamespace(clusterInfo);
        this.setupServiceAccount(clusterInfo);
        this.setupSecrets(clusterInfo);
        if (this.teamProps.extensionFunction) {
            this.teamProps.extensionFunction(this, clusterInfo);
        }
    }
    defaultSetupAccess(clusterInfo) {
        var _a;
        const props = this.teamProps;
        if (!(clusterInfo.cluster instanceof aws_eks_1.Cluster || clusterInfo.clusterv2 instanceof eksv2.Cluster)) {
            utils_1.logger.warn(`Team ${props.name} has cluster access updates that are not supported with imported clusters`);
            return;
        }
        const users = (_a = this.teamProps.users) !== null && _a !== void 0 ? _a : [];
        const teamRole = this.getOrCreateRole(clusterInfo, users, props.userRoleArn);
        if (clusterInfo.clusterv2 instanceof eksv2.Cluster) {
            const eksClusterv2 = clusterInfo.clusterv2;
            if (teamRole) {
                eksClusterv2.grantAccess(props.name + '-access', teamRole.roleArn, [new eksv2.AccessPolicy({
                        accessScope: { type: eksv2.AccessScopeType.NAMESPACE, namespaces: [props.namespace] },
                        policy: eksv2.AccessPolicyArn.AMAZON_EKS_ADMIN_POLICY
                    })]);
            }
        }
        else if (clusterInfo.cluster instanceof aws_eks_1.Cluster) {
            const eksCluster = clusterInfo.cluster;
            const awsAuth = eksCluster.awsAuth;
            if (teamRole) {
                awsAuth.addRoleMapping(teamRole, { groups: [props.namespace + "-team-group"], username: props.name });
            }
        }
        new aws_cdk_lib_1.CfnOutput(clusterInfo.cluster.stack, props.name + ' team role ', { value: teamRole ? teamRole.roleArn : "none" });
    }
    /**
     *
     * @param clusterInfo
     */
    defaultSetupAdminAccess(clusterInfo) {
        var _a;
        const props = this.teamProps;
        if (!(clusterInfo.cluster instanceof aws_eks_1.Cluster || clusterInfo.clusterv2 instanceof eksv2.Cluster)) {
            utils_1.logger.warn(`Team ${props.name} has cluster access updates that are not supported with imported clusters`);
            return;
        }
        const admins = (_a = this.teamProps.users) !== null && _a !== void 0 ? _a : [];
        const adminRole = this.getOrCreateRole(clusterInfo, admins, props.userRoleArn);
        if (clusterInfo.clusterv2 instanceof eksv2.Cluster) {
            const eksClusterv2 = clusterInfo.clusterv2;
            if (adminRole) {
                eksClusterv2.grantAccess(props.name + '-access', adminRole.roleArn, [new eksv2.AccessPolicy({
                        accessScope: { type: eksv2.AccessScopeType.CLUSTER },
                        policy: eksv2.AccessPolicyArn.AMAZON_EKS_CLUSTER_ADMIN_POLICY
                    })]);
            }
        }
        else if (clusterInfo.cluster instanceof aws_eks_1.Cluster) {
            if (adminRole) {
                const eksCluster = clusterInfo.cluster;
                eksCluster.awsAuth.addMastersRole(adminRole, this.teamProps.name);
            }
        }
        new aws_cdk_lib_1.CfnOutput(clusterInfo.cluster.stack, props.name + ' team admin ', { value: adminRole ? adminRole.roleArn : "none" });
    }
    /**
     * Creates a new role with trust relationship or adds trust relationship for an existing role.
     * @param clusterInfo
     * @param users
     * @param role may be null if both role and users were not provided
     * @returns
     */
    getOrCreateRole(clusterInfo, users, roleArn) {
        let role = undefined;
        if (roleArn) {
            role = iam.Role.fromRoleArn(clusterInfo.cluster.stack, `${this.name}-team-role`, roleArn);
            users.forEach(user => role === null || role === void 0 ? void 0 : role.grant(user, "sts:assumeRole"));
        }
        else if (users && users.length > 0) {
            role = new iam.Role(clusterInfo.cluster.stack, this.teamProps.namespace + 'AccessRole', {
                assumedBy: new iam.CompositePrincipal(...users)
            });
            role.addToPrincipalPolicy(new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                resources: [clusterInfo.cluster.clusterArn],
                actions: [
                    "eks:DescribeNodegroup",
                    "eks:ListNodegroups",
                    "eks:DescribeCluster",
                    "eks:ListClusters",
                    "eks:AccessKubernetesApi",
                    "ssm:GetParameter",
                    "eks:ListUpdates",
                    "eks:ListFargateProfiles"
                ]
            }));
            role.addToPrincipalPolicy(new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                resources: ["*"],
                actions: [
                    "eks:ListClusters"
                ]
            }));
        }
        return role;
    }
    /**
     * Creates namespace and sets up policies.
     * @param clusterInfo
     */
    setupNamespace(clusterInfo) {
        const props = this.teamProps;
        const namespaceName = props.namespace;
        const teamManifestDir = props.teamManifestDir;
        this.namespaceManifest = new aws_eks_1.KubernetesManifest(clusterInfo.cluster.stack, props.name, {
            cluster: clusterInfo.cluster,
            manifest: [{
                    apiVersion: 'v1',
                    kind: 'Namespace',
                    metadata: {
                        name: namespaceName,
                        annotations: props.namespaceAnnotations,
                        labels: props.namespaceLabels
                    }
                }],
            overwrite: true,
            prune: true
        });
        if (props.namespaceHardLimits) {
            this.setupNamespacePolicies(clusterInfo, namespaceName);
        }
        const defaultRoles = new default_team_roles_1.DefaultTeamRoles().createManifest(namespaceName); //TODO: add support for custom RBAC
        const rbacManifest = new aws_eks_1.KubernetesManifest(clusterInfo.cluster.stack, namespaceName + "-rbac", {
            cluster: clusterInfo.cluster,
            manifest: defaultRoles,
            overwrite: true,
            prune: true
        });
        rbacManifest.node.addDependency(this.namespaceManifest);
        if (teamManifestDir) {
            (0, yaml_utils_1.applyYamlFromDir)(teamManifestDir, clusterInfo.cluster, this.namespaceManifest);
        }
    }
    /**
     * Sets up quotas
     * @param clusterInfo
     * @param namespaceName
     */
    setupNamespacePolicies(clusterInfo, namespaceName) {
        const quotaName = this.teamProps.name + "-quota";
        const quotaManifest = clusterInfo.cluster.addManifest(quotaName, {
            apiVersion: 'v1',
            kind: 'ResourceQuota',
            metadata: {
                name: quotaName,
                namespace: namespaceName
            },
            spec: {
                hard: this.teamProps.namespaceHardLimits
            }
        });
        quotaManifest.node.addDependency(this.namespaceManifest);
    }
    /**
     * Sets up ServiceAccount for the team namespace
     * @param clusterInfo
     */
    setupServiceAccount(clusterInfo) {
        const serviceAccountName = this.teamProps.serviceAccountName ? this.teamProps.serviceAccountName : `${this.teamProps.name}-sa`;
        const cluster = clusterInfo.cluster;
        this.serviceAccount = cluster.addServiceAccount(`${this.teamProps.name}-service-account`, {
            name: serviceAccountName,
            namespace: this.teamProps.namespace
        });
        this.serviceAccount.node.addDependency(this.namespaceManifest);
        if (this.teamProps.serviceAccountPolicies) {
            this.teamProps.serviceAccountPolicies.forEach(policy => this.serviceAccount.role.addManagedPolicy(policy));
        }
        const serviceAccountOutput = new aws_cdk_lib_1.CfnOutput(clusterInfo.cluster.stack, `${this.teamProps.name}-sa`, {
            value: serviceAccountName
        });
        serviceAccountOutput.node.addDependency(this.namespaceManifest);
    }
    /**
     * Sets up secrets
     * @param clusterInfo
     */
    setupSecrets(clusterInfo) {
        if (this.teamProps.teamSecrets) {
            const secretProviderClassName = this.teamProps.name + '-aws-secrets';
            new csi_driver_provider_aws_secrets_1.SecretProviderClass(clusterInfo, this.serviceAccount, secretProviderClassName, ...this.teamProps.teamSecrets);
        }
    }
}
exports.ApplicationTeam = ApplicationTeam;
/**
 * Platform team will setup all team members as admin access to the cluster by adding them to the master group.
 * The setup skips namespace/quota configuration.
 */
class PlatformTeam extends ApplicationTeam {
    constructor(teamProps) {
        super(teamProps);
    }
    /**
     * Override
     * @param clusterInfo
     */
    setup(clusterInfo) {
        this.defaultSetupAdminAccess(clusterInfo);
    }
}
exports.PlatformTeam = PlatformTeam;
//# sourceMappingURL=data:application/json;base64,