"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddOnNameOrId = getAddOnNameOrId;
exports.isOrderedAddOn = isOrderedAddOn;
exports.dependable = dependable;
exports.conflictsWith = conflictsWith;
exports.conflictsWithAutoMode = conflictsWithAutoMode;
const assert = require("assert");
require("reflect-metadata");
const semver = require("semver");
const log_utils_1 = require("./log-utils");
/**
 * Returns AddOn Id if defined else returns the class name
 * @param addOn
 * @returns string
 */
function getAddOnNameOrId(addOn) {
    var _a;
    return (_a = addOn.id) !== null && _a !== void 0 ? _a : addOn.constructor.name;
}
function isOrderedAddOn(addOn) {
    var _a, _b;
    return (_b = (_a = Reflect.getMetadata("ordered", addOn.constructor)) !== null && _a !== void 0 ? _a : Reflect.getMetadata("ordered", addOn)) !== null && _b !== void 0 ? _b : false;
}
/**
 * Decorator function that accepts a list of AddOns and
 * ensures addons are scheduled to be added as well as
 * add them as dependencies
 * @param addOns
 * @returns
 */
function dependable(...addOns) {
    return function (target, key, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            const dependencies = Array();
            const clusterInfo = args[0];
            const stack = clusterInfo.cluster.stack.stackName;
            addOns.forEach((addOn) => {
                var _a, _b;
                if (clusterInfo.autoMode && isAutoModeAddon(addOn)) {
                    return;
                }
                const dep = clusterInfo.getScheduledAddOn(addOn);
                let targetString = (_b = (_a = target === null || target === void 0 ? void 0 : target.constructor) === null || _a === void 0 ? void 0 : _a.toString().split("\n")[0]) !== null && _b !== void 0 ? _b : "unknown";
                assert(dep, `Missing a dependency for ${addOn} for ${stack} and target ${targetString}`);
                dependencies.push(dep);
            });
            const result = originalMethod.apply(this, args);
            Promise.all(dependencies.values()).then((constructs) => {
                constructs.forEach((construct) => {
                    result.then((resource) => {
                        resource.node.addDependency(construct);
                    });
                });
            }).catch(err => { throw new Error(err); });
            return result;
        };
        return descriptor;
    };
}
/**
 * Decorator function that accepts a list of AddOns and
 * throws error if those addons are scheduled to be added as well
 * As they should not be deployed with
 * @param addOns
 * @returns
 */
function conflictsWith(...addOns) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target, key, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            // const dependencies: (Promise<Construct> | undefined)[] = [];
            const clusterInfo = args[0];
            const stack = clusterInfo.cluster.stack.stackName;
            addOns.forEach((addOn) => {
                const dep = clusterInfo.getScheduledAddOn(addOn);
                if (dep) {
                    throw new Error(`Deploying ${stack} failed due to conflicting add-on: ${addOn}.`);
                }
            });
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
function compareEksVersions(version1, version2) {
    // Extract semver and build number from both versions
    const [semver1, build1] = parseEksVersion(version1);
    const [semver2, build2] = parseEksVersion(version2);
    // Compare semver parts first
    const semverCompare = semver.compare(semver1, semver2);
    if (semverCompare !== 0)
        return semverCompare;
    // If semver parts are equal, compare build numbers
    return build1 - build2;
}
// Helper function to parse EKS version
function parseEksVersion(version) {
    const match = version.match(/^v?(\d+\.\d+\.\d+)(?:-eksbuild\.(\d+))?$/);
    if (!match) {
        throw new Error(`Invalid EKS version format: ${version}`);
    }
    return [match[1], parseInt(match[2] || '0', 10)];
}
function conflictsWithAutoMode(minExpectedVersion) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target, key, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            const clusterInfo = args[0];
            const stack = clusterInfo.cluster.stack.stackName;
            if (!clusterInfo.autoMode) {
                return originalMethod.apply(this, args);
            }
            if (minExpectedVersion === "fail") {
                throw new Error(`Deploying ${stack} failed. This add-on is already available on the cluster with EKS Auto Mode.`);
            }
            else if (minExpectedVersion == null) {
                log_utils_1.logger.warn(`This add-on is already available on the cluster with EKS Auto Mode.`);
                return originalMethod.apply(this, args);
            }
            else if (compareEksVersions(this.version, minExpectedVersion) >= 0) { // what to do if other nodegroups attached too?
                log_utils_1.logger.warn(`This add-on is already available on the cluster with EKS Auto Mode.`);
                return originalMethod.apply(this, args);
            }
            else {
                throw new Error(`Deploying ${stack} failed. This add-on is already available on the cluster with EKS Auto Mode.  If you would like to install this addon alongside automode, please upgrade to version ${minExpectedVersion}`);
            }
        };
        return descriptor;
    };
}
/**
 * Checks if the passed addon is part of auto mode and deployed by the EKS CP.
 * @param addOn addOn name to check
 * @returns true if it is one of the addOns that is managed by the EKS in Auto Mode
 */
function isAutoModeAddon(addOn) {
    const automodeAddons = [
        "EbsCsiDriverAddOn",
        "AwsLoadBalancerControllerAddOn",
        "VpcCniAddOn",
        "CoreDnsAddOn",
        "KubeProxyAddOn",
    ];
    return automodeAddons.includes(addOn);
}
//# sourceMappingURL=data:application/json;base64,