"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyYamlFromDir = applyYamlFromDir;
exports.readYamlDocument = readYamlDocument;
exports.loadMultiResourceYaml = loadMultiResourceYaml;
exports.loadYaml = loadYaml;
exports.loadExternalYaml = loadExternalYaml;
exports.serializeYaml = serializeYaml;
exports.convertKeyPair = convertKeyPair;
const fs = require("fs");
const yaml = require("js-yaml");
/**
 * Applies all manifests from a directory. Note: The manifests are not checked,
 * so user must ensure the manifests have the correct namespaces.
 * @param dir
 * @param cluster
 * @param namespaceManifest
 */
function applyYamlFromDir(dir, cluster, namespaceManifest) {
    fs.readdirSync(dir, { encoding: 'utf8' }).forEach((file, index) => {
        if (file.split('.').pop() == 'yaml') {
            const data = fs.readFileSync(dir + file, 'utf8');
            if (data != undefined) {
                yaml.loadAll(data, function (item) {
                    const resources = cluster.addManifest(file.substring(0, file.length - 5) + index, item);
                    resources.node.addDependency(namespaceManifest);
                });
            }
        }
    });
}
/**
 * Reads the YAML document from a local path.
 * @param path YAML document path
 * @returns YAML document string
 */
function readYamlDocument(path) {
    try {
        const doc = fs.readFileSync(path, 'utf8');
        return doc;
    }
    catch (e) {
        console.log(e + ' for path: ' + path);
        throw e;
    }
}
/**
 * Reads the YAML document from a local path and parses them as
 * multiple YAML documents separated by `---` as expected in a Kubernetes manifest file
 * @param path YAML document path
 * @returns a list of parsed YAML documents
 */
function loadMultiResourceYaml(path) {
    const doc = readYamlDocument(path);
    return doc.split("---").map((e) => loadYaml(e));
}
/**
 * Parses the sting document into a single YAML document
 * @param document document
 * @returns yaml document
 */
function loadYaml(document) {
    return yaml.load(document);
}
/**
 * Reads the YAML document from a URL and parses
 * multiple YAML documents separated by `---` as expected in a Kubernetes manifest file Note: The file from the URL is
 * not validated, so user must ensure the URL contains a valid manifest.
 * @param url YAML document URL
 * @returns a list of parsed YAML documents
 */
function loadExternalYaml(url) {
    /* eslint-disable */
    const request = require('sync-request'); // moved away from import as it is causing open handles that prevents jest from completion
    const response = request('GET', url);
    return yaml.loadAll(response.getBody().toString());
}
/**
 * Serializes object as a YAML document
 * @param document document
 * @returns yaml document
 */
function serializeYaml(document) {
    return yaml.dump(document);
}
/**
 * Helper function to convert a key-pair values (with an operator)
 * of spec configurations to appropriate json format for addManifest function
 * @param reqs
 * @returns newReqs
 * */
function convertKeyPair(reqs) {
    const newReqs = [];
    for (let req of reqs) {
        const key = req["key"];
        const op = req["operator"];
        const val = req["values"];
        const requirement = { key: key, operator: op, values: val };
        newReqs.push(requirement);
    }
    return newReqs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFtbC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy95YW1sLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBYUEsNENBWUM7QUFPRCw0Q0FRQztBQVFELHNEQUdDO0FBT0QsNEJBRUM7QUFTRCw0Q0FLQztBQU9ELHNDQUdDO0FBT0Qsd0NBVUM7QUFuR0QseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUdoQzs7Ozs7O0dBTUc7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsT0FBcUIsRUFBRSxpQkFBcUM7SUFDdEcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDOUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ2xDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNqRCxJQUFJLElBQUksSUFBSSxTQUFTLEVBQUUsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBVSxJQUFJO29CQUM3QixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUF5QixJQUFJLENBQUMsQ0FBQztvQkFDL0csU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDcEQsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBQyxJQUFZO0lBQ3pDLElBQUksQ0FBQztRQUNELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLENBQUM7SUFDWixDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IscUJBQXFCLENBQUMsSUFBWTtJQUM5QyxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxRQUFnQjtJQUNyQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLGdCQUFnQixDQUFDLEdBQVc7SUFDeEMsb0JBQW9CO0lBQ3BCLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLDBGQUEwRjtJQUNuSSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxRQUFhO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQixDQUFDO0FBQ0Q7Ozs7O0tBS0s7QUFDTCxTQUFnQixjQUFjLENBQUMsSUFBMkQ7SUFDdEYsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25CLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbkIsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUIsTUFBTSxXQUFXLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzVELE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBla3MgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVrcyc7XG5pbXBvcnQgeyBLdWJlcm5ldGVzTWFuaWZlc3QgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWtzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHlhbWwgZnJvbSAnanMteWFtbCc7XG5cblxuLyoqXG4gKiBBcHBsaWVzIGFsbCBtYW5pZmVzdHMgZnJvbSBhIGRpcmVjdG9yeS4gTm90ZTogVGhlIG1hbmlmZXN0cyBhcmUgbm90IGNoZWNrZWQsIFxuICogc28gdXNlciBtdXN0IGVuc3VyZSB0aGUgbWFuaWZlc3RzIGhhdmUgdGhlIGNvcnJlY3QgbmFtZXNwYWNlcy4gXG4gKiBAcGFyYW0gZGlyIFxuICogQHBhcmFtIGNsdXN0ZXIgXG4gKiBAcGFyYW0gbmFtZXNwYWNlTWFuaWZlc3QgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVlhbWxGcm9tRGlyKGRpcjogc3RyaW5nLCBjbHVzdGVyOiBla3MuSUNsdXN0ZXIsIG5hbWVzcGFjZU1hbmlmZXN0OiBLdWJlcm5ldGVzTWFuaWZlc3QpOiB2b2lkIHtcbiAgICBmcy5yZWFkZGlyU3luYyhkaXIsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KS5mb3JFYWNoKChmaWxlLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoZmlsZS5zcGxpdCgnLicpLnBvcCgpID09ICd5YW1sJykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhkaXIgKyBmaWxlLCAndXRmOCcpO1xuICAgICAgICAgICAgaWYgKGRhdGEgIT0gdW5kZWZpbmVkKSB7ICBcbiAgICAgICAgICAgICAgICB5YW1sLmxvYWRBbGwoZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VzID0gY2x1c3Rlci5hZGRNYW5pZmVzdChmaWxlLnN1YnN0cmluZygwLCBmaWxlLmxlbmd0aCAtIDUpICsgaW5kZXgsIDxSZWNvcmQ8c3RyaW5nLCBhbnk+W10+aXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlcy5ub2RlLmFkZERlcGVuZGVuY3kobmFtZXNwYWNlTWFuaWZlc3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIFlBTUwgZG9jdW1lbnQgZnJvbSBhIGxvY2FsIHBhdGguIFxuICogQHBhcmFtIHBhdGggWUFNTCBkb2N1bWVudCBwYXRoXG4gKiBAcmV0dXJucyBZQU1MIGRvY3VtZW50IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZFlhbWxEb2N1bWVudChwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRvYyA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLCAndXRmOCcpO1xuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSArICcgZm9yIHBhdGg6ICcgKyBwYXRoKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIFlBTUwgZG9jdW1lbnQgZnJvbSBhIGxvY2FsIHBhdGggYW5kIHBhcnNlcyB0aGVtIGFzIFxuICogbXVsdGlwbGUgWUFNTCBkb2N1bWVudHMgc2VwYXJhdGVkIGJ5IGAtLS1gIGFzIGV4cGVjdGVkIGluIGEgS3ViZXJuZXRlcyBtYW5pZmVzdCBmaWxlXG4gKiBAcGFyYW0gcGF0aCBZQU1MIGRvY3VtZW50IHBhdGhcbiAqIEByZXR1cm5zIGEgbGlzdCBvZiBwYXJzZWQgWUFNTCBkb2N1bWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRNdWx0aVJlc291cmNlWWFtbChwYXRoOiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IGRvYyA9IHJlYWRZYW1sRG9jdW1lbnQocGF0aCk7XG4gICAgcmV0dXJuIGRvYy5zcGxpdChcIi0tLVwiKS5tYXAoKGU6IGFueSkgPT4gbG9hZFlhbWwoZSkpO1xufVxuXG4vKipcbiAqIFBhcnNlcyB0aGUgc3RpbmcgZG9jdW1lbnQgaW50byBhIHNpbmdsZSBZQU1MIGRvY3VtZW50XG4gKiBAcGFyYW0gZG9jdW1lbnQgZG9jdW1lbnQgXG4gKiBAcmV0dXJucyB5YW1sIGRvY3VtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkWWFtbChkb2N1bWVudDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4geWFtbC5sb2FkKGRvY3VtZW50KTtcbn1cblxuLyoqXG4gKiBSZWFkcyB0aGUgWUFNTCBkb2N1bWVudCBmcm9tIGEgVVJMIGFuZCBwYXJzZXMgXG4gKiBtdWx0aXBsZSBZQU1MIGRvY3VtZW50cyBzZXBhcmF0ZWQgYnkgYC0tLWAgYXMgZXhwZWN0ZWQgaW4gYSBLdWJlcm5ldGVzIG1hbmlmZXN0IGZpbGUgTm90ZTogVGhlIGZpbGUgZnJvbSB0aGUgVVJMIGlzXG4gKiBub3QgdmFsaWRhdGVkLCBzbyB1c2VyIG11c3QgZW5zdXJlIHRoZSBVUkwgY29udGFpbnMgYSB2YWxpZCBtYW5pZmVzdC5cbiAqIEBwYXJhbSB1cmwgWUFNTCBkb2N1bWVudCBVUkxcbiAqIEByZXR1cm5zIGEgbGlzdCBvZiBwYXJzZWQgWUFNTCBkb2N1bWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFeHRlcm5hbFlhbWwodXJsOiBzdHJpbmcpOiBhbnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3N5bmMtcmVxdWVzdCcpOyAvLyBtb3ZlZCBhd2F5IGZyb20gaW1wb3J0IGFzIGl0IGlzIGNhdXNpbmcgb3BlbiBoYW5kbGVzIHRoYXQgcHJldmVudHMgamVzdCBmcm9tIGNvbXBsZXRpb25cbiAgICBjb25zdCByZXNwb25zZSA9IHJlcXVlc3QoJ0dFVCcsIHVybCk7XG4gICAgcmV0dXJuIHlhbWwubG9hZEFsbChyZXNwb25zZS5nZXRCb2R5KCkudG9TdHJpbmcoKSk7XG59XG5cbi8qKlxuICogU2VyaWFsaXplcyBvYmplY3QgYXMgYSBZQU1MIGRvY3VtZW50XG4gKiBAcGFyYW0gZG9jdW1lbnQgZG9jdW1lbnQgXG4gKiBAcmV0dXJucyB5YW1sIGRvY3VtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVZYW1sKGRvY3VtZW50OiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiB5YW1sLmR1bXAoZG9jdW1lbnQpO1xuXG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGEga2V5LXBhaXIgdmFsdWVzICh3aXRoIGFuIG9wZXJhdG9yKVxuICogb2Ygc3BlYyBjb25maWd1cmF0aW9ucyB0byBhcHByb3ByaWF0ZSBqc29uIGZvcm1hdCBmb3IgYWRkTWFuaWZlc3QgZnVuY3Rpb25cbiAqIEBwYXJhbSByZXFzXG4gKiBAcmV0dXJucyBuZXdSZXFzXG4gKiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRLZXlQYWlyKHJlcXM6IHsga2V5OiBzdHJpbmc7IG9wZXJhdG9yOiBzdHJpbmc7IHZhbHVlczogc3RyaW5nW10gfVtdKTogYW55W10ge1xuICAgIGNvbnN0IG5ld1JlcXMgPSBbXTtcbiAgICBmb3IgKGxldCByZXEgb2YgcmVxcykge1xuICAgICAgICBjb25zdCBrZXkgPSByZXFbXCJrZXlcIl07XG4gICAgICAgIGNvbnN0IG9wID0gcmVxW1wib3BlcmF0b3JcIl07XG4gICAgICAgIGNvbnN0IHZhbCA9IHJlcVtcInZhbHVlc1wiXTtcbiAgICAgICAgY29uc3QgcmVxdWlyZW1lbnQgPSB7IGtleToga2V5LCBvcGVyYXRvcjogb3AsIHZhbHVlczogdmFsIH07XG4gICAgICAgIG5ld1JlcXMucHVzaChyZXF1aXJlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBuZXdSZXFzO1xufVxuIl19