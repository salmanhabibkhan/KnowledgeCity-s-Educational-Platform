"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contextHandler = contextHandler;
const chalk = require("chalk");
const minimatch_1 = require("minimatch");
const api_1 = require("../../../@aws-cdk/tmp-toolkit-helpers/src/api");
const tables_1 = require("../cli/tables");
const user_configuration_1 = require("../cli/user-configuration");
const version = require("../cli/version");
const logging_1 = require("../logging");
async function contextHandler(options) {
    if (options.clear) {
        options.context.clear();
        await options.context.save(user_configuration_1.PROJECT_CONTEXT);
        (0, logging_1.info)('All context values cleared.');
    }
    else if (options.reset) {
        invalidateContext(options.context, options.reset, options.force ?? false);
        await options.context.save(user_configuration_1.PROJECT_CONTEXT);
    }
    else {
        // List -- support '--json' flag
        if (options.json) {
            /* c8 ignore start */
            const contextValues = options.context.all;
            (0, logging_1.result)(JSON.stringify(contextValues, undefined, 2));
            /* c8 ignore stop */
        }
        else {
            listContext(options.context);
        }
    }
    await version.displayVersionMessage();
    return 0;
}
function listContext(context) {
    const keys = contextKeys(context);
    if (keys.length === 0) {
        (0, logging_1.info)('This CDK application does not have any saved context values yet.');
        (0, logging_1.info)('');
        (0, logging_1.info)('Context will automatically be saved when you synthesize CDK apps');
        (0, logging_1.info)('that use environment context information like AZ information, VPCs,');
        (0, logging_1.info)('SSM parameters, and so on.');
        return;
    }
    // Print config by default
    const data_out = [[chalk.green('#'), chalk.green('Key'), chalk.green('Value')]];
    for (const [i, key] of keys) {
        const jsonWithoutNewlines = JSON.stringify(context.all[key], undefined, 2).replace(/\s+/g, ' ');
        data_out.push([i, key, jsonWithoutNewlines]);
    }
    (0, logging_1.info)('Context found in %s:', chalk.blue(user_configuration_1.PROJECT_CONFIG));
    (0, logging_1.info)('');
    (0, logging_1.info)((0, tables_1.renderTable)(data_out, process.stdout.columns));
    // eslint-disable-next-line max-len
    (0, logging_1.info)(`Run ${chalk.blue('cdk context --reset KEY_OR_NUMBER')} to remove a context key. It will be refreshed on the next CDK synthesis run.`);
}
function invalidateContext(context, key, force) {
    const i = parseInt(key, 10);
    if (`${i}` === key) {
        // was a number and we fully parsed it.
        key = keyByNumber(context, i);
    }
    // Unset!
    if (context.has(key)) {
        context.unset(key);
        // check if the value was actually unset.
        if (!context.has(key)) {
            (0, logging_1.info)('Context value %s reset. It will be refreshed on next synthesis', chalk.blue(key));
            return;
        }
        // Value must be in readonly bag
        (0, logging_1.error)('Only context values specified in %s can be reset through the CLI', chalk.blue(user_configuration_1.PROJECT_CONTEXT));
        if (!force) {
            throw new api_1.ToolkitError(`Cannot reset readonly context value with key: ${key}`);
        }
    }
    // check if value is expression matching keys
    const matches = keysByExpression(context, key);
    if (matches.length > 0) {
        matches.forEach((match) => {
            context.unset(match);
        });
        const { unset, readonly } = getUnsetAndReadonly(context, matches);
        // output the reset values
        printUnset(unset);
        // warn about values not reset
        printReadonly(readonly);
        // throw when none of the matches were reset
        if (!force && unset.length === 0) {
            throw new api_1.ToolkitError('None of the matched context values could be reset');
        }
        return;
    }
    if (!force) {
        throw new api_1.ToolkitError(`No context value matching key: ${key}`);
    }
}
function printUnset(unset) {
    if (unset.length === 0)
        return;
    (0, logging_1.info)('The following matched context values reset. They will be refreshed on next synthesis');
    unset.forEach((match) => {
        (0, logging_1.info)('  %s', match);
    });
}
function printReadonly(readonly) {
    if (readonly.length === 0)
        return;
    (0, logging_1.warning)('The following matched context values could not be reset through the CLI');
    readonly.forEach((match) => {
        (0, logging_1.info)('  %s', match);
    });
    (0, logging_1.info)('');
    (0, logging_1.info)('This usually means they are configured in %s or %s', chalk.blue(user_configuration_1.PROJECT_CONFIG), chalk.blue(user_configuration_1.USER_DEFAULTS));
}
function keysByExpression(context, expression) {
    return context.keys.filter(minimatch_1.minimatch.filter(expression));
}
function getUnsetAndReadonly(context, matches) {
    return matches.reduce((acc, match) => {
        if (context.has(match)) {
            acc.readonly.push(match);
        }
        else {
            acc.unset.push(match);
        }
        return acc;
    }, { unset: [], readonly: [] });
}
function keyByNumber(context, n) {
    for (const [i, key] of contextKeys(context)) {
        if (n === i) {
            return key;
        }
    }
    throw new api_1.ToolkitError(`No context key with number: ${n}`);
}
/**
 * Return enumerated keys in a definitive order
 */
function contextKeys(context) {
    const keys = context.keys;
    keys.sort();
    return enumerate1(keys);
}
function enumerate1(xs) {
    const ret = new Array();
    let i = 1;
    for (const x of xs) {
        ret.push([i, x]);
        i += 1;
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,