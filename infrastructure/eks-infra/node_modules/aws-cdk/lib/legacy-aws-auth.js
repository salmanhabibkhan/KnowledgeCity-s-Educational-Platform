"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkProvider = void 0;
exports.cached = cached;
exports.enableTracing = enableTracing;
const aws_auth_1 = require("./api/aws-auth");
const io_host_1 = require("./cli/io-host");
const singleton_plugin_host_1 = require("./cli/singleton-plugin-host");
/**
 * @deprecated
 */
function cached(obj, sym, fn) {
    if (!(sym in obj)) {
        obj[sym] = fn();
    }
    return obj[sym];
}
/**
 * Enable tracing in the CDK
 *
 * @deprecated cannot be enabled from outside the CDK
 */
function enableTracing(_enabled) {
    // noop
}
/**
 * @deprecated
 */
class SdkProvider {
    static async withAwsCliCompatibleDefaults(options = {}) {
        return aws_auth_1.SdkProvider.withAwsCliCompatibleDefaults({
            ...options,
            ioHelper: io_host_1.CliIoHost.instance().asIoHelper(),
            pluginHost: singleton_plugin_host_1.GLOBAL_PLUGIN_HOST,
        });
    }
    constructor(defaultCredentialProvider, defaultRegion, requestHandler = {}, logger) {
        return new aws_auth_1.SdkProvider(defaultCredentialProvider, defaultRegion, {
            pluginHost: singleton_plugin_host_1.GLOBAL_PLUGIN_HOST,
            ioHelper: io_host_1.CliIoHost.instance().asIoHelper(),
            requestHandler,
            logger,
        });
    }
}
exports.SdkProvider = SdkProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWF3cy1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGVnYWN5LWF3cy1hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWdCQSx3QkFLQztBQXVCRCxzQ0FFQztBQXJDRCw2Q0FBMEU7QUFDMUUsMkNBQTBDO0FBQzFDLHVFQUFpRTtBQUVqRTs7R0FFRztBQUNILFNBQWdCLE1BQU0sQ0FBc0IsR0FBTSxFQUFFLEdBQVcsRUFBRSxFQUFXO0lBQzFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2pCLEdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ0QsT0FBUSxHQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQWtCRDs7OztHQUlHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFDLFFBQWlCO0lBQzdDLE9BQU87QUFDVCxDQUFDO0FBNkNEOztHQUVHO0FBQ0gsTUFBYSxXQUFXO0lBQ2YsTUFBTSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxVQUE4QixFQUFFO1FBQy9FLE9BQU8sc0JBQXlCLENBQUMsNEJBQTRCLENBQUM7WUFDNUQsR0FBRyxPQUFPO1lBQ1YsUUFBUSxFQUFFLG1CQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFO1lBQzNDLFVBQVUsRUFBRSwwQ0FBa0I7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQ0UseUJBQXdELEVBQ3hELGFBQXFCLEVBQ3JCLGlCQUF5QyxFQUFFLEVBQzNDLE1BQWU7UUFFZixPQUFPLElBQUksc0JBQXlCLENBQUMseUJBQXlCLEVBQUUsYUFBYSxFQUFFO1lBQzdFLFVBQVUsRUFBRSwwQ0FBa0I7WUFDOUIsUUFBUSxFQUFFLG1CQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFO1lBQzNDLGNBQWM7WUFDZCxNQUFNO1NBQ1AsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBdEJELGtDQXNCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgYSBsZWdhY3kgd3JhcHBlciBmb3IgY29kZSBmcm9tIHRoZSBhd3MtYXV0aCB0aGF0IHdlIHdhbnQgdG8ga2VlcCB0aGUgc2lnbmF0dXJlcyBpbnRhY3Rcbi8vIFdlIGdlbmVyYWxseSB1c2UgdHdvIGRpZmZlcmVudCBwYXR0ZXJucyBoZXJlOlxuLy8gLSBtYWtlIGEgY29weSBvZiB0aGUgb2xkIGNvZGUgYXMgaXNcbi8vIC0gd3JhcCB0aGUgb2xkIGNvZGUgYW5kIGFkZCBhIGRlcHJlY2F0aW9uIHdhcm5pbmdcbi8vIC0gbWFrZSBhIG5vLW9wIGNvcHkgdGhhdCBwcmVzZXJ2ZXMgdGhlIHByZXZpb3VzIGludGVyZmFjZSBidXQgZG9lc24ndCBkbyBhbnl0aGluZ1xuLy8gVGhpcyB3YXkgd2UgY2FuIGtlZXAgdGhlIG9sZCBjb2RlIHJ1bm5pbmcgdW50aWwgdGhlIG5ldyBjb2RlIGlzIGZ1bGx5IHJlYWR5XG4vLyBhbmQgY2FuIGJlIHVzZWQgYnkgdGhlIHVzZXJzIHRoYXQgYXJlIHJlYWR5IHRvIG1pZ3JhdGVcbi8vIFRoZSBvbGQgY29kZSB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBhd3MtY2RrXG5pbXBvcnQgdHlwZSB7IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyLCBMb2dnZXIsIE5vZGVIdHRwSGFuZGxlck9wdGlvbnMgfSBmcm9tICdAc21pdGh5L3R5cGVzJztcbmltcG9ydCB7IFNka1Byb3ZpZGVyIGFzIFNka1Byb3ZpZGVyQ3VycmVudFZlcnNpb24gfSBmcm9tICcuL2FwaS9hd3MtYXV0aCc7XG5pbXBvcnQgeyBDbGlJb0hvc3QgfSBmcm9tICcuL2NsaS9pby1ob3N0JztcbmltcG9ydCB7IEdMT0JBTF9QTFVHSU5fSE9TVCB9IGZyb20gJy4vY2xpL3NpbmdsZXRvbi1wbHVnaW4taG9zdCc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlZDxBIGV4dGVuZHMgb2JqZWN0LCBCPihvYmo6IEEsIHN5bTogc3ltYm9sLCBmbjogKCkgPT4gQik6IEIge1xuICBpZiAoIShzeW0gaW4gb2JqKSkge1xuICAgIChvYmogYXMgYW55KVtzeW1dID0gZm4oKTtcbiAgfVxuICByZXR1cm4gKG9iaiBhcyBhbnkpW3N5bV07XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0UHJvdmlkZXJQbHVnaW4ge1xuICBnZXRWYWx1ZShhcmdzOiB7W2tleTogc3RyaW5nXTogYW55fSk6IFByb21pc2U8YW55Pjtcbn1cblxuLyoqXG4gKiBBbiBBV1MgYWNjb3VudFxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY2NvdW50IHtcbiAgcmVhZG9ubHkgYWNjb3VudElkOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHBhcnRpdGlvbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEVuYWJsZSB0cmFjaW5nIGluIHRoZSBDREtcbiAqXG4gKiBAZGVwcmVjYXRlZCBjYW5ub3QgYmUgZW5hYmxlZCBmcm9tIG91dHNpZGUgdGhlIENES1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlVHJhY2luZyhfZW5hYmxlZDogYm9vbGVhbikge1xuICAvLyBub29wXG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgaW5kaXZpZHVhbCBTREtzXG4gKiBAZGVwcmVjYXRlZFxuICovXG5pbnRlcmZhY2UgU2RrSHR0cE9wdGlvbnMge1xuICAvKipcbiAgICogUHJveHkgYWRkcmVzcyB0byB1c2VcbiAgICpcbiAgICogQGRlZmF1bHQgTm8gcHJveHlcbiAgICovXG4gIHJlYWRvbmx5IHByb3h5QWRkcmVzcz86IHN0cmluZztcblxuICAvKipcbiAgICogQSBwYXRoIHRvIGEgY2VydGlmaWNhdGUgYnVuZGxlIHRoYXQgY29udGFpbnMgYSBjZXJ0IHRvIGJlIHRydXN0ZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IE5vIGNlcnRpZmljYXRlIGJ1bmRsZVxuICAgKi9cbiAgcmVhZG9ubHkgY2FCdW5kbGVQYXRoPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBkZWZhdWx0IFNESyBwcm92aWRlclxuICogQGRlcHJlY2F0ZWRcbiAqL1xuaW50ZXJmYWNlIFNka1Byb3ZpZGVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBQcm9maWxlIHRvIHJlYWQgZnJvbSB+Ly5hd3NcbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBwcm9maWxlXG4gICAqL1xuICByZWFkb25seSBwcm9maWxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBIVFRQIG9wdGlvbnMgZm9yIFNES1xuICAgKi9cbiAgcmVhZG9ubHkgaHR0cE9wdGlvbnM/OiBTZGtIdHRwT3B0aW9ucztcblxuICAvKipcbiAgICogVGhlIGxvZ2dlciBmb3Igc2RrIGNhbGxzLlxuICAgKi9cbiAgcmVhZG9ubHkgbG9nZ2VyPzogTG9nZ2VyO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBTZGtQcm92aWRlciB7XG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgd2l0aEF3c0NsaUNvbXBhdGlibGVEZWZhdWx0cyhvcHRpb25zOiBTZGtQcm92aWRlck9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBTZGtQcm92aWRlckN1cnJlbnRWZXJzaW9uLndpdGhBd3NDbGlDb21wYXRpYmxlRGVmYXVsdHMoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGlvSGVscGVyOiBDbGlJb0hvc3QuaW5zdGFuY2UoKS5hc0lvSGVscGVyKCksXG4gICAgICBwbHVnaW5Ib3N0OiBHTE9CQUxfUExVR0lOX0hPU1QsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgZGVmYXVsdENyZWRlbnRpYWxQcm92aWRlcjogQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXIsXG4gICAgZGVmYXVsdFJlZ2lvbjogc3RyaW5nLFxuICAgIHJlcXVlc3RIYW5kbGVyOiBOb2RlSHR0cEhhbmRsZXJPcHRpb25zID0ge30sXG4gICAgbG9nZ2VyPzogTG9nZ2VyLFxuICApIHtcbiAgICByZXR1cm4gbmV3IFNka1Byb3ZpZGVyQ3VycmVudFZlcnNpb24oZGVmYXVsdENyZWRlbnRpYWxQcm92aWRlciwgZGVmYXVsdFJlZ2lvbiwge1xuICAgICAgcGx1Z2luSG9zdDogR0xPQkFMX1BMVUdJTl9IT1NULFxuICAgICAgaW9IZWxwZXI6IENsaUlvSG9zdC5pbnN0YW5jZSgpLmFzSW9IZWxwZXIoKSxcbiAgICAgIHJlcXVlc3RIYW5kbGVyLFxuICAgICAgbG9nZ2VyLFxuICAgIH0pO1xuICB9XG59XG4iXX0=